@dialects { csd }

@top Program { rootstatement }

@skip { BlockComment | LineComment | space }

@precedence {
  call,
  prefix,
  plus @left,
  arithOpL @left,
  arithOpR @right,
  gettr @right,
  number,
  opcodeargs @left,
  ternary @left,
  comma @left
}

xmlStatement {
  XmlOpen | XmlClose
}

rootstatement {
  (xmlStatement | statement | InstrumentDeclaration | UdoDeclaration | StructDeclaration | DeclareDeclaration)*
}

statement {
  AssignStatement |
  OpcodeStatement |
  GotoStatement |
  ControlFlowElseStatement |
  ControlFlowStatement |
  newline
}


GotoStatement {
  GotoLabel newline
}


InstrumentDeclaration {
  kw<"instr"> commaSep<(FunctionName | Number)> newline
  statement*
  kw<"endin"> newline
}

UdoDeclaration {
  (
    kw<"opcode"> FunctionName "," OpcodeArguments "," OpcodeArguments newline |
    kw<"opcode"> FunctionName "(" commaSep<SignalRateIdentifier> ")" ":" "(" commaSep<SignalRateIdentifier> ")" newline |
    kw<"opcode"> FunctionName "(" commaSep<SignalRateIdentifier> ")" ":" SignalRateIdentifier newline
  )
  statement*
  kw<"endop"> newline
}

StructDeclaration {
  kw<"struct"> FunctionName commaSep<SignalRateIdentifier> newline
}

DeclareDeclaration {
  kw<"declare"> FunctionName "(" commaSep<SignalRateIdentifier> ")" ":" "(" commaSep<SignalRateIdentifier> ")" newline |
  kw<"declare"> FunctionName "(" commaSep<SignalRateIdentifier> ")" ":" SignalRateIdentifier newline
}

AssignStatement {
  SignalRateIdentifier AssignOp expressionNoComma newline
}

CallbackExpression { AmbiguousIdentifier !call ArgList newline? }

expressionNoComma {
  String |
  AmbiguousIdentifier ("[" "]" )? (!gettr PropertyIdentifier ("[" expressionNoComma? "]" )? )? |
  ParenthesizedExpression { "(" expressionNoComma ")" } |
  BracketedExpression { AmbiguousIdentifier ("[" expressionNoComma "]")+ } |
  !number Number |
  UnaryExpression {
    !plus  ArithOp<"+" | "-"> expressionNoComma
  } |
  BinaryExpression {
    expressionNoComma !arithOpR arithOpRight expressionNoComma |
    expressionNoComma !arithOpL arithOpLeft expressionNoComma |
    expressionNoComma !plus ArithOp<"+" | "-"> expressionNoComma
  } |
  CallbackExpression |
  ConditionalExpression {
    expressionNoComma !ternary "?" expressionNoComma ":" expressionNoComma
  }
}

ArgList {
  "(" commaSep<expressionNoComma> ")" |
  "(" ")"
}


OpcodeStatement {
  commaSep<expressionNoComma>+ newline
}

ConstrolFlowBeginToken {
  kw<"if"> | kw<"while"> | kw<"until">
}

ControlFlowDoTokens {
  kw<"do"> | ControlFlowDoToken
}

ControlFlowEndTokens {
  kw<"fi"> | ControlFlowEndToken
}

ControlFlowStatement {
  ConstrolFlowBeginToken expressionNoComma ControlFlowDoTokens newline
  statement*
  ControlFlowEndTokens |
  ConstrolFlowBeginToken expressionNoComma ControlFlowGotoToken
  DeclareGotoLabel { word } newline
}

ControlFlowElseStatement {
  ElseStatement {
    ControlFlowElseIfToken expressionNoComma ControlFlowDoTokens | ControlFlowElseToken ControlFlowDoTokens
  }
}

FunctionName { word }

SignalRateIdentifier { AmbiguousIdentifier }

AssignOp {
  kw<"init"> | assigners
}

XmlAttribute {
  XmlTagName "=" String
}

XmlOpen { "<" AmbiguousIdentifier XmlAttribute* ">"  }

XmlClose { xmlCloseChars AmbiguousIdentifier ">"   }


@tokens {

  LineComment { ";" ![\n]* | "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  Number { @digit+ | @digit? "." @digit+ | @digit+ "." @digit* }

  word { identifierChar (identifierChar | @digit)* }

  xmlCloseChars { "<" "/" }

  OpcodeArguments {  ( $[aijkOPVJKopS0\[\]]+) }

  AmbiguousIdentifier {
    ZeroDbFs | word (":" word)?
  }

  PropertyIdentifier { "." AmbiguousIdentifier }

  XmlTagName { word }

  GotoLabel {
    word ":"
  }

  newline { $[\n\r]+ }
  space { $[ \t]+ }
  String { '"' (![\\\n"] | "\\" _)* '"'? }
  ZeroDbFs { "0dbfs" }

  assigners {
    "="  |
    "+=" |
    "-=" |
    "*=" |
    "/=" |
    "|=" |
    "&="
  }

  ArithOp<expr> { expr }

  arithOpRight {
    "~" |
    "!" |
    "Â¬"
  }

  arithOpLeft {
    "/"  |
    "*"  |
    "%"  |
    "^"  |
    "#"  |
    "&"  |
    "|"  |
    "&&" |
    "||" |
    "<"  |
    ">"  |
    "<=" |
    ">=" |
    "==" |
    "!=" |
    ">>" |
    "<<"
  }

  @precedence {
    space,
    newline,
    BlockComment,
    LineComment,
    xmlCloseChars,
    arithOpLeft,
    arithOpRight,
    ControlFlowElseIfToken,
    ControlFlowElseToken,
    ControlFlowDoToken,
    ControlFlowGotoToken,
    ControlFlowEndToken,
    PropertyIdentifier,
    AmbiguousIdentifier,
    GotoLabel,
    assigners,
    Number
  }

  ControlFlowElseToken { "else" }

  ControlFlowElseIfToken { "elseif" }

  ControlFlowDoToken {
    "then" |
    "ithen" |
    "kthen"
  }

  ControlFlowGotoToken {
    "goto" |
    "igoto" |
    "kgoto"
  }

  ControlFlowEndToken {
    "endif" |
    "od" |
    "enduntil"
  }

}


// Keywords

kw<term> { @specialize[@name={term}]<AmbiguousIdentifier, term> }


commaSep<content> {
  content (!comma "," content?)*
}


@detectDelim
