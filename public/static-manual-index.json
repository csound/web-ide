[{"id":"y","short_desc":"Set seed for random numbers.","synopsis":["y [p1]"],"type":"scoregen","opname":"seed"},{"id":"x","short_desc":"Skip the rest of the current section.","synopsis":["x anything"],"type":"scoregen","opname":"x"},{"id":"v","short_desc":"Provides for locally variable time warping of score events.","synopsis":["v p1"],"type":"scoregen","opname":"v"},{"id":"t","short_desc":"Sets the tempo.","synopsis":["t p1 p2 p3 p4 ... (unlimited)"],"type":"scoregen","opname":"t"},{"id":"s","short_desc":"Marks the end of a section.","synopsis":["s [time]"],"type":"scoregen","opname":"s"},{"id":"rightbrace","short_desc":"Ends a non-sectional, nestable loop.","synopsis":["}"],"type":"scoregen","opname":"}"},{"id":"r","short_desc":"Starts a repeated section.","synopsis":["r p1 p2"],"type":"scoregen","opname":"r"},{"id":"q","short_desc":"This statement may be used to quiet an instrument.","synopsis":["q p1 p2 p3"],"type":"scoregen","opname":"q"},{"id":"n","short_desc":"Repeats a section.","synopsis":["n p1"],"type":"scoregen","opname":"n"},{"id":"m","short_desc":"Sets a named mark in the score.","synopsis":["m p1"],"type":"scoregen","opname":"m"},{"id":"leftbrace","short_desc":"Begins a non-sectional, nestable loop.","synopsis":["{ p1 p2"],"type":"scoregen","opname":"{"},{"id":"i","short_desc":"Makes an instrument active at a specific time and for a certain duration.","synopsis":["i p1 p2 p3 p4 ..."],"type":"scoregen","opname":"i"},{"id":"GENwave","short_desc":"Generates a compactly supported wavelet function.","synopsis":["f # time size \"wave\" fnsf seq rescale"],"type":"scoregen","opname":"GENwave"},{"id":"GENtanh","short_desc":"Generate a table with values on the tanh function.","synopsis":["f # time size \"tanh\" start end rescale"],"type":"scoregen","opname":"GENtanh"},{"id":"GENsone","short_desc":"Generate a table with values of the sone function.","synopsis":["f # time size \"sone\" start end equalpoint rescale"],"type":"scoregen","opname":"GENsone"},{"id":"GENquadbezier","short_desc":"Generate a table with values from a quadratic B\u00e9zier function.","synopsis":["f # time size \"quadbezier\" y1 cx1 cy1 x2 y2 [cx2 cy2 x3 y3 ...]"],"type":"scoregen","opname":"GENquadbezier"},{"id":"GENpadsynth","short_desc":"Generate a sample table using the padsynth algorithm.","synopsis":["f # score_time table_size \"padsynth\" fundamental_frequency partial_bandwidth partial_scale harmonic_stretch profile_shape profile_shape_parameter partial1_amplitude [partial2_amplitude ...]"],"type":"scoregen","opname":"GENpadsynth"},{"id":"GENfarey","short_desc":"Fills a table with the Farey Sequence Fn of the integer n.","synopsis":["f # time size \"farey\" fareynum mode"],"type":"scoregen","opname":"GENfarey"},{"id":"GENexp","short_desc":"Generate a table with values on the exp function.","synopsis":["f # time size \"exp\" start end rescale"],"type":"scoregen","opname":"GENexp"},{"id":"GEN53","short_desc":"Creates a linear-phase or minimum-phase impulse response table from a source table containing a frequency response or an impulse response.","synopsis":["f # time size 53 fsrc [mode fwin]"],"type":"scoregen","opname":"GEN53"},{"id":"GEN52","short_desc":"Creates an interleaved multichannel table from the specified source tables, in the format expected by the ftconv opcode.","synopsis":["f # time size 52 nchannels fsrc1 offset1 srcchnls1 [fsrc2 offset2 srcchnls2 ... fsrcN offsetN srcchnlsN]"],"type":"scoregen","opname":"GEN52"},{"id":"GEN51","short_desc":"This subroutine fills a table with a fully customized micro-tuning scale, in the manner of Csound opcodes cpstun, cpstuni and cpstmid.","synopsis":["f # time size -51 numgrades interval basefreq basekey tuningRatio1 tuningRatio2 .... tuningRationN"],"type":"scoregen","opname":"GEN51"},{"id":"GEN49","short_desc":"Transfers data from an MP3 soundfile into a function table.","synopsis":["f# time size 49 filcod skiptime format"],"type":"scoregen","opname":"GEN49"},{"id":"GEN44","short_desc":"Generates a stiffness (connection) matrix for use in scanu\/scanu2.","synopsis":["f # time size -44 \"filename\"","f # time size -44 num"],"type":"scoregen","opname":"GEN44"},{"id":"GEN43","short_desc":"Loads a PVOCEX file containing a PV analysis.","synopsis":["f # time size 43 filecod channel"],"type":"scoregen","opname":"GEN43"},{"id":"GEN42","short_desc":"Generates a random distribution of discrete ranges of values.","synopsis":["f # time size -42 min1 max1 prob1 min2 max2 prob2 min3 max3 prob3 ... minN maxN probN"],"type":"scoregen","opname":"GEN42"},{"id":"GEN41","short_desc":"Generates a random list of numerical pairs.","synopsis":["f # time size -41 value1 prob1 value2 prob2 value3 prob3 ... valueN probN "],"type":"scoregen","opname":"GEN41"},{"id":"GEN40","short_desc":"Generates a random distribution using a distribution histogram.","synopsis":["f # time size 40 shapetab"],"type":"scoregen","opname":"GEN40"},{"id":"GEN34","short_desc":"Generate composite waveforms by mixing simple sinusoids.","synopsis":["f # time size 34 src nh scl [fmode]"],"type":"scoregen","opname":"GEN34"},{"id":"GEN33","short_desc":"Generate composite waveforms by mixing simple sinusoids.","synopsis":["f # time size 33 src nh scl [fmode]"],"type":"scoregen","opname":"GEN33"},{"id":"GEN32","short_desc":"Mixes any waveform, resampled with either FFT or linear interpolation.","synopsis":["f # time size 32 srca pna stra phsa srcb pnb strb phsb ..."],"type":"scoregen","opname":"GEN32"},{"id":"GEN31","short_desc":"Mixes any waveform specified in an existing table.","synopsis":["f # time size 31 src pna stra phsa pnb strb phsb ..."],"type":"scoregen","opname":"GEN31"},{"id":"GEN30","short_desc":"Generates harmonic partials by analyzing an existing table.","synopsis":["f # time size 30 src minh maxh [ref_sr] [interp]"],"type":"scoregen","opname":"GEN30"},{"id":"GEN28","short_desc":"Reads a text file which contains a time-tagged trajectory.","synopsis":["f # time size 28 ifilcod"],"type":"scoregen","opname":"GEN28"},{"id":"GEN27","short_desc":"Construct functions from segments of straight lines in breakpoint fashion.","synopsis":["f # time size 27 x1 y1 x2 y2 x3 ..."],"type":"scoregen","opname":"GEN27"},{"id":"GEN25","short_desc":"Construct functions from segments of exponential curves in breakpoint fashion.","synopsis":["f # time size 25 x1 y1 x2 y2 x3 ..."],"type":"scoregen","opname":"GEN25"},{"id":"GEN24","short_desc":"Reads numeric values from another allocated function-table and rescales them.","synopsis":["f # time size -24 ftable min max"],"type":"scoregen","opname":"GEN24"},{"id":"GEN23","short_desc":"Reads numeric values from a text file.","synopsis":["f # time size -23 \"filename.txt\""],"type":"scoregen","opname":"GEN23"},{"id":"GEN22","short_desc":"Deprecated.","synopsis":[],"type":"scoregen","opname":"GEN22"},{"id":"GEN21","short_desc":"Generates tables of different random distributions.","synopsis":["f # time size 21 type level [arg1 [arg2]]"],"type":"scoregen","opname":"GEN21"},{"id":"GEN20","short_desc":"Generates functions of different windows.","synopsis":["f # time size 20 window max [opt]"],"type":"scoregen","opname":"GEN20"},{"id":"GEN19","short_desc":"Generate composite waveforms made up of weighted sums of simple sinusoids.","synopsis":["f # time size 19 pna stra phsa dcoa pnb strb phsb dcob ..."],"type":"scoregen","opname":"GEN19"},{"id":"GEN18","short_desc":"Writes composite waveforms made up of pre-existing waveforms.","synopsis":["f # time size 18 fna ampa starta finisha fnb ampb startb finishb ..."],"type":"scoregen","opname":"GEN18"},{"id":"GEN17","short_desc":"Creates a step function from given x-y pairs.","synopsis":["f # time size 17 x1 a x2 b x3 c ..."],"type":"scoregen","opname":"GEN17"},{"id":"GEN16","short_desc":"Creates a table from a starting value to an ending value.","synopsis":["f # time size 16 val1 dur1 type1 val2 [dur2 type2 val3 ... typeX valN]"],"type":"scoregen","opname":"GEN16"},{"id":"GEN15","short_desc":"Creates two tables of stored polynomial functions.","synopsis":["f # time size 15 xint xamp h0 phs0 h1 phs1 h2 phs2 ..."],"type":"scoregen","opname":"GEN15"},{"id":"GEN14","short_desc":"Stores a polynomial whose coefficients derive from Chebyshevs of the second kind.","synopsis":["f # time size 14 xint xamp h0 h1 h2 ..."],"type":"scoregen","opname":"GEN14"},{"id":"GEN13","short_desc":"Stores a polynomial whose coefficients derive from the Chebyshev polynomials of the first kind.","synopsis":["f # time size 13 xint xamp h0 h1 h2 ..."],"type":"scoregen","opname":"GEN13"},{"id":"GEN12","short_desc":"Generates the log of a modified Bessel function of the second kind.","synopsis":["f # time size 12 xint"],"type":"scoregen","opname":"GEN12"},{"id":"GEN11","short_desc":"Generates an additive set of cosine partials.","synopsis":["f # time size 11 nh [lh] [r]"],"type":"scoregen","opname":"GEN11"},{"id":"GEN10","short_desc":"Generate composite waveforms made up of weighted sums of simple sinusoids.","synopsis":["f # time size 10 str1 str2 str3 str4 ..."],"type":"scoregen","opname":"GEN10"},{"id":"GEN09","short_desc":"Generate composite waveforms made up of weighted sums of simple sinusoids.","synopsis":["f # time size 9 pna stra phsa pnb strb phsb ..."],"type":"scoregen","opname":"GEN09"},{"id":"GEN08","short_desc":"Generate a piecewise cubic spline curve.","synopsis":["f # time size 8 a n1 b n2 c n3 d ..."],"type":"scoregen","opname":"GEN08"},{"id":"GEN07","short_desc":"Constructs functions from segments of straight lines.","synopsis":["f # time size 7 a n1 b n2 c ..."],"type":"scoregen","opname":"GEN07"},{"id":"GEN06","short_desc":"Generates a function comprised of segments of cubic polynomials.","synopsis":["f # time size 6 a n1 b n2 c n3 d ..."],"type":"scoregen","opname":"GEN06"},{"id":"GEN05","short_desc":"Constructs functions from segments of exponential curves.","synopsis":["f # time size 5 a n1 b n2 c ..."],"type":"scoregen","opname":"GEN05"},{"id":"GEN04","short_desc":"Generates a normalizing function.","synopsis":["f # time size 4 source# sourcemode"],"type":"scoregen","opname":"GEN04"},{"id":"GEN03","short_desc":"Generates a stored function table by evaluating a polynomial.","synopsis":["f # time size 3 xval1 xval2 c0 c1 c2 ... cn"],"type":"scoregen","opname":"GEN03"},{"id":"GEN02","short_desc":"Transfers data from immediate pfields into a function table.","synopsis":["f # time size 2 v1 v2 v3 ..."],"type":"scoregen","opname":"GEN02"},{"id":"GEN01","short_desc":"Transfers data from a soundfile into a function table.","synopsis":["f# time size 1 filcod skiptime format channel"],"type":"scoregen","opname":"GEN01"},{"id":"f","short_desc":"Causes a GEN subroutine to place values in a stored function table.","synopsis":["f p1 p2 p3 p4 p5 ... PMAX"],"type":"scoregen","opname":"f"},{"id":"e","short_desc":"This statement may be used to mark the end of the last section of the score.","synopsis":["e [0 time]"],"type":"scoregen","opname":"e"},{"id":"d","short_desc":"removes an active instrument at a specific time.","synopsis":["i p1 p2 p3 p4"],"type":"scoregen","opname":"d"},{"id":"capB","short_desc":"This statement adjusts the clock.","synopsis":["B p1"],"type":"scoregen","opname":"B"},{"id":"b","short_desc":"This statement resets the clock.","synopsis":["b p1"],"type":"scoregen","opname":"b"},{"id":"a","short_desc":"Advance score time by a specified amount.","synopsis":["a p1 p2 p3"],"type":"scoregen","opname":"a"},{"id":"C","short_desc":"This statement switches automatic carrying of arguments on or off.","synopsis":["C p1"],"type":"scoregen","opname":"C"},{"id":"Zerodbfs","short_desc":"Sets the value of 0 decibels using full scale amplitude.","synopsis":["0dbfs = iarg","0dbfs "],"type":"opcode","opname":"0dbfs"},{"id":"A4","short_desc":"Sets the base frequency for pitch A4.","synopsis":["A4 = iarg"],"type":"opcode","opname":"A4"},{"id":"ATSadd","short_desc":"uses the data from an ATS analysis file to perform additive synthesis.","synopsis":["ar ATSadd ktimepnt, kfmod, iatsfile, ifn, ipartials[, ipartialoffset, ipartialincr, igatefn]"],"type":"opcode","opname":"ATSadd"},{"id":"ATSaddnz","short_desc":"uses the data from an ATS analysis file to perform noise resynthesis.","synopsis":["ar ATSaddnz ktimepnt, iatsfile, ibands[, ibandoffset, ibandincr]"],"type":"opcode","opname":"ATSaddnz"},{"id":"ATSbufread","short_desc":"reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.","synopsis":["ATSbufread ktimepnt, kfmod, iatsfile, ipartials[, ipartialoffset, ipartialincr]"],"type":"opcode","opname":"ATSbufread"},{"id":"ATScross","short_desc":"perform cross synthesis from ATS analysis files.","synopsis":["ar ATScross ktimepnt, kfmod, iatsfile, ifn, kmylev, kbuflev, ipartials [, ipartialoffset, ipartialincr]"],"type":"opcode","opname":"ATScross"},{"id":"ATSinfo","short_desc":"reads data out of the header of an ATS file.","synopsis":["idata ATSinfo iatsfile, ilocation"],"type":"opcode","opname":"ATSinfo"},{"id":"ATSinterpread","short_desc":"allows a user to determine the frequency envelope of any ATSbufread.","synopsis":["kamp ATSinterpread kfreq"],"type":"opcode","opname":"ATSinterpread"},{"id":"ATSpartialtap","short_desc":"returns a frequency, amplitude pair from an ATSbufread opcode.","synopsis":["kfrq, kamp ATSpartialtap ipartialnum"],"type":"opcode","opname":"ATSpartialtap"},{"id":"ATSread","short_desc":"reads data from an ATS file.","synopsis":["kfreq, kamp ATSread ktimepnt, iatsfile, ipartial"],"type":"opcode","opname":"ATSread"},{"id":"ATSreadnz","short_desc":"reads data from an ATS file.","synopsis":["kenergy ATSreadnz ktimepnt, iatsfile, iband"],"type":"opcode","opname":"ATSreadnz"},{"id":"ATSsinnoi","short_desc":"uses the data from an ATS analysis file to perform resynthesis.","synopsis":["ar ATSsinnoi ktimepnt, ksinlev, knzlev, kfmod, iatsfile, ipartials [, ipartialoffset, ipartialincr]"],"type":"opcode","opname":"ATSsinnoi"},{"id":"JackoAudioIn","short_desc":"Receives an audio signal from a Jack port.","synopsis":["asignal JackoAudioIn ScsoundPortName"],"type":"opcode","opname":"JackoAudioIn"},{"id":"JackoAudioInConnect","short_desc":"Creates an audio connection from a Jack port to Csound.","synopsis":["JackoAudioInConnect SexternalPortName, ScsoundPortName"],"type":"opcode","opname":"JackoAudioInConnect"},{"id":"JackoAudioOut","short_desc":"Sends an audio signal to a Jack port.","synopsis":["JackoAudioOut ScsoundPortName, asignal"],"type":"opcode","opname":"JackoAudioOut"},{"id":"JackoAudioOutConnect","short_desc":"Creates an audio connection from Csound to a Jack port.","synopsis":["JackoAudioOutConnect ScsoundPortName, SexternalPortName"],"type":"opcode","opname":"JackoAudioOutConnect"},{"id":"JackoFreewheel","short_desc":"Turns Jack\\'s freewheeling mode on or off.","synopsis":["JackoFreewheel [ienabled]"],"type":"opcode","opname":"JackoFreewheel"},{"id":"JackoInfo","short_desc":"Prints information about the Jack system.","synopsis":["JackoInfo "],"type":"opcode","opname":"JackoInfo"},{"id":"JackoInit","short_desc":"Initializes Csound as a Jack client.","synopsis":["JackoInit ServerName, SclientName"],"type":"opcode","opname":"JackoInit"},{"id":"JackoMidiInConnect","short_desc":"Creates a MIDI connection from a Jack port to Csound.","synopsis":["JackoMidiInConnect SexternalPortName, ScsoundPortName"],"type":"opcode","opname":"JackoMidiInConnect"},{"id":"JackoMidiOut","short_desc":"Sends a MIDI channel message to a Jack port.","synopsis":["JackoMidiOut ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]"],"type":"opcode","opname":"JackoMidiOut"},{"id":"JackoMidiOutConnect","short_desc":"Creates a MIDI connection from Csound to a Jack port.","synopsis":["JackoMidiOutConnect ScsoundPortName, SexternalPortName"],"type":"opcode","opname":"JackoMidiOutConnect"},{"id":"JackoNoteOut","short_desc":"Sends a MIDI channel message to a Jack port.","synopsis":["JackoNoteOut ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]"],"type":"opcode","opname":"JackoNoteOut"},{"id":"JackoOn","short_desc":"Enables or disables all Jack ports.","synopsis":["JackoOn [iactive] "],"type":"opcode","opname":"JackoOn"},{"id":"JackoTransport","short_desc":"Control the Jack transport.","synopsis":["JackoTransport kcommand, [kposition]"],"type":"opcode","opname":"JackoTransport"},{"id":"link_beat_force","short_desc":"Forces the global network Ableton Link session to adopt a specific beat number and time.","synopsis":["link_beat_force i_peer, k_beat [, k_at_time_seconds [, k_quantum ]] "],"type":"opcode","opname":"link_beat_force"},{"id":"link_beat_get","short_desc":"Returns the beat, phase with respect to the local quantum, and current time for the session.","synopsis":["k_beat_number, k_phase, k_current_time_seconds link_beat_get i_peer [, k_quantum]"],"type":"opcode","opname":"link_beat_get"},{"id":"link_beat_request","short_desc":"Requests the global network Ableton Link session to adopt a specific beat number and time.","synopsis":["link_beat_request i_peer, k_beat [, k_at_time_seconds [, k_quantum ]] "],"type":"opcode","opname":"link_beat_get"},{"id":"link_create","short_desc":"Creates a peer in an Ableton Link network session.","synopsis":["i_peer link_create [i_bpm]"],"type":"opcode","opname":"link_beat_get"},{"id":"link_enable","short_desc":"Enable or disable synchronization with the Ableton Link session.","synopsis":[" ableton_link_enable i_peer [, k_enable]"],"type":"opcode","opname":"link_enable"},{"id":"link_is_enabled","short_desc":"Returns whether or not this peer is synchronized with the global network Ableton Link session.","synopsis":["k_is_enabled link_is_enabled i_peer"],"type":"opcode","opname":"link_is_enabled"},{"id":"link_peers","short_desc":"Returns the number of peers in the session.","synopsis":["k_count link_peers i_peer"],"type":"opcode","opname":"link_peers"},{"id":"link_tempo_get","short_desc":"Returns the current tempo of the global network Ableton Link session.","synopsis":["k_bpm link_tempo_get i_peer"],"type":"opcode","opname":"link_tempo_get"},{"id":"link_tempo_set","short_desc":"Sets the tempo.","synopsis":["link_tempo_set i_peer, k_bpm [, k_at_time_seconds]"],"type":"opcode","opname":"link_tempo_set"},{"id":"OSCbundle","short_desc":"Sends data to other processes using the OSC protocol by packing messages in a bundle.","synopsis":["OSCbundle kwhen, ihost, iport, Sdest[], Stype[],kArgs[][][,isize]"],"type":"opcode","opname":"OSCbundle"},{"id":"OSCcount","short_desc":"Gives the Count of OSC messages currently unread.","synopsis":["kans OSCcount"],"type":"opcode","opname":"OSCcount"},{"id":"OSCinit","short_desc":"Start a listening process for OSC messages to a particular port.","synopsis":["ihandle OSCinit iport"],"type":"opcode","opname":"OSCinit"},{"id":"OSCinitM","short_desc":"Start a listening process for multicast OSC messages to a particular port.","synopsis":["ihandle OSCinitM Sgroup, iport"],"type":"opcode","opname":"OSCinitM"},{"id":"OSClisten","short_desc":"Listen for OSC messages to a particular path.","synopsis":["kans OSClisten ihandle, idest, itype [, xdata1, xdata2, ...]","kans, kdata[] OSClisten ihandle, idest, itype"],"type":"opcode","opname":"OSClisten"},{"id":"OSCraw","short_desc":"Listen for all OSC messages at a given port.","synopsis":["Smess[],klen OSCraw iport"],"type":"opcode","opname":"OSCraw"},{"id":"OSCsend","short_desc":"Sends data to other processes using the OSC protocol","synopsis":["OSCsend kwhen, ihost, iport, idestination[, itype , xdata1, xdata2, ...]"],"type":"opcode","opname":"OSCsend"},{"id":"STKBandedWG","short_desc":"STKBandedWG uses banded waveguide techniques to model a variety of sounds.","synopsis":["asignal STKBandedWG ifrequency, iamplitude, [kpress, kv1[, kmot, kv2[, klfo, kv3[, klfodepth, kv4[, kvel, kv5[, kstrk, kv6[, kinstr, kv7]]]]]]]"],"type":"opcode","opname":"STKBandedWG"},{"id":"STKBeeThree","short_desc":"STK Hammond-oid organ-like FM synthesis instrument.","synopsis":["asignal STKBeeThree ifrequency, iamplitude, [kop4, kv1[, kop3, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKBeeThree"},{"id":"STKBlowBotl","short_desc":"STKBlowBotl uses a helmholtz resonator (biquad filter) with a polynomial jet excitation.","synopsis":["asignal STKBlowBotl ifrequency, iamplitude, [knoise, kv1[, klfo, kv2[, klfodepth, kv3[, kvol, kv4]]]]"],"type":"opcode","opname":"STKBlowBotl"},{"id":"STKBlowHole","short_desc":"STK clarinet physical model with one register hole and one tonehole.","synopsis":["asignal STKBlowHole ifrequency, iamplitude, [kreed, kv1[, knoise, kv2[, khole, kv3[, kreg, kv4[, kbreath, kv5]]]]]"],"type":"opcode","opname":"STKBlowHole"},{"id":"STKBowed","short_desc":"STKBowed is a bowed string instrument.","synopsis":["asignal STKBowed ifrequency, iamplitude, [kpress, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]"],"type":"opcode","opname":"STKBowed"},{"id":"STKBrass","short_desc":"STKBrass is a simple brass instrument.","synopsis":["asignal STKBrass ifrequency, iamplitude, [klip, kv1[, kslide, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]"],"type":"opcode","opname":"STKBrass"},{"id":"STKClarinet","short_desc":"STKClarinet uses a simple clarinet physical model.","synopsis":["asignal STKClarinet ifrequency, iamplitude, [kstiff, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]"],"type":"opcode","opname":"STKClarinet"},{"id":"STKDrummer","short_desc":"STKDrummer is a drum sampling synthesizer.","synopsis":["asignal STKDrummer ifrequency, iamplitude"],"type":"opcode","opname":"STKDrummer"},{"id":"STKFMVoices","short_desc":"STKFMVoices is a singing FM synthesis instrument.","synopsis":["asignal STKFMVoices ifrequency, iamplitude, [kvowel, kv1[, kspec, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKFMVoices"},{"id":"STKFlute","short_desc":"STKFlute uses a simple flute physical model.","synopsis":["asignal STKFlute ifrequency, iamplitude, [kjet, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]"],"type":"opcode","opname":"STKFlute"},{"id":"STKHevyMetl","short_desc":"STKHevyMetl produces metal sounds.","synopsis":["asignal STKHevyMetl ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKHevyMetl"},{"id":"STKMandolin","short_desc":"STKMandolin produces mamdolin-like sounds.","synopsis":["asignal STKMandolin ifrequency, iamplitude, [kbody, kv1[, kpos, kv2[, ksus, kv3[, kdetune, kv4[, kmic, kv5]]]]]"],"type":"opcode","opname":"STKMandolin"},{"id":"STKModalBar","short_desc":"STKModalBar is a resonant bar instrument.","synopsis":["asignal STKModalBar ifrequency, iamplitude, [khard, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kmix, kv5[, kvol, kv6[, kinstr, kv7]]]]]]]"],"type":"opcode","opname":"STKModalBar"},{"id":"STKMoog","short_desc":"STKMoog produces moog-like swept filter sounds.","synopsis":["asignal STKMoog ifrequency, iamplitude, [kq, kv1[, krate, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]"],"type":"opcode","opname":"STKMoog"},{"id":"STKPercFlut","short_desc":"STKPercFlut is a percussive flute FM synthesis instrument.","synopsis":["asignal STKPercFlut ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKPercFlut"},{"id":"STKPlucked","short_desc":"STKPlucked uses a plucked string physical model.","synopsis":["asignal STKPlucked ifrequency, iamplitude"],"type":"opcode","opname":"STKPlucked"},{"id":"STKResonate","short_desc":"STKResonate is a noise driven formant filter.","synopsis":["asignal STKResonate ifrequency, iamplitude, [kfreq, kv1[, kpole, kv2[, knotch, kv3[, kzero, kv4[, kenv, kv5]]]]]"],"type":"opcode","opname":"STKResonate"},{"id":"STKRhodey","short_desc":"STK Fender Rhodes-like electric piano FM synthesis instrument.","synopsis":["asignal STKRhodey ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKRhodey"},{"id":"STKSaxofony","short_desc":"STKSaxofony is a faux conical bore reed instrument.","synopsis":["asignal STKSaxofony ifrequency, iamplitude, [kstiff, kv1[, kapert, kv2[, kblow, kv3[, knoise, kv4[, klfo, kv5[, klfodepth, kv6[, kbreath, kv7]]]]]]]"],"type":"opcode","opname":"STKSaxofony"},{"id":"STKShakers","short_desc":"STKShakers is an instrument that simulates environmental sounds or collisions of multiple independent sound producing objects.","synopsis":["asignal STKShakers ifrequency, iamplitude, [kenerg, kv1[, kdecay, kv2[, kshake, kv3[, knum, kv4[, kres, kv5[, kinstr, kv6]]]]]]"],"type":"opcode","opname":"STKShakers"},{"id":"STKSimple","short_desc":"STKSimple is a wavetable\/noise instrument.","synopsis":["asignal STKSimple ifrequency, iamplitude, [kpos, kv1[, kcross, kv2[, kenv, kv3[, kgain, kv4]]]]"],"type":"opcode","opname":"STKSimple"},{"id":"STKSitar","short_desc":"STKSitar uses a plucked string physical model.","synopsis":["asignal STKSitar ifrequency, iamplitude"],"type":"opcode","opname":"STKSitar"},{"id":"STKStifKarp","short_desc":"STKStifKarp is a plucked stiff string instrument.","synopsis":["asignal STKStifKarp ifrequency, iamplitude, [kpos, kv1[, ksus, kv2[, kstretch, kv3]]]"],"type":"opcode","opname":"STKStifKarp"},{"id":"STKTubeBell","short_desc":"STKTubeBell is a tubular bell (orchestral chime) FM synthesis instrument.","synopsis":["asignal STKTubeBell ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKTubeBell"},{"id":"STKVoicForm","short_desc":"STKVoicForm is a four formant synthesis instrument.","synopsis":["asignal STKVoicForm ifrequency, iamplitude, [kmix, kv1[, ksel, kv2[, klfo, kv3[, klfodepth, kv4[, kloud, kv5]]]]]"],"type":"opcode","opname":"STKVoicForm"},{"id":"STKWhistle","short_desc":"STKWhistle produces whistle sounds.","synopsis":["asignal STKWhistle ifrequency, iamplitude, [kmod, kv1[, knoise, kv2[, kfipfreq, kv3[, kfipgain, kv4[, kvol, kv5]]]]]"],"type":"opcode","opname":"STKWhistle"},{"id":"STKWurley","short_desc":"STKWurley simulates a Wurlitzer electric piano FM synthesis instrument.","synopsis":["asignal STKWurley ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]"],"type":"opcode","opname":"STKWurley"},{"id":"abetarand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"abetarand"},{"id":"abexprnd","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"abexprnd"},{"id":"abs","short_desc":"Returns an absolute value.","synopsis":["abs(x) (no rate restriction)","abs(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"abs"},{"id":"acauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"acauchy"},{"id":"active","short_desc":"Returns the number of active instances of an instrument.","synopsis":["ir active insnum [,iopt [,inorel]]","ir active Sinsname [,iopt [,inorel]]","kres active kinsnum [,iopt [,inorel]]"],"type":"opcode","opname":"active"},{"id":"adds","short_desc":"Addition operator","synopsis":["+a (no rate restriction)","a + b (no rate restriction)"],"type":"opcode","opname":"+"},{"id":"adsr","short_desc":"Calculates the classical ADSR envelope using linear segments.","synopsis":["ares adsr iatt, idec, islev, irel [, idel]","kres adsr iatt, idec, islev, irel [, idel]"],"type":"opcode","opname":"adsr"},{"id":"adsyn","short_desc":"Output is an additive set of individually controlled sinusoids, using an oscillator bank.","synopsis":["ares adsyn kamod, kfmod, ksmod, ifilcod"],"type":"opcode","opname":"adsyn"},{"id":"adsynt","short_desc":"Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic.","synopsis":["ares adsynt kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]"],"type":"opcode","opname":"adsynt"},{"id":"adsynt2","short_desc":"Performs additive synthesis with an arbitrary number of partials -not necessarily harmonic- with interpolation.","synopsis":["ar adsynt2 kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]"],"type":"opcode","opname":"adsynt2"},{"id":"aexprand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"aexprand"},{"id":"aftouch","short_desc":"Get the current after-touch value for this channel.","synopsis":["kaft aftouch [imin] [, imax]"],"type":"opcode","opname":"aftouch"},{"id":"agauss","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"agauss"},{"id":"agogobel","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"agogobel"},{"id":"alinrand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"alinrand"},{"id":"allpole","short_desc":"Allpole filter implementation using direct convolution.","synopsis":["ares allpole asig, kCoef[]"],"type":"opcode","opname":"allpole"},{"id":"alpass","short_desc":"Reverberates an input signal with a flat frequency response.","synopsis":["ares alpass asig, xrvt, ilpt [, iskip] [, insmps]"],"type":"opcode","opname":"alpass"},{"id":"alwayson","short_desc":"Activates the indicated instrument in the orchestra header, without need for an i statement.","synopsis":[" alwayson Tinstrument [p4, ..., pn]"],"type":"opcode","opname":"alwayson"},{"id":"ampdb","short_desc":"Returns the amplitude equivalent of the decibel value x.","synopsis":["ampdb(x) (no rate restriction)"],"type":"opcode","opname":"ampdb"},{"id":"ampdbfs","short_desc":"Returns the amplitude equivalent (in 16-bit signed integer scale) of the full scale decibel (dB FS) value x.","synopsis":["ampdbfs(x) (no rate restriction)"],"type":"opcode","opname":"ampdbfs"},{"id":"ampmidi","short_desc":"Get the velocity of the current MIDI event.","synopsis":["iamp ampmidi iscal [, ifn]"],"type":"opcode","opname":"ampmidi"},{"id":"ampmidicurve","short_desc":"Maps an input MIDI velocity number to an output gain factor with a maximum value of 1, modifying the output gain by a dynamic range and a shaping exponent.","synopsis":["igain ampmidicurve ivelocity, idynamicrange, iexponent","kgain ampmidicurve kvelocity, kdynamicrange, kexponent"],"type":"opcode","opname":"ampmidicurve"},{"id":"ampmidid","short_desc":"Musically map MIDI velocity to peak amplitude within a specified dynamic range in decibels.","synopsis":["iamplitude ampmidid ivelocity, idecibels","kamplitude ampmidid kvelocity, idecibels"],"type":"opcode","opname":"ampmidid"},{"id":"apcauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"apcauchy"},{"id":"apoisson","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"apoisson"},{"id":"apoleparams","short_desc":"Extracts allpole filter parameters from coefficients.","synopsis":["kPar[]apoleparams kCoef[] "],"type":"opcode","opname":"apoleparams"},{"id":"apow","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"apow"},{"id":"arduinoRead","short_desc":"Read data from an arduino port using the Csound-Arduino protocol.","synopsis":["kval arduinoRead iPort, iStream[, iSmooth]"],"type":"opcode","opname":"arduinoRead"},{"id":"arduinoReadF","short_desc":"Read data from an arduino port using the Csound-Arduino protocol.","synopsis":["kval arduinoReadF iPort, iStream1, iStream2, iStream3"],"type":"opcode","opname":"arduinoReadF"},{"id":"arduinoStart","short_desc":"Open a serial port for use with the Arduino protocol.","synopsis":["iPort arduinoStart SPortName [, ibaudRate]"],"type":"opcode","opname":"arduinoStart"},{"id":"arduinoStop","short_desc":"Close a serial port using Arduino protocol.","synopsis":[" arduinoStop iPort"],"type":"opcode","opname":"arduinoStop"},{"id":"areson","short_desc":"A notch filter whose transfer functions are the complements of the reson opcode.","synopsis":["ares areson asig, kcf, kbw [, iscl] [, iskip]","ares areson asig, acf, kbw [, iscl] [, iskip]","ares areson asig, kcf, abw [, iscl] [, iskip]","ares areson asig, acf, abw [, iscl] [, iskip]"],"type":"opcode","opname":"areson"},{"id":"aresonk","short_desc":"A notch filter whose transfer functions are the complements of the reson opcode.","synopsis":["kres aresonk ksig, kcf, kbw [, iscl] [, iskip]"],"type":"opcode","opname":"aresonk"},{"id":"array","short_desc":"Deprecated.","synopsis":["karray[] array ival1, ival2,.....ivaln"],"type":"opcode","opname":"array"},{"id":"assign","short_desc":"Performs a simple assignment.","synopsis":["ares = xarg","ires = iarg","kres = karg","ires, ... = iarg, ...","kres, ... = karg, ...","table [ kval] = karg"],"type":"opcode","opname":"="},{"id":"atone","short_desc":"A hi-pass filter whose transfer functions are the complements of the tone opcode.","synopsis":["ares atone asig, khp [, iskip]"],"type":"opcode","opname":"atone"},{"id":"atonek","short_desc":"A hi-pass filter whose transfer functions are the complements of the tonek opcode.","synopsis":["kres atonek ksig, khp [, iskip]"],"type":"opcode","opname":"atonek"},{"id":"atonex","short_desc":"Emulates a stack of filters using the atone opcode.","synopsis":["ares atonex asig, khp [, inumlayer] [, iskip]","ares atonex asig, ahp [, inumlayer] [, iskip]"],"type":"opcode","opname":"atonex"},{"id":"atrirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"atrirand"},{"id":"aunirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"aunirand"},{"id":"autocorr","short_desc":"Autocorrelation of a sequence.","synopsis":["kout[] autocorr kin[]"],"type":"opcode","opname":"autocorr"},{"id":"aweibull","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"aweibull"},{"id":"babo","short_desc":"A physical model reverberator.","synopsis":["a1, a2 babo asig, ksrcx, ksrcy, ksrcz, irx, iry, irz [, idiff] [, ifno]"],"type":"opcode","opname":"babo"},{"id":"balance","short_desc":"Adjust one audio signal according to the values of another.","synopsis":["ares balance asig, acomp [, ihp] [, iskip]"],"type":"opcode","opname":"balance"},{"id":"balance2","short_desc":"Adjust one audio signal according to the values of another.","synopsis":["ares balance2 asig, acomp [, ihp] [, iskip]"],"type":"opcode","opname":"balance2"},{"id":"bamboo","short_desc":"Semi-physical model of a bamboo sound.","synopsis":["ares bamboo kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]"],"type":"opcode","opname":"bamboo"},{"id":"barmodel","short_desc":"Creates a tone similar to a struck metal bar.","synopsis":["ares barmodel kbcL, kbcR, iK, ib, kscan, iT30, ipos, ivel, iwid"],"type":"opcode","opname":"barmodel"},{"id":"bbcutm","short_desc":"Generates breakbeat-style cut-ups of a mono audio stream.","synopsis":["a1 bbcutm asource, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice ]"],"type":"opcode","opname":"bbcutm"},{"id":"bbcuts","short_desc":"Generates breakbeat-style cut-ups of a stereo audio stream.","synopsis":["a1,a2 bbcuts asource1, asource2, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice]"],"type":"opcode","opname":"bbcuts"},{"id":"betarand","short_desc":"Beta distribution random number generator (positive values only).","synopsis":["ares betarand krange, kalpha, kbeta","ires betarand krange, kalpha, kbeta","kres betarand krange, kalpha, kbeta"],"type":"opcode","opname":"betarand"},{"id":"bexprnd","short_desc":"Exponential distribution random number generator.","synopsis":["ares bexprnd krange","ires bexprnd krange","kres bexprnd krange"],"type":"opcode","opname":"bexprnd"},{"id":"bformdec","short_desc":"Deprecated. Decodes an ambisonic B format signal.","synopsis":["ao1, ao2 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4, ao5 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 bformdec isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]"],"type":"opcode","opname":"bformdec"},{"id":"bformdec1","short_desc":"Decodes an ambisonic B format signal","synopsis":["ao1, ao2 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4, ao5 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]","ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 bformdec1 isetup, aw, ax, ay, az [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]","aout[] bformdec1 isetup, abform[]"],"type":"opcode","opname":"bformdec1"},{"id":"bformdec2","short_desc":"Decodes an Ambisonics B format signal.","synopsis":["aout[] bformdec2 isetup, abform[], [idecoder, idistance, ifreq, imix, ifilel, ifiler]"],"type":"opcode","opname":"bformdec2"},{"id":"bformenc","short_desc":"Deprecated. Codes a signal into the ambisonic B format.","synopsis":["aw, ax, ay, az bformenc asig, kalpha, kbeta, kord0, kord1","aw, ax, ay, az, ar, as, at, au, av bformenc asig, kalpha, kbeta, kord0, kord1 , kord2","aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq bformenc asig, kalpha, kbeta, kord0, kord1, kord2, kord3"],"type":"opcode","opname":"bformenc"},{"id":"bformenc1","short_desc":"Codes a signal into the ambisonic B format.","synopsis":["aw, ax, ay, az bformenc1 asig, kalpha, kbeta","aw, ax, ay, az, ar, as, at, au, av bformenc1 asig, kalpha, kbeta","aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq bformenc1 asig, kalpha, kbeta","aarray[] bformenc1 asig, kalpha, kbeta"],"type":"opcode","opname":"bformenc1"},{"id":"binit","short_desc":"PVS tracks to amplitude+frequency conversion.","synopsis":["fsig binit fin, isize"],"type":"opcode","opname":"binit"},{"id":"biquad","short_desc":"A sweepable general purpose biquadratic digital filter.","synopsis":["ares biquad asig, kb0, kb1, kb2, ka0, ka1, ka2 [, iskip]"],"type":"opcode","opname":"biquad"},{"id":"biquada","short_desc":"A sweepable general purpose biquadratic digital filter with a-rate parameters.","synopsis":["ares biquada asig, ab0, ab1, ab2, aa0, aa1, aa2 [, iskip]"],"type":"opcode","opname":"biquada"},{"id":"birnd","short_desc":"Returns a random number in a bi-polar range.","synopsis":["birnd(x) (init- or control-rate only)"],"type":"opcode","opname":"birnd"},{"id":"bob","short_desc":"Runge-Kutte numerical simulation of the Moog analog resonant filter.","synopsis":["asig bob ain, xcf, xres, xsat [, iosamps, istor]"],"type":"opcode","opname":"bob"},{"id":"bpf","short_desc":"Break point function with linear interpolation","synopsis":["ky bpf kx, kx1, ky1, kx2, ..., kxn, kyn","iy bpf ix, ix1, iy1, ix2, ..., ixn, iyn","kys[] bpf kxs[], kx1, ky1, kx2, ..., kxn, kyn","iys[] bpf ixs[], ix1, iy1, ix2, ..., ixn, iyn","ky bpf kx, kxs[], kys[]","iy bpf ix, ixs[], iys[]","ay bpf ax, kx1, ky1, kx2, ..., kxn, kyn","ay bpf ax, kxs[], kys[]","ky, kw bpf kx, kxs[], kys[], kws[]"],"type":"opcode","opname":"bpf"},{"id":"bpfcos","short_desc":"Break point function with cosine (easy-in\/easy-out) interpolation","synopsis":["ky bpfcos kx, kx1, ky1, kx2, ..., kxn, kyn","kys[] bpfcos kxs[], kx1, ky1, kx2, ..., kxn, kyn","ky bpfcos kx, kxs[], kys[]","ky bpfcos kx, ixs[], iys[]","ky, kz bpfcos kx, kxs[], kys[], kzs[] ","ky, kz bpfcos kx, ixs[], iys[], izs[] ","kys[] bpfcos kxs[], kx1, ky1, kx2, ..., kxn, kyn","ky bpfcos kx, ixs[], iys[]","ky, kz bpfcos kx, kxs[], kys[], kzs[] "],"type":"opcode","opname":"bpfcos"},{"id":"bqrez","short_desc":"A second-order multi-mode filter.","synopsis":["ares bqrez asig, xfco, xres [, imode] [, iskip]"],"type":"opcode","opname":"bqrez"},{"id":"butbp","short_desc":"Same as the butterbp opcode.","synopsis":["ares butbp asig, kfreq, kband [, iskip]"],"type":"opcode","opname":"butbp"},{"id":"butbr","short_desc":"Same as the butterbr opcode.","synopsis":["ares butbr asig, kfreq, kband [, iskip]"],"type":"opcode","opname":"butbr"},{"id":"buthp","short_desc":"Same as the butterhp opcode.","synopsis":["ares buthp asig, kfreq [, iskip]","ares buthp asig, afreq [, iskip]"],"type":"opcode","opname":"buthp"},{"id":"butlp","short_desc":"Same as the butterlp opcode.","synopsis":["ares butlp asig, kfreq [, iskip]","ares butlp asig, afreq [, iskip]"],"type":"opcode","opname":"butlp"},{"id":"butterbp","short_desc":"A band-pass Butterworth filter.","synopsis":["ares butterbp asig, xfreq, xband [, iskip]"],"type":"opcode","opname":"butterbp"},{"id":"butterbr","short_desc":"A band-reject Butterworth filter.","synopsis":["ares butterbr asig, xfreq, xband [, iskip]"],"type":"opcode","opname":"butterbr"},{"id":"butterhp","short_desc":"A high-pass Butterworth filter.","synopsis":["ares butterhp asig, kfreq [, iskip]","ares butterhp asig, afreq [, iskip]"],"type":"opcode","opname":"butterhp"},{"id":"butterlp","short_desc":"A low-pass Butterworth filter.","synopsis":["ares butterlp asig, kfreq [, iskip]","ares butterlp asig, afreq [, iskip]"],"type":"opcode","opname":"butterlp"},{"id":"button","short_desc":"Sense on-screen controls.","synopsis":["kres button knum"],"type":"opcode","opname":"button"},{"id":"buzz","short_desc":"Output is a set of harmonically related sine partials.","synopsis":["ares buzz xamp, xcps, knh, ifn [, iphs]"],"type":"opcode","opname":"buzz"},{"id":"c2r","short_desc":"Real to complex format conversion.","synopsis":["kout[] c2r kin[]"],"type":"opcode","opname":"c2r"},{"id":"cabasa","short_desc":"Semi-physical model of a cabasa sound.","synopsis":["ares cabasa iamp, idettack [, inum] [, idamp] [, imaxshake]"],"type":"opcode","opname":"cabasa"},{"id":"cauchy","short_desc":"Cauchy distribution random number generator.","synopsis":["ares cauchy kalpha","ires cauchy kalpha","kres cauchy kalpha"],"type":"opcode","opname":"cauchy"},{"id":"cauchyi","short_desc":"Cauchy distribution random number generator with interpolation.","synopsis":["ares cauchyi klambda, xamp, xcps","ires cauchyi klambda, xamp, xcps","kres cauchyi klambda, xamp, xcps"],"type":"opcode","opname":"cauchyi"},{"id":"cbrt","short_desc":"Cubic root function.","synopsis":["ires[] cbrt iarg","kres[] cbrt karg"],"type":"opcode","opname":"cbrt"},{"id":"ceil","short_desc":"Returns the smallest integer not less than x","synopsis":["ceil(x) (init-, control-, or audio-rate arg allowed)","ceil(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"ceil"},{"id":"cell","short_desc":"Cellular Automaton","synopsis":["cell ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements"],"type":"opcode","opname":"cell"},{"id":"cent","short_desc":"Calculates a factor to raise\/lower a frequency by a given amount of cents.","synopsis":["cent(x) "],"type":"opcode","opname":"cent"},{"id":"centroid","short_desc":"Calculate the spectral centroid of a signal.","synopsis":["kcent centroid asig, ktrig, ifftsize"],"type":"opcode","opname":"centroid"},{"id":"ceps","short_desc":"Calculate the cepstrum of an array input, optionally filtering coefficients.","synopsis":["keps[] ceps kmags[][, icoefs]"],"type":"opcode","opname":"ceps"},{"id":"cepsinv","short_desc":"Calculate the inverse cepstrum of an array.","synopsis":["kenv cepsinv keps[]"],"type":"opcode","opname":"cepsinv"},{"id":"cggoto","short_desc":"Conditionally transfer control on every pass.","synopsis":["cggoto condition, label"],"type":"opcode","opname":"cggoto"},{"id":"chanctrl","short_desc":"Get the current value of a MIDI channel controller.","synopsis":["ival chanctrl ichnl, ictlno [, ilow] [, ihigh]","kval chanctrl ichnl, ictlno [, ilow] [, ihigh]"],"type":"opcode","opname":"chanctrl"},{"id":"changed","short_desc":"k-rate signal change detector.","synopsis":["ktrig changed kvar1 [, kvar2,..., kvarN]"],"type":"opcode","opname":"changed"},{"id":"changed2","short_desc":"k-rate signal change detector.","synopsis":["ktrig changed2 kvar1 [, kvar2,..., kvarN]","ktrig changed2 karr[]","ktrig changed2 aarr[]"],"type":"opcode","opname":"changed2"},{"id":"chani","short_desc":"Reads data from the software bus","synopsis":["kval chani kchan","aval chani kchan"],"type":"opcode","opname":"chani"},{"id":"chano","short_desc":"Send data to the outwards software bus","synopsis":["chano kval, kchan","chano aval, kchan"],"type":"opcode","opname":"chano"},{"id":"chebyshevpoly","short_desc":"Efficiently evaluates the sum of Chebyshev polynomials of arbitrary order.","synopsis":["aout chebyshevpoly ain, k0 [, k1 [, k2 [...]]]"],"type":"opcode","opname":"chebyshevpoly"},{"id":"checkbox","short_desc":"Sense on-screen controls.","synopsis":["kres checkbox knum"],"type":"opcode","opname":"checkbox"},{"id":"chn","short_desc":"Declare a channel of the named software bus.","synopsis":[" chn_k Sname, imode[, itype, idflt, imin, ima, ix, iy, iwidth, iheight, Sattributes]"," chn_a Sname, imode"," chn_S Sname, imode"," chn_S Sname, Smode"],"type":"opcode","opname":"chn"},{"id":"chnclear","short_desc":"Clears a number of audio output channel of the named software bus.","synopsis":["chnclear Sname1[, Sname2,...]"],"type":"opcode","opname":"chnclear"},{"id":"chnexport","short_desc":"Export a global variable as a channel of the bus.","synopsis":["gival chnexport Sname, imode[, itype, idflt, imin, imax]","gkval chnexport Sname, imode[, itype, idflt, imin, imax]","gaval chnexport Sname, imode","gSval chnexport Sname, imode"],"type":"opcode","opname":"chnexport"},{"id":"chnget","short_desc":"Reads data from the software bus.","synopsis":["ival chnget Sname","kval chnget Sname","aval chnget Sname","Sval chnget Sname","Sval chngetks Sname","ival[] chngeti Sname[]","kval[] chngetk Sname[]","aval[] chngeta Sname[]","Sval[] chngets Sname[]"],"type":"opcode","opname":"chnget"},{"id":"chnmix","short_desc":"Writes audio data to the named software bus, mixing to the previous output.","synopsis":["chnmix aval, Sname"],"type":"opcode","opname":"chnmix"},{"id":"chnparams","short_desc":"Query parameters of a channel.","synopsis":["itype, imode, ictltype, idflt, imin, imax chnparams Sname"],"type":"opcode","opname":"chnparams"},{"id":"chnset","short_desc":"Writes data to the named software bus.","synopsis":["chnset ival, Sname","chnset kval, Sname","chnset aval, Sname","chnset Sval, Sname","chnsetks Sval, Sname","chnseti ival[], []Sname","chnsetk kval[], []Sname","chnseta aval[], []Sname","chnsets Sval[], []Sname"],"type":"opcode","opname":"chnset"},{"id":"chuap","short_desc":"Simulates Chua\\'s oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements.","synopsis":["aI3, aV2, aV1 chuap kL, kR0, kC2, kG, kGa, kGb, kE, kC1, iI3, iV2, iV1, ktime_step"],"type":"opcode","opname":"chuap"},{"id":"cigoto","short_desc":"Conditionally transfer control during the i-time pass.","synopsis":["cigoto condition, label"],"type":"opcode","opname":"cigoto"},{"id":"ckgoto","short_desc":"Conditionally transfer control during the p-time passes.","synopsis":["ckgoto condition, label"],"type":"opcode","opname":"ckgoto"},{"id":"clear","short_desc":"Zeroes a list of audio signals.","synopsis":["clear avar1 [, avar2] [, avar3] [...]","clear avar[]"],"type":"opcode","opname":"clear"},{"id":"clfilt","short_desc":"Implements low-pass and high-pass filters of different styles.","synopsis":["ares clfilt asig, kfreq, itype, inpol [, ikind] [, ipbr] [, isba] [, iskip]"],"type":"opcode","opname":"clfilt"},{"id":"clip","short_desc":"Clips a signal to a predefined limit.","synopsis":["ares clip asig, imeth, ilimit [, iarg]"],"type":"opcode","opname":"clip"},{"id":"clock","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"clock"},{"id":"clockoff","short_desc":"Stops one of a number of internal clocks.","synopsis":["clockoff inum"],"type":"opcode","opname":"clockoff"},{"id":"clockon","short_desc":"Starts one of a number of internal clocks.","synopsis":["clockon inum"],"type":"opcode","opname":"clockon"},{"id":"cmp","short_desc":"Compares audio signals or arrays","synopsis":["aout cmp a1, S_operator, a2","aout cmp a1, S_operator, kb","kOut[] cmp kA[], S_operator, kb","kOut[] cmp kA[], S_operator, kB[]","kOut[] cmp k1, S_operator1, kIn[], S_operator2, k2"],"type":"opcode","opname":"cmp"},{"id":"cmplxprod","short_desc":"Complex product of two arrays.","synopsis":["kout[] cmplxprod kin1[], kin2[]"],"type":"opcode","opname":"cmplxprod"},{"id":"cngoto","short_desc":"Transfers control on every pass when a condition is not true.","synopsis":["cngoto condition, label"],"type":"opcode","opname":"cngoto"},{"id":"cntDelete","short_desc":"Delete a counter.","synopsis":["kval cntDelete icnt"],"type":"opcode","opname":"cntDelete"},{"id":"cntDelete_i","short_desc":"Delete a counter.","synopsis":["ival cntDelete_i icnt"],"type":"opcode","opname":"cntDelete_i"},{"id":"cntCreate","short_desc":"Create a counter object.","synopsis":["icnt cntCreate [imax, imin, inc]"],"type":"opcode","opname":"cntCreate"},{"id":"cntCycles","short_desc":"Get the number of times a counter has cycled.","synopsis":["kval cntCycles icnt"],"type":"opcode","opname":"cntCycles"},{"id":"cntRead","short_desc":"Read current value of a counter object.","synopsis":["kval cntReadicnt"],"type":"opcode","opname":"cntRead"},{"id":"cntReset","short_desc":"Resets a counter object.","synopsis":["cntReseticnt"],"type":"opcode","opname":"cntReset"},{"id":"cntState","short_desc":"Gives the range and increment of a counter.","synopsis":["kmax, kmin, kinc cntStateicnt"],"type":"opcode","opname":"cntState"},{"id":"comb","short_desc":"Reverberates an input signal with a colored frequency response.","synopsis":["ares comb asig, krvt, ilpt [, iskip] [, insmps]"],"type":"opcode","opname":"comb"},{"id":"combinv","short_desc":"Reverberates an input signal with a colored frequency response.","synopsis":["ares combinv asig, krvt, ilpt [, iskip] [, insmps]"],"type":"opcode","opname":"combinv"},{"id":"compilecsd","short_desc":"compiles a new orchestra from an ASCII file","synopsis":["ires compilecsd Sfilename"],"type":"opcode","opname":"compilecsd"},{"id":"compileorc","short_desc":"compiles a new orchestra from an ASCII file","synopsis":["ires compileorc Sfilename"],"type":"opcode","opname":"compileorc"},{"id":"compilestr","short_desc":"compiles a new orchestra passed in as an ASCII string","synopsis":["ires compilestr Sorch"],"type":"opcode","opname":"compilestr"},{"id":"compress","short_desc":"Compress, limit, expand, duck or gate an audio signal.","synopsis":["ar compress aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook"],"type":"opcode","opname":"compress"},{"id":"compress2","short_desc":"Compress, limit, expand, duck or gate an audio signal.","synopsis":["ar compress2 aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook"],"type":"opcode","opname":"compress2"},{"id":"connect","short_desc":"Connects a source outlet to a sink inlet.","synopsis":["connect Tsource1, Soutlet1, Tsink1, Sinlet1"],"type":"opcode","opname":"connect"},{"id":"control","short_desc":"Configurable slider controls for realtime user input.","synopsis":["kres control knum"],"type":"opcode","opname":"control"},{"id":"convle","short_desc":"Same as the convolve opcode.","synopsis":[],"type":"opcode","opname":"convle"},{"id":"convolve","short_desc":"Convolves a signal and an impulse response.","synopsis":["ar1 [, ar2] [, ar3] [, ar4] convolve ain, ifilcod [, ichannel]"],"type":"opcode","opname":"convolve"},{"id":"copya2ftab","short_desc":"Copy data from a vector to an f-table.","synopsis":["copya2ftab kArray[], ktab [, koffset]","copya2ftab iArray[], itab [, ioffset]"],"type":"opcode","opname":"copya2ftab"},{"id":"copyf2array","short_desc":"Copy data from an f-table to a vector.","synopsis":["copyf2array tab, kftbl"],"type":"opcode","opname":"copyf2array"},{"id":"cos","short_desc":"Performs a cosine function.","synopsis":["cos(x) (no rate restriction)","cos(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"cos"},{"id":"cosh","short_desc":"Performs a hyperbolic cosine function.","synopsis":["cosh(x) (no rate restriction)","cosh(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"cosh"},{"id":"cosinv","short_desc":"Performs a arccosine function.","synopsis":["cosinv(x) (no rate restriction)","cosinv(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"cosinv"},{"id":"cosseg","short_desc":"Trace a series of line segments between specified points with cosine interpolation.","synopsis":["ares cosseg ia, idur1, ib [, idur2] [, ic] [...]","kres cosseg ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"cosseg"},{"id":"cossegb","short_desc":"Trace a series of line segments between specified absolute points with cosine interpolation.","synopsis":["ares cossegb ia, itim1, ib [, itim2] [, ic] [...]","kres cossegb ia, itim1, ib [, itim2] [, ic] [...]"],"type":"opcode","opname":"cossegb"},{"id":"cossegr","short_desc":"Trace a series of line segments between specified points with cosine interpolation, including a release segment.","synopsis":["ares cossegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz","kres cossegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz"],"type":"opcode","opname":"cossegr"},{"id":"count","short_desc":"Get the next value from a counter.","synopsis":["kval count icnt"],"type":"opcode","opname":"count"},{"id":"count_i","short_desc":"Get the next value from a counter.","synopsis":["ival count_i icnt"],"type":"opcode","opname":"count_i"},{"id":"cps2pch","short_desc":"Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave.","synopsis":["icps cps2pch ipch, iequal"],"type":"opcode","opname":"cps2pch"},{"id":"cpsmidi","short_desc":"Get the note number of the current MIDI event, expressed in cycles-per-second.","synopsis":["icps cpsmidi"],"type":"opcode","opname":"cpsmidi"},{"id":"cpsmidib","short_desc":"Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second.","synopsis":["icps cpsmidib [irange]","kcps cpsmidib [irange]"],"type":"opcode","opname":"cpsmidib"},{"id":"cpsmidinn","short_desc":"Converts a Midi note number value to cycles-per-second.","synopsis":["cpsmidinn (MidiNoteNumber) (init- or control-rate args only)"],"type":"opcode","opname":"cpsmidinn"},{"id":"cpsoct","short_desc":"Converts an octave-point-decimal value to cycles-per-second.","synopsis":["cpsoct (oct) (no rate restriction)"],"type":"opcode","opname":"cpsoct"},{"id":"cpspch","short_desc":"Converts a pitch-class value to cycles-per-second.","synopsis":["cpspch (pch) (init- or control-rate args only)"],"type":"opcode","opname":"cpspch"},{"id":"cpstmid","short_desc":"Get a MIDI note number (allows customized micro-tuning scales).","synopsis":["icps cpstmid ifn"],"type":"opcode","opname":"cpstmid"},{"id":"cpstun","short_desc":"Returns micro-tuning values at k-rate.","synopsis":["kcps cpstun ktrig, kindex, kfn"],"type":"opcode","opname":"cpstun"},{"id":"cpstuni","short_desc":"Returns micro-tuning values at init-rate.","synopsis":["icps cpstuni index, ifn"],"type":"opcode","opname":"cpstuni"},{"id":"cpsxpch","short_desc":"Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval.","synopsis":["icps cpsxpch ipch, iequal, irepeat, ibase"],"type":"opcode","opname":"cpsxpch"},{"id":"cpumeter","short_desc":"Reports the usage of cpu either total or per core.","synopsis":["ktot[,kcpu1, kcpu2,...]cpumeter ifreq"],"type":"opcode","opname":"cpumeter"},{"id":"cpuprc","short_desc":"Control allocation of cpu resources on a per-instrument basis, to optimize realtime output.","synopsis":["cpuprc insnum, ipercent","cpuprc Sinsname, ipercent"],"type":"opcode","opname":"cpuprc"},{"id":"cross2","short_desc":"Cross synthesis using FFT\\'s.","synopsis":["ares cross2 ain1, ain2, isize, ioverlap, iwin, kbias"],"type":"opcode","opname":"cross2"},{"id":"crossfm","short_desc":"Two mutually frequency and\/or phase modulated oscillators.","synopsis":["a1, a2 crossfm xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]","a1, a2 crossfmi xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]","a1, a2 crosspm xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]","a1, a2 crosspmi xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]","a1, a2 crossfmpm xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]","a1, a2 crossfmpmi xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]"],"type":"opcode","opname":"crossfm"},{"id":"crunch","short_desc":"Semi-physical model of a crunch sound.","synopsis":["ares crunch iamp, idettack [, inum] [, idamp] [, imaxshake]"],"type":"opcode","opname":"crunch"},{"id":"ctrl14","short_desc":"Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest ctrl14 ichan, ictlno1, ictlno2, imin, imax [, ifn]","kdest ctrl14 ichan, ictlno1, ictlno2, kmin, kmax [, ifn]"],"type":"opcode","opname":"ctrl14"},{"id":"ctrl21","short_desc":"Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest ctrl21 ichan, ictlno1, ictlno2, ictlno3, imin, imax [, ifn]","kdest ctrl21 ichan, ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]"],"type":"opcode","opname":"ctrl21"},{"id":"ctrl7","short_desc":"Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest ctrl7 ichan, ictlno, imin, imax [, ifn]","kdest ctrl7 ichan, ictlno, kmin, kmax [, ifn]","adest ctrl7 ichan, ictlno, kmin, kmax [, ifn] [, icutoff]"],"type":"opcode","opname":"ctrl7"},{"id":"ctrlinit","short_desc":"Sets the initial values for a set of MIDI controllers.","synopsis":["ctrlinit ichnl, ictlno1, ival1 [, ictlno2] [, ival2] [, ictlno3] [, ival3] [,...ival32]"],"type":"opcode","opname":"ctrlinit"},{"id":"ctrlpreset","short_desc":"Defines a preset for MIDI controllers.","synopsis":["kpreset ctrlpreset ktag, kchnl, kctlno1, [kctlno2] [, kctlno3] ..."],"type":"opcode","opname":"ctrlpreset"},{"id":"ctrlprint","short_desc":"Print the saved values of MIDI controllers.","synopsis":[" ctrlprint kcont[][, Sfile]"],"type":"opcode","opname":"ctrlprint"},{"id":"ctrlprintpresets","short_desc":"Prints the current collection of presets for MIDI controllers.","synopsis":[" ctrlprintpresets [Sfilenam]"],"type":"opcode","opname":"ctrlprintpresets"},{"id":"ctrlsave","short_desc":"Recovers the current values of MIDI controllers.","synopsis":["kconnt[] ctrlsave ichnl, ictlno1, [ictlno2] [, ictlno3] ..."],"type":"opcode","opname":"ctrlsave"},{"id":"ctrlselect","short_desc":"Loads a preset of values for MIDI controllers.","synopsis":[" ctrlselect kpre"],"type":"opcode","opname":"ctrlselect"},{"id":"cudanal","short_desc":"Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis and GPU hardware. Experimental and only available as source code at the moment.","synopsis":["fsig cudanal ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]"],"type":"opcode","opname":"cudanal"},{"id":"cudasliding","short_desc":"Perform sliding phase vocoder algorithm with simplified transformational FM using GPU hardware. Experimental and only available as source code at the moment.","synopsis":["asig cudasliding ain, amod, iwinsize"],"type":"opcode","opname":"cudasliding"},{"id":"cudasynth","short_desc":"Synthesis by additive synthesis and inverse FFT. Experimental and only available as source code at the moment.","synopsis":["asig cudasynth kamp, kfreq, itab, iftab, iatab[, inum]","asig cudasynth fsig, kamp, kfreq[, inum]","asig cudasynth fsig"],"type":"opcode","opname":"cudasynth"},{"id":"cuserrnd","short_desc":"Continuous USER-defined-distribution RaNDom generator.","synopsis":["aout cuserrnd kmin, kmax, ktableNum","iout cuserrnd imin, imax, itableNum","kout cuserrnd kmin, kmax, ktableNum"],"type":"opcode","opname":"cuserrnd"},{"id":"dam","short_desc":"A dynamic compressor\/expander.","synopsis":["ares dam asig, kthreshold, icomp1, icomp2, irtime, iftime"],"type":"opcode","opname":"dam"},{"id":"date","short_desc":"Returns the number seconds since a base date.","synopsis":["ir[, inano] date","kr[, knano] date"],"type":"opcode","opname":"date"},{"id":"dates","short_desc":"Returns as a string the date and time specified.","synopsis":["Sir dates [ itime]"],"type":"opcode","opname":"dates"},{"id":"db","short_desc":"Returns the amplitude equivalent for a given decibel amount.","synopsis":["db(x)"],"type":"opcode","opname":"db"},{"id":"dbamp","short_desc":"Returns the decibel equivalent of the raw amplitude x.","synopsis":["dbamp(x) (init-rate or control-rate args only)"],"type":"opcode","opname":"dbamp"},{"id":"dbfsamp","short_desc":"Returns the decibel equivalent of the raw amplitude x, relative to full scale amplitude.","synopsis":["dbfsamp(x) (init-rate or control-rate args only)"],"type":"opcode","opname":"dbfsamp"},{"id":"dcblock","short_desc":"A DC blocking filter.","synopsis":["ares dcblock ain [, igain]"],"type":"opcode","opname":"dcblock"},{"id":"dcblock2","short_desc":"A DC blocking filter.","synopsis":["ares dcblock2 ain [, iorder] [, iskip]"],"type":"opcode","opname":"dcblock2"},{"id":"dconv","short_desc":"A direct convolution opcode.","synopsis":["ares dconv asig, isize, ifn"],"type":"opcode","opname":"dconv"},{"id":"dct","short_desc":"Discrete Cosine Transform of a sample array (type-II DCT)","synopsis":["kout[] dct kin[]","iout[] dct iin[]"],"type":"opcode","opname":"dct"},{"id":"dctinv","short_desc":"Inverse Discrete Cosine Transform of a sample array (type-III DCT)","synopsis":["kout[] dctinv kin[]","iout[] dctinv iin[]"],"type":"opcode","opname":"dctinv"},{"id":"define","short_desc":"Defines a macro.","synopsis":["#define NAME # replacement text #","#define NAME(a' b' c') # replacement text #"],"type":"opcode","opname":"macros"},{"id":"deinterleave","short_desc":"Deinterleaves arrays by picking alternate data from its input.","synopsis":["kout1[], kout2[] deinterleave kin[]"],"type":"opcode","opname":"deinterleave"},{"id":"delay","short_desc":"Delays an input signal by some time interval.","synopsis":["ares delay asig, idlt [, iskip]"],"type":"opcode","opname":"delay"},{"id":"delay1","short_desc":"Delays an input signal by one sample.","synopsis":["ares delay1 asig [, iskip]"],"type":"opcode","opname":"delay1"},{"id":"delayk","short_desc":"Delays an input signal by some time interval.","synopsis":["kr delayk ksig, idel[, imode]","kr vdel_k ksig, kdel, imdel[, imode]"],"type":"opcode","opname":"delayk"},{"id":"delayr","short_desc":"Reads from an automatically established digital delay line.","synopsis":["ares delayr idlt [, iskip]"],"type":"opcode","opname":"delayr"},{"id":"delayw","short_desc":"Writes the audio signal to a digital delay line.","synopsis":["delayw asig"],"type":"opcode","opname":"delayw"},{"id":"deltap","short_desc":"Taps a delay line at variable offset times.","synopsis":["ares deltap kdlt"],"type":"opcode","opname":"deltap"},{"id":"deltap3","short_desc":"Taps a delay line at variable offset times, uses cubic interpolation.","synopsis":["ares deltap3 xdlt"],"type":"opcode","opname":"deltape"},{"id":"deltapi","short_desc":"Taps a delay line at variable offset times, uses interpolation.","synopsis":["ares deltapi xdlt"],"type":"opcode","opname":"deltapi"},{"id":"deltapn","short_desc":"Taps a delay line at variable offset times.","synopsis":["ares deltapn xnumsamps"],"type":"opcode","opname":"deltapn"},{"id":"deltapx","short_desc":"Read from or write to a delay line with interpolation.","synopsis":["aout deltapx adel, iwsize"],"type":"opcode","opname":"deltapx"},{"id":"deltapxw","short_desc":"Mixes the input signal to a delay line.","synopsis":["deltapxw ain, adel, iwsize"],"type":"opcode","opname":"deltapxw"},{"id":"denorm","short_desc":"Mixes low level noise to a list of a-rate signals","synopsis":["denorm a1[, a2[, a3[, ... ]]]"],"type":"opcode","opname":"denorm"},{"id":"diff","short_desc":"Modify a signal by differentiation.","synopsis":["ares diff asig [, iskip]","kres diff ksig [, iskip]"],"type":"opcode","opname":"diff"},{"id":"diode_ladder","short_desc":"Zero-delay feedback implementation of 4 pole diode ladder filter.","synopsis":["asig diode_ladder ain, xcf, xk [, inlp, isaturation, istor]"],"type":"opcode","opname":"diode_ladder"},{"id":"directory","short_desc":"Reads a directory and outputs to a string array a list of file names.","synopsis":["SFiles[] directory SDirectory[, SExtention]"],"type":"opcode","opname":"directory"},{"id":"diskgrain","short_desc":"Synchronous granular synthesis, using a soundfile as source.","synopsis":["asig diskgrain Sfname, kamp, kfreq, kpitch, kgrsize, kprate, ifun, iolaps [,imaxgrsize , ioffset]"],"type":"opcode","opname":"diskgrain"},{"id":"diskin","short_desc":"Reads audio data from an external device or stream and can alter its pitch.","synopsis":["ar1 [, ar2 [, ar3 [, ... arN]]] diskin ifilcod[, kpitch[, iskiptim [, iwraparound[, iformat[, iskipinit]]]]]","ar1[] diskin ifilcod[, kpitch[, iskiptim [, iwraparound[, iformat[, iskipinit]]]]]"],"type":"opcode","opname":"diskin"},{"id":"diskin2","short_desc":"Reads audio data from a file, and can alter its pitch using one of several available interpolation types, as well as convert the sample rate to match the orchestra sr setting.","synopsis":["a1[, a2[, ... aN]] diskin2 ifilcod[, kpitch[, iskiptim [, iwrap[, iformat[, iwsize[, ibufsize[, iskipinit]]]]]]]","ar1[] diskin2 ifilcod[, kpitch[, iskiptim [, iwrap[, iformat[, iwsize[, ibufsize[, iskipinit]]]]]]]"],"type":"opcode","opname":"diskin2"},{"id":"dispfft","short_desc":"Displays the Fourier Transform of an audio or control signal.","synopsis":["dispfft xsig, iprd, iwsiz [, iwtyp] [, idbout] [, iwtflg] [,imin] [,imax]"],"type":"opcode","opname":"dispfft"},{"id":"display","short_desc":"Displays the audio or control signals as an amplitude vs. time graph.","synopsis":["display xsig, iprd [, inprds] [, iwtflg]"],"type":"opcode","opname":"display"},{"id":"distort","short_desc":"Distort an audio signal via waveshaping and optional clipping.","synopsis":["ar distort asig, kdist, ifn[, ihp, istor]"],"type":"opcode","opname":"distort"},{"id":"distort1","short_desc":"Modified hyperbolic tangent distortion.","synopsis":["ares distort1 asig, kpregain, kpostgain, kshape1, kshape2[, imode]"],"type":"opcode","opname":"distort1"},{"id":"divides","short_desc":"Division operator.","synopsis":["a \/ b (no rate restriction)"],"type":"opcode","opname":"\/"},{"id":"divz","short_desc":"Safely divides two numbers.","synopsis":["ares divz xa, xb, ksubst","ires divz ia, ib, isubst","kres divz ka, kb, ksubst","...divz(ka, kb, ksubst)... (no rate restriction)"],"type":"opcode","opname":"divz"},{"id":"dollar","short_desc":"Calls a defined macro.","synopsis":["$NAME\u00a0"],"type":"opcode","opname":"$NAME"},{"id":"doppler","short_desc":"A fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations.","synopsis":["ashifted doppler asource, ksourceposition, kmicposition [, isoundspeed, ifiltercutoff]"],"type":"opcode","opname":"doppler"},{"id":"dot","short_desc":"Calculates the dot product of two arrays.","synopsis":["kres\/ires dot karr1[]\/iarr1[], karr2[]\/iarr2[] (k- or i-arrays )"],"type":"opcode","opname":"dot"},{"id":"downsamp","short_desc":"Modify a signal by down-sampling.","synopsis":["kres downsamp asig [, iwlen]"],"type":"opcode","opname":"downsamp"},{"id":"dripwater","short_desc":"Semi-physical model of a water drop.","synopsis":["ares dripwater kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]"],"type":"opcode","opname":"dripwater"},{"id":"dssiactivate","short_desc":"Activates or deactivates a DSSI or LADSPA plugin.","synopsis":["dssiactivate ihandle, ktoggle "],"type":"opcode","opname":"dssiactivate"},{"id":"dssiaudio","short_desc":"Processes audio using a LADSPA or DSSI plugin.","synopsis":["[aout1, aout2, ..., aout9] dssiaudio ihandle, [ain1, ain2, ..., ain9]"],"type":"opcode","opname":"dssiaudio"},{"id":"dssictls","short_desc":"Send control information to a LADSPA or DSSI plugin.","synopsis":["dssictls ihandle, iport, kvalue, ktrigger "],"type":"opcode","opname":"dssictls"},{"id":"dssiinit","short_desc":"Loads a DSSI or LADSPA plugin.","synopsis":["ihandle dssiinit ilibraryname, iplugindex [, iverbose] "],"type":"opcode","opname":"dssiinit"},{"id":"dssilist","short_desc":"Lists all available DSSI and LADSPA plugins.","synopsis":["dssilist"],"type":"opcode","opname":"dssilist"},{"id":"dumpk","short_desc":"Periodically writes an orchestra control-signal value to an external file.","synopsis":["dumpk ksig, ifilname, iformat, iprd"],"type":"opcode","opname":"dumpk"},{"id":"dumpk2","short_desc":"Periodically writes two orchestra control-signal values to an external file.","synopsis":["dumpk2 ksig1, ksig2, ifilname, iformat, iprd"],"type":"opcode","opname":"dumpk2"},{"id":"dumpk3","short_desc":"Periodically writes three orchestra control-signal values to an external file.","synopsis":["dumpk3 ksig1, ksig2, ksig3, ifilname, iformat, iprd"],"type":"opcode","opname":"dumpk3"},{"id":"dumpk4","short_desc":"Periodically writes four orchestra control-signal values to an external file.","synopsis":["dumpk4 ksig1, ksig2, ksig3, ksig4, ifilname, iformat, iprd"],"type":"opcode","opname":"dumpk4"},{"id":"duserrnd","short_desc":"Discrete USER-defined-distribution RaNDom generator.","synopsis":["aout duserrnd ktableNum","iout duserrnd itableNum","kout duserrnd ktableNum"],"type":"opcode","opname":"duserrnd"},{"id":"dust","short_desc":"Random impulses.","synopsis":["ares dust kamp, kdensity","kres dust kamp, kdensity"],"type":"opcode","opname":"dust"},{"id":"dust2","short_desc":"Random impulses.","synopsis":["ares dust2 kamp, kdensity","kres dust2 kamp, kdensity"],"type":"opcode","opname":"dust2"},{"id":"elapsedcycles","short_desc":"Read absolute time in k-rate cycles.","synopsis":["ires elapsedcycles","kres elapsedcycles"],"type":"opcode","opname":"elapsedcycles"},{"id":"elapsedtime","short_desc":"Read absolute time in seconds.","synopsis":["ires elapsedtime","kres elapsedtime"],"type":"opcode","opname":"elapsedtime"},{"id":"else","short_desc":"Executes a block of code when an \"if...then\" condition is false.","synopsis":["else"],"type":"opcode","opname":"else"},{"id":"elseif","short_desc":"Defines another \"if...then\" condition when a \"if...then\" condition is false.","synopsis":["elseif xa R xb then"],"type":"opcode","opname":"elseif"},{"id":"endif","short_desc":"Closes a block of code that begins with an \"if...then\" statement.","synopsis":["endif"],"type":"opcode","opname":"endif"},{"id":"endin","short_desc":"Ends the current instrument block.","synopsis":["endin"],"type":"opcode","opname":"endin"},{"id":"endop","short_desc":"Marks the end of an user-defined opcode block.","synopsis":["endop"],"type":"opcode","opname":"endop"},{"id":"envlpx","short_desc":"Applies an envelope consisting of 3 segments.","synopsis":["ares envlpx xamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]","kres envlpx kamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]"],"type":"opcode","opname":"envlpx"},{"id":"envlpxr","short_desc":"The envlpx opcode with a final release segment.","synopsis":["ares envlpxr xamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]","kres envlpxr kamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]"],"type":"opcode","opname":"envlpxr"},{"id":"ephasor","short_desc":"produces two outputs: a periodic phase signal and a periodic exponential decaying signal.","synopsis":["aexp,aph ephasor kfreq, kR"],"type":"opcode","opname":"ephasor"},{"id":"eqfil","short_desc":"Equalizer filter","synopsis":["asig eqfil ain, kcf, kbw, kgain[, istor]"],"type":"opcode","opname":"eqfil"},{"id":"equals","short_desc":"Compares two values for equality.","synopsis":["(a == b ? v1 : v2)"],"type":"opcode","opname":"=="},{"id":"evalstr","short_desc":"Evalstrs evaluates a string containing Csound code, returning a value.","synopsis":["ires evalstr Scode ","kres evalstr Scode, ktrig "],"type":"opcode","opname":"evalstr"},{"id":"event","short_desc":"Generates a score event from an instrument.","synopsis":["event \"scorechar\", kinsnum, kdelay, kdur, [, kp4] [, kp5] [, ...]","event \"scorechar\", \"insname\", kdelay, kdur, [, kp4] [, kp5] [, ...]"],"type":"opcode","opname":"event"},{"id":"event_i","short_desc":"Generates a score event from an instrument.","synopsis":["event_i \"scorechar\", iinsnum, idelay, idur, [, ip4] [, ip5] [, ...]","event_i \"scorechar\", \"insname\", idelay, idur, [, ip4] [, ip5] [, ...]"],"type":"opcode","opname":"event_i"},{"id":"eventcycles","short_desc":"Read absolute time in k-rate cycles.","synopsis":["kres eventcycles"],"type":"opcode","opname":"eventcycles"},{"id":"eventtime","short_desc":"Read absolute time in seconds.","synopsis":["kres eventtime"],"type":"opcode","opname":"eventtime"},{"id":"exciter","short_desc":"A non-linear filter system to excite the signal.","synopsis":["ares exciter asig, kfreq, kceil, kharmonics, kblend"],"type":"opcode","opname":"exciter"},{"id":"exitnow","short_desc":"Exit Csound as fast as possible, with no cleaning up.","synopsis":["exitnow [ivalue]"],"type":"opcode","opname":"exitnow"},{"id":"exp","short_desc":"Returns e raised to the x-th power.","synopsis":["exp(x) (no rate restriction)","exp(k\/i[]) (k- or i-arrays)"],"type":"opcode","opname":"exp"},{"id":"expcurve","short_desc":"This opcode implements a formula for generating a normalised exponential curve in range 0 - 1. It is based on the Max \/ MSP work of Eric Singer (c) 1994.","synopsis":["kout expcurve kindex, ksteepness"],"type":"opcode","opname":"expcurve"},{"id":"expon","short_desc":"Trace an exponential curve between specified points.","synopsis":["ares expon ia, idur, ib","kres expon ia, idur, ib"],"type":"opcode","opname":"expon"},{"id":"exprand","short_desc":"Exponential distribution random number generator (positive values only).","synopsis":["ares exprand klambda","ires exprand klambda","kres exprand klambda"],"type":"opcode","opname":"exprand"},{"id":"exprandi","short_desc":"Exponential distribution random number generator with interpolation (positive values only).","synopsis":["ares exprandi klambda, xamp, xcps","ires exprandi klambda, xamp, xcps","kres exprandi klambda, xamp, xcps"],"type":"opcode","opname":"exprandi"},{"id":"expseg","short_desc":"Trace a series of exponential segments between specified points.","synopsis":["ares expseg ia, idur1, ib [, idur2] [, ic] [...]","kres expseg ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"expseg"},{"id":"expsega","short_desc":"An exponential segment generator operating at a-rate.","synopsis":["ares expsega ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"expsega"},{"id":"expsegb","short_desc":"Trace a series of exponential segments between specified absolute points.","synopsis":["ares expsegb ia, itim1, ib [, itim2] [, ic] [...]","kres expsegb ia, itim1, ib [, itim2] [, ic] [...]"],"type":"opcode","opname":"expsegb"},{"id":"expsegba","short_desc":"An exponential segment generator operating at a-rate with absolute times.","synopsis":["ares expsegba ia, itim1, ib [, itim2] [, ic] [...]"],"type":"opcode","opname":"expsegba"},{"id":"expsegr","short_desc":"Trace a series of exponential segments between specified points including a release segment.","synopsis":["ares expsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz","kres expsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz"],"type":"opcode","opname":"expsegr"},{"id":"fareylen","short_desc":"returns the length of a Farey Sequence.","synopsis":["kfl fareylen kfn"],"type":"opcode","opname":"fareylen"},{"id":"fareyleni","short_desc":"returns the length of a Farey Sequence.","synopsis":["ifl fareyleni ifn"],"type":"opcode","opname":"fareyleni"},{"id":"faustaudio","short_desc":"Instantiates and runs a compiled Faust program.","synopsis":["ihandle,a1[,a2,...] faustaudio ifac[,ain1,...] "],"type":"opcode","opname":"faustaudio"},{"id":"faustcompile","short_desc":"Invokes the just-in-time compiler to produce a instantiable DSP process from a Faust program.","synopsis":["ihandle faustcompile Scode, Sargs[,iasync, istacksize] "],"type":"opcode","opname":"faustcompile"},{"id":"faustctl","short_desc":"Adjusts a given control in a Faust DSP instance.","synopsis":["faustctl idsp,Scontrol,kval "],"type":"opcode","opname":"faustctl"},{"id":"faustdsp","short_desc":"Instantiates a Faust program.","synopsis":["ihandle faustdsp ifac "],"type":"opcode","opname":"faustdsp"},{"id":"faustgen","short_desc":"Compiles, Instantiates and runs a compiled Faust program.","synopsis":["ihandle,a1[,a2,...] faustgen SCode[,ain1,...] "],"type":"opcode","opname":"faustgen"},{"id":"faustplay","short_desc":"Runs an instantiated Faust program.","synopsis":["a1[, a2,...] faustplay ihandle[, ain1,...]"],"type":"opcode","opname":"faustplay"},{"id":"fft","short_desc":"Complex-to-complex Fast Fourier Transform.","synopsis":["kout[] fft kin[]"],"type":"opcode","opname":"fft"},{"id":"ficlose","short_desc":"Closes a previously opened file.","synopsis":["ficlose ihandle","ficlose Sfilename"],"type":"opcode","opname":"ficlose"},{"id":"filebit","short_desc":"Returns the number of bits in each sample in a sound file.","synopsis":["ir filebit ifilcod [, iallowraw]"],"type":"opcode","opname":"filebit"},{"id":"filelen","short_desc":"Returns the length of a sound file.","synopsis":["ir filelen ifilcod, [iallowraw]"],"type":"opcode","opname":"filelen"},{"id":"filenchnls","short_desc":"Returns the number of channels in a sound file.","synopsis":["ir filenchnls ifilcod [, iallowraw]"],"type":"opcode","opname":"filenchnls"},{"id":"filepeak","short_desc":"Returns the peak absolute value of a sound file.","synopsis":["ir filepeak ifilcod [, ichnl]"],"type":"opcode","opname":"filepeak"},{"id":"filescal","short_desc":"Phase-locked vocoder processing with onset detection\/processing, \\'tempo-scaling\\'.","synopsis":["asig[,asig2] filescal ktimescal, kamp, kpitch, Sfile, klock [,ifftsize, idecim, ithresh] "],"type":"opcode","opname":"filescal"},{"id":"filesr","short_desc":"Returns the sample rate of a sound file.","synopsis":["ir filesr ifilcod [, iallowraw]"],"type":"opcode","opname":"filesr"},{"id":"filevalid","short_desc":"Checks that a file can be read at initialisation or performance time.","synopsis":["ir filevalid ifilcod","kr filevalid ifilcod"],"type":"opcode","opname":"filevalid"},{"id":"fillarray","short_desc":"Generate a vector with initial values.","synopsis":["karray[] fillarray ival1, ival2,.....ivaln","karray fillarray ival1, ival2,.....ivaln","karray fillarray kval1, kval2,.....kvaln"],"type":"opcode","opname":"fillarray"},{"id":"filter2","short_desc":"Performs filtering using a transposed form-II digital filter lattice with no time-varying control.","synopsis":["ares filter2 asig, ibcoefs, iacoefs, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN","kres filter2 ksig, ibcoefs, iacoefs, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN"],"type":"opcode","opname":"filter2"},{"id":"fin","short_desc":"Read signals from a file at a-rate.","synopsis":["fin ifilename, iskipframes, iformat, ain1 [, ain2] [, ain3] [,...]","fin ifilename, iskipframes, iformat, arr[]"],"type":"opcode","opname":"fin"},{"id":"fini","short_desc":"Read signals from a file at i-rate.","synopsis":["fini ifilename, iskipframes, iformat, in1 [, in2] [, in3] [, ...]"],"type":"opcode","opname":"fini"},{"id":"fink","short_desc":"Read signals from a file at k-rate.","synopsis":["fink ifilename, iskipframes, iformat, kin1 [, kin2] [, kin3] [,...]"],"type":"opcode","opname":"fink"},{"id":"fiopen","short_desc":"Opens a file in a specific mode.","synopsis":["ihandle fiopen ifilename, imode"],"type":"opcode","opname":"fiopen"},{"id":"flanger","short_desc":"A user controlled flanger.","synopsis":["ares flanger asig, adel, kfeedback [, imaxd]"],"type":"opcode","opname":"flanger"},{"id":"flashtxt","short_desc":"Allows text to be displayed from instruments like sliders","synopsis":["flashtxt iwhich, String"],"type":"opcode","opname":"flashtxt"},{"id":"FLbox","short_desc":"A FLTK widget that displays text inside of a box.","synopsis":["ihandle FLbox \"label\", itype, ifont, isize, iwidth, iheight, ix, iy [, image]","ihandle FLbox istr, itype, ifont, isize, iwidth, iheight, ix, iy [, image]"],"type":"opcode","opname":"FLbox"},{"id":"FLbutBank","short_desc":"A FLTK widget opcode that creates a bank of buttons.","synopsis":["kout, ihandle FLbutBank itype, inumx, inumy, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]"],"type":"opcode","opname":"FLbutBank"},{"id":"FLbutton","short_desc":"A FLTK widget opcode that creates a button.","synopsis":["kout, ihandle FLbutton \"label\", ion, ioff, itype, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]"],"type":"opcode","opname":"FLbutton"},{"id":"FLcloseButton","short_desc":"A FLTK widget opcode that creates a button that will close the panel window it is a part of.","synopsis":["ihandle FLcloseButton \"label\", iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLcloseButton"},{"id":"FLcolor","short_desc":"A FLTK opcode that sets the primary colors.","synopsis":["FLcolor ired, igreen, iblue [, ired2, igreen2, iblue2]"],"type":"opcode","opname":"FLcolor"},{"id":"FLcolor2","short_desc":"A FLTK opcode that sets the secondary (selection) color.","synopsis":["FLcolor2 ired, igreen, iblue"],"type":"opcode","opname":"FLcolor2"},{"id":"FLcount","short_desc":"A FLTK widget opcode that creates a counter.","synopsis":["kout, ihandle FLcount \"label\", imin, imax, istep1, istep2, itype, iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [...] [, kpN]"],"type":"opcode","opname":"FLcount"},{"id":"FLexecButton","short_desc":"A FLTK widget opcode that creates a button that executes a command.","synopsis":["ihandle FLexecButton \"command\", iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLexecButton"},{"id":"FLgetsnap","short_desc":"Retrieves a previously stored FLTK snapshot.","synopsis":["inumsnap FLgetsnap index [, igroup]"],"type":"opcode","opname":"FLgetsnap"},{"id":"FLgroup","short_desc":"A FLTK container opcode that groups child widgets.","synopsis":["FLgroup \"label\", iwidth, iheight, ix, iy [, iborder] [, image]"],"type":"opcode","opname":"FLgroup"},{"id":"FLgroup_end","short_desc":"Marks the end of a group of FLTK child widgets.","synopsis":[],"type":"opcode","opname":"FLgroup_end"},{"id":"FLgroupEnd","short_desc":"Marks the end of a group of FLTK child widgets.","synopsis":["FLgroupEnd"],"type":"opcode","opname":"FLgroupEnd"},{"id":"FLhide","short_desc":"Hides the target FLTK widget.","synopsis":["FLhide ihandle"],"type":"opcode","opname":"FLhide"},{"id":"FLhvsBox","short_desc":"Displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.","synopsis":["ihandle FLhvsBox inumlinesX, inumlinesY, iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLhvsBox"},{"id":"FLhvsBoxSetValue","short_desc":"Sets the cursor position of a previously-declared FLhvsBox widget.","synopsis":["FLhvsBox kx, ky, ihandle"],"type":"opcode","opname":"FLhvsBoxSetValue"},{"id":"FLjoy","short_desc":"A FLTK opcode that acts like a joystick.","synopsis":["koutx, kouty, ihandlex, ihandley FLjoy \"label\", iminx, imaxx, iminy, imaxy, iexpx, iexpy, idispx, idispy, iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLjoy"},{"id":"FLkeyIn","short_desc":"Reports keys pressed (on alphanumeric keyboard) when an FLTK panel has focus.","synopsis":["kascii FLkeyIn [ifn]"],"type":"opcode","opname":"FLkeyIn"},{"id":"FLknob","short_desc":"A FLTK widget opcode that creates a knob.","synopsis":["kout, ihandle FLknob \"label\", imin, imax, iexp, itype, idisp, iwidth, ix, iy [, icursorsize]"],"type":"opcode","opname":"FLknob"},{"id":"FLlabel","short_desc":"A FLTK opcode that modifies the appearance of a text label.","synopsis":["FLlabel isize, ifont, ialign, ired, igreen, iblue"],"type":"opcode","opname":"FLlabel"},{"id":"FLloadsnap","short_desc":"Loads all snapshots into the memory bank of the current orchestra.","synopsis":["FLloadsnap \"filename\" [, igroup]"],"type":"opcode","opname":"FLloadsnap"},{"id":"FLmouse","short_desc":"Returns the mouse position and the state of the three mouse buttons.","synopsis":["kx, ky, kb1, kb2, kb3 FLmouse [imode]"],"type":"opcode","opname":"FLmouse"},{"id":"flooper","short_desc":"Function-table-based crossfading looper.","synopsis":["asig1[, asig2] flooper kamp, kpitch, istart, idur, ifad, ifn"],"type":"opcode","opname":"flooper"},{"id":"flooper2","short_desc":"Function-table-based crossfading looper.","synopsis":["asig1[,asig2] flooper2 kamp, kpitch, kloopstart, kloopend, kcrossfade, ifn [, istart, imode, ifenv, iskip]"],"type":"opcode","opname":"flooper2"},{"id":"floor","short_desc":"Returns the largest integer not greater than x","synopsis":["floor(x) (init-, control-, or audio-rate arg allowed)","floor(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"floor"},{"id":"FLpack","short_desc":"Provides the functionality of compressing and aligning FLTK widgets.","synopsis":["FLpack iwidth, iheight, ix, iy, itype, ispace, iborder"],"type":"opcode","opname":"FLpack"},{"id":"FLpack_end","short_desc":"Marks the end of a group of compressed or aligned FLTK widgets.","synopsis":[],"type":"opcode","opname":"FLpack_end"},{"id":"FLpackEnd","short_desc":"Marks the end of a group of compressed or aligned FLTK widgets.","synopsis":["FLpackEnd"],"type":"opcode","opname":"FLpackEnd"},{"id":"FLpanel","short_desc":"Creates a window that contains FLTK widgets.","synopsis":["FLpanel \"label\", iwidth, iheight [, ix] [, iy] [, iborder] [, ikbdcapture] [, iclose]"],"type":"opcode","opname":"FLpanel"},{"id":"FLpanel_end","short_desc":"Marks the end of a group of FLTK widgets contained inside of a window (panel).","synopsis":[],"type":"opcode","opname":"FLpanel_end"},{"id":"FLpanelEnd","short_desc":"Marks the end of a group of FLTK widgets contained inside of a window (panel).","synopsis":["FLpanelEnd"],"type":"opcode","opname":"FLpanelEnd"},{"id":"FLprintk","short_desc":"A FLTK opcode that prints a k-rate value at specified intervals.","synopsis":["FLprintk itime, kval, idisp"],"type":"opcode","opname":"FLprintk"},{"id":"FLprintk2","short_desc":"A FLTK opcode that prints a new value every time a control-rate variable changes.","synopsis":["FLprintk2 kval, idisp"],"type":"opcode","opname":"FLprintk2"},{"id":"FLroller","short_desc":"A FLTK widget that creates a transversal knob.","synopsis":["kout, ihandle FLroller \"label\", imin, imax, istep, iexp, itype, idisp, iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLroller"},{"id":"FLrun","short_desc":"Starts the FLTK widget thread.","synopsis":["FLrun"],"type":"opcode","opname":"FLrun"},{"id":"FLsavesnap","short_desc":"Saves all snapshots currently created into a file.","synopsis":["FLsavesnap \"filename\" [, igroup]"],"type":"opcode","opname":"FLsavesnap"},{"id":"FLscroll","short_desc":"A FLTK opcode that adds scroll bars to an area.","synopsis":["FLscroll iwidth, iheight [, ix] [, iy]"],"type":"opcode","opname":"FLscroll"},{"id":"FLscroll_end","short_desc":"A FLTK opcode that marks the end of an area with scrollbars.","synopsis":[],"type":"opcode","opname":"FLscrollEnd"},{"id":"FLscrollEnd","short_desc":"A FLTK opcode that marks the end of an area with scrollbars.","synopsis":["FLscrollEnd"],"type":"opcode","opname":"FLscrollEnd"},{"id":"FLsetAlign","short_desc":"Sets the text alignment of a label of a FLTK widget.","synopsis":["FLsetAlign ialign, ihandle"],"type":"opcode","opname":"FLsetAlign"},{"id":"FLsetBox","short_desc":"Sets the appearance of a box surrounding a FLTK widget.","synopsis":["FLsetBox itype, ihandle"],"type":"opcode","opname":"FLsetBox"},{"id":"FLsetColor","short_desc":"Sets the primary color of a FLTK widget.","synopsis":["FLsetColor ired, igreen, iblue, ihandle"],"type":"opcode","opname":"FLsetColor"},{"id":"FLsetColor2","short_desc":"Sets the secondary (or selection) color of a FLTK widget.","synopsis":["FLsetColor2 ired, igreen, iblue, ihandle"],"type":"opcode","opname":"FLsetColor2"},{"id":"FLsetFont","short_desc":"Sets the font type of a FLTK widget.","synopsis":["FLsetFont ifont, ihandle"],"type":"opcode","opname":"FLsetFont"},{"id":"FLsetPosition","short_desc":"Sets the position of a FLTK widget.","synopsis":["FLsetPosition ix, iy, ihandle"],"type":"opcode","opname":"FLsetPosition"},{"id":"FLsetSize","short_desc":"Resizes a FLTK widget.","synopsis":["FLsetSize iwidth, iheight, ihandle"],"type":"opcode","opname":"FLsetSize"},{"id":"FLsetsnap","short_desc":"Stores the current status of all FLTK valuators into a snapshot location.","synopsis":["inumsnap, inumval FLsetsnap index [, ifn, igroup]"],"type":"opcode","opname":"FLsetsnap"},{"id":"FLsetSnapGroup","short_desc":"Determines the snapshot group for FL valuators.","synopsis":["FLsetSnapGroup igroup"],"type":"opcode","opname":"FLsetSnapGroup"},{"id":"FLsetText","short_desc":"Sets the label of a FLTK widget.","synopsis":["FLsetText \"itext\", ihandle","FLsetText istr, ihandle"],"type":"opcode","opname":"FLsetText"},{"id":"FLsetTextColor","short_desc":"Sets the color of the text label of a FLTK widget.","synopsis":["FLsetTextColor ired, iblue, igreen, ihandle"],"type":"opcode","opname":"FLsetTextColor"},{"id":"FLsetTextSize","short_desc":"Sets the size of the text label of a FLTK widget.","synopsis":["FLsetTextSize isize, ihandle"],"type":"opcode","opname":"FLsetTextSize"},{"id":"FLsetTextType","short_desc":"Sets some font attributes of the text label of a FLTK widget.","synopsis":["FLsetTextType itype, ihandle"],"type":"opcode","opname":"FLsetTextType"},{"id":"FLsetVal","short_desc":"Sets the value of a FLTK valuator at control-rate.","synopsis":["FLsetVal ktrig, kvalue, ihandle"],"type":"opcode","opname":"FLsetVal"},{"id":"FLsetVal_i","short_desc":"Sets the value of a FLTK valuator to a number provided by the user.","synopsis":["FLsetVal_i ivalue, ihandle"],"type":"opcode","opname":"FLsetVal_i"},{"id":"FLshow","short_desc":"Restores the visibility of a previously hidden FLTK widget.","synopsis":["FLshow ihandle"],"type":"opcode","opname":"FLshow"},{"id":"FLslidBnk","short_desc":"A FLTK widget containing a bank of horizontal sliders.","synopsis":["FLslidBnk \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]"],"type":"opcode","opname":"FLslidBnk"},{"id":"FLslidBnk2","short_desc":"A FLTK widget containing a bank of horizontal sliders.","synopsis":["FLslidBnk2 \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] ","FLslidBnk2 istring, inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] "],"type":"opcode","opname":"FLslidBnk2"},{"id":"FLslidBnk2Set","short_desc":"modify the values of a slider bank.","synopsis":["FLslidBnk2Set ihandle, ifn [, istartIndex, istartSlid, inumSlid]"],"type":"opcode","opname":"FLslidBnk2Set"},{"id":"FLslidBnk2Setk","short_desc":"modify the values of a slider bank.","synopsis":["FLslidBnk2Setk ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]"],"type":"opcode","opname":"FLslidBnk2Setk"},{"id":"FLslidBnkGetHandle","short_desc":"gets the handle of last slider bank created.","synopsis":["ihandle FLslidBnkGetHandle"],"type":"opcode","opname":"FLslidBnkGetHandle"},{"id":"FLslidBnkSet","short_desc":"modify the values of a slider bank.","synopsis":["FLslidBnkSet ihandle, ifn [, istartIndex, istartSlid, inumSlid]"],"type":"opcode","opname":"FLslidBnkSet"},{"id":"FLslidBnkSetk","short_desc":"modify the values of a slider bank.","synopsis":["FLslidBnkSetk ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]"],"type":"opcode","opname":"FLslidBnkSetk"},{"id":"FLslider","short_desc":"Puts a slider into the corresponding FLTK container.","synopsis":["kout, ihandle FLslider \"label\", imin, imax, iexp, itype, idisp, iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLslider"},{"id":"FLtabs","short_desc":"Creates a tabbed FLTK interface.","synopsis":["FLtabs iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLtabs"},{"id":"FLtabs_end","short_desc":"Marks the end of a tabbed FLTK interface.","synopsis":[],"type":"opcode","opname":"FLtabs)end"},{"id":"FLtabsEnd","short_desc":"Marks the end of a tabbed FLTK interface.","synopsis":["FLtabsEnd"],"type":"opcode","opname":"FLtabsEnd"},{"id":"FLtext","short_desc":"A FLTK widget opcode that creates a textbox.","synopsis":["kout, ihandle FLtext \"label\", imin, imax, istep, itype, iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLtext"},{"id":"fluidAllOut","short_desc":"Collects all audio from all Fluidsynth engines in a performance","synopsis":["aleft, aright fluidAllOut"],"type":"opcode","opname":"fluidAllOut"},{"id":"fluidCCi","short_desc":"Sends a MIDI controller data message to fluid.","synopsis":["fluidCCi iEngineNumber, iChannelNumber, iControllerNumber, iValue"],"type":"opcode","opname":"fluidCCi"},{"id":"fluidCCk","short_desc":"Sends a MIDI controller data message to fluid.","synopsis":["fluidCCk iEngineNumber, iChannelNumber, iControllerNumber, kValue"],"type":"opcode","opname":"fluidCCk"},{"id":"fluidControl","short_desc":"Sends MIDI note on, note off, and other messages to a SoundFont preset.","synopsis":["fluidControl ienginenum, kstatus, kchannel, kdata1, kdata2 [,imsgs]"],"type":"opcode","opname":"fluidControl"},{"id":"fluidEngine","short_desc":"Instantiates a fluidsynth engine.","synopsis":["ienginenum fluidEngine [iChorusEnabled] [, iRevervEnabled] [, iNumChannels] [, iPolyphony] "],"type":"opcode","opname":"fluidEngine"},{"id":"fluidInfo","short_desc":"Retrieves program information from currently loaded soundfont.","synopsis":["SPrograms[] fluidInfo ienginenum"],"type":"opcode","opname":"fluidInfo"},{"id":"fluidLoad","short_desc":"Loads a SoundFont into a fluidEngine, optionally listing SoundFont contents.","synopsis":["isfnum fluidLoad soundfont, ienginenum[, ilistpresets]"],"type":"opcode","opname":"fluidLoad"},{"id":"fluidNote","short_desc":"Plays a note on a channel in a fluidSynth engine.","synopsis":["fluidNote ienginenum, ichannelnum, imidikey, imidivel"],"type":"opcode","opname":"fluidNote"},{"id":"fluidOut","short_desc":"Outputs sound from a given fluidEngine","synopsis":["aleft, aright fluidOut ienginenum"],"type":"opcode","opname":"fluidOut"},{"id":"fluidProgramSelect","short_desc":"Assigns a preset from a SoundFont to a channel on a fluidEngine.","synopsis":["fluidProgramSelect ienginenum, ichannelnum, isfnum, ibanknum, ipresetnum"],"type":"opcode","opname":"fluidProgramSelect"},{"id":"fluidSetInterpMethod","short_desc":"Set interpolation method for channel in Fluid Engine","synopsis":["fluidSetInterpMethod ienginenum, ichannelnum, iInterpMethod"],"type":"opcode","opname":"fluidSetInterpMethod"},{"id":"FLupdate","short_desc":"Same as the FLrun opcode.","synopsis":["FLupdate"],"type":"opcode","opname":"FLupdate"},{"id":"FLvalue","short_desc":"Shows the current value of a FLTK valuator.","synopsis":["ihandle FLvalue \"label\", iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLvalue"},{"id":"FLvkeybd","short_desc":"An FLTK widget opcode that creates a virtual keyboard widget.","synopsis":["FLvkeybd \"keyboard.map\", iwidth, iheight, ix, iy"],"type":"opcode","opname":"FLvkeybd"},{"id":"FLvslidBnk","short_desc":"A FLTK widget containing a bank of vertical sliders.","synopsis":["FLvslidBnk \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]"],"type":"opcode","opname":"FLvslidBnk"},{"id":"FLvslidBnk2","short_desc":"A FLTK widget containing a bank of vertical sliders.","synopsis":["FLvslidBnk2 \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]"],"type":"opcode","opname":"FLvslidBnk2"},{"id":"FLxyin","short_desc":"Senses the mouse cursor position in a user-defined area inside an FLpanel.","synopsis":["koutx, kouty, kinside FLxyin ioutx_min, ioutx_max, iouty_min, iouty_max, iwindx_min, iwindx_max, iwindy_min, iwindy_max [, iexpx, iexpy, ioutx, iouty]"],"type":"opcode","opname":"FLxyin"},{"id":"fmanal","short_desc":"AM\/FM analysis from quadrature signal.","synopsis":["am, af fmanal are, aim"],"type":"opcode","opname":"fmanal"},{"id":"fmax","short_desc":"Maximum value function.","synopsis":["ires[] fmax iarg1[], iarg2[] ","kres[] fmax karg1[], karg2[]","ires[] fmax iarg1[], iarg2 ","kres[] fmax karg[], karg2 "],"type":"opcode","opname":"fmax"},{"id":"fmb3","short_desc":"Uses FM synthesis to create a Hammond B3 organ sound.","synopsis":["ares fmb3 kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, ifn4, ivfn]"],"type":"opcode","opname":"fmb3"},{"id":"fmbell","short_desc":"Uses FM synthesis to create a tublar bell sound.","synopsis":["ares fmbell kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, ifn4, ivfn, isus]"],"type":"opcode","opname":"fmbell"},{"id":"fmin","short_desc":"Minimum value function.","synopsis":["ires[] fmin iarg1[], iarg2[] ","kres[] fmin karg1[], karg2[]","ires[] fmin iarg1[], iarg2 ","kres[] fmin karg[], karg2 "],"type":"opcode","opname":"fmin"},{"id":"fmmetal","short_desc":"Uses FM synthesis to create a Heavy Metal sound.","synopsis":["ares fmmetal kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn"],"type":"opcode","opname":"fmmetal"},{"id":"fmod","short_desc":"Compute the floating point remainder operation.","synopsis":["ires[] fmod iarg1[], iarg2[] ","kres[] fmod karg1[], karg2[]","ires[] fmod iarg1[], iarg2 ","kres[] fmod karg[], karg2 "],"type":"opcode","opname":"fmod"},{"id":"fmpercfl","short_desc":"Uses FM synthesis to create a percussive flute sound.","synopsis":["ares fmpercfl kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, ifn4, ivfn]"],"type":"opcode","opname":"fmpercfl"},{"id":"fmrhode","short_desc":"Uses FM synthesis to create a Fender Rhodes electric piano sound.","synopsis":["ares fmrhode kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn"],"type":"opcode","opname":"fmrhode"},{"id":"fmvoice","short_desc":"FM Singing Voice Synthesis","synopsis":["ares fmvoice kamp, kfreq, kvowel, ktilt, kvibamt, kvibrate[, ifn1, ifn2, ifn3, ifn4, ivibfn]"],"type":"opcode","opname":"fmvoice"},{"id":"fmwurlie","short_desc":"Uses FM synthesis to create a Wurlitzer electric piano sound.","synopsis":["ares fmwurlie kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, ifn4, ivfn"],"type":"opcode","opname":"fmwurlie"},{"id":"fof","short_desc":"Produces sinusoid bursts useful for formant and granular synthesis.","synopsis":["ares fof xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur [, iphs] [, ifmode] [, iskip]"],"type":"opcode","opname":"fof"},{"id":"fof2","short_desc":"Produces sinusoid bursts including k-rate incremental indexing with each successive burst.","synopsis":["ares fof2 xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur, kphs, kgliss [, iskip]"],"type":"opcode","opname":"fof2"},{"id":"fofilter","short_desc":"Formant filter.","synopsis":["asig fofilter ain, xcf, xris, xdec[, istor]"],"type":"opcode","opname":"fofilter"},{"id":"fog","short_desc":"Audio output is a succession of grains derived from data in a stored function table","synopsis":["ares fog xamp, xdens, xtrans, aspd, koct, kband, kris, kdur, kdec, iolaps, ifna, ifnb, itotdur [, iphs] [, itmode] [, iskip]"],"type":"opcode","opname":"fog"},{"id":"fold","short_desc":"Adds artificial foldover to an audio signal.","synopsis":["ares fold asig, kincr"],"type":"opcode","opname":"fold"},{"id":"follow","short_desc":"Envelope follower unit generator.","synopsis":["ares follow asig, idt"],"type":"opcode","opname":"follow"},{"id":"follow2","short_desc":"Another controllable envelope extractor.","synopsis":["ares follow2 asig, katt, krel"],"type":"opcode","opname":"follow2"},{"id":"foscil","short_desc":"A basic frequency modulated oscillator.","synopsis":["ares foscil xamp, kcps, xcar, xmod, kndx, ifn [, iphs]"],"type":"opcode","opname":"foscil"},{"id":"foscili","short_desc":"Basic frequency modulated oscillator with linear interpolation.","synopsis":["ares foscili xamp, kcps, xcar, xmod, kndx, ifn [, iphs]"],"type":"opcode","opname":"foscili"},{"id":"fout","short_desc":"Outputs a-rate signals to an arbitrary number of channels.","synopsis":["fout ifilename, iformat, aout1 [, aout2, aout3,...,aoutN]","fout ifilename, iformat, array[]"],"type":"opcode","opname":"fout"},{"id":"fouti","short_desc":"Outputs i-rate signals of an arbitrary number of channels to a specified file.","synopsis":["fouti ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]"],"type":"opcode","opname":"fouti"},{"id":"foutir","short_desc":"Outputs i-rate signals from an arbitrary number of channels to a specified file.","synopsis":["foutir ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]"],"type":"opcode","opname":"foutir"},{"id":"foutk","short_desc":"Outputs k-rate signals of an arbitrary number of channels to a specified file, in raw (headerless) format.","synopsis":["foutk ifilename, iformat, kout1 [, kout2, kout3,....,koutN]"],"type":"opcode","opname":"foutk"},{"id":"fprintks","short_desc":"Similar to printks but prints to a file.","synopsis":["fprintks \"filename\", \"string\", [, kval1] [, kval2] [...]"],"type":"opcode","opname":"fprintks"},{"id":"fprints","short_desc":"Similar to prints but prints to a file.","synopsis":["fprints \"filename\", \"string\" [, ival1] [, ival2] [...]"],"type":"opcode","opname":"fprints"},{"id":"frac","short_desc":"Returns the fractional part of a decimal number.","synopsis":["frac(x) (init-rate or control-rate args; also works at audio rate in Csound5)","frac(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"frac"},{"id":"fractalnoise","short_desc":"A fractal noise generator.","synopsis":["ares fractalnoise kamp, kbeta"],"type":"opcode","opname":"fractalnoise"},{"id":"framebuffer","short_desc":"Read audio signals into 1 dimensional k-rate arrays and vice-versa with a specified buffer size.","synopsis":["kout[] framebuffer ain, isize","aout framebuffer kin, isize"],"type":"opcode","opname":"framebuffer"},{"id":"freeverb","short_desc":"Opcode version of Jezar\\'s Freeverb","synopsis":["aoutL, aoutR freeverb ainL, ainR, kRoomSize, kHFDamp[, iSRate[, iSkip]] "],"type":"opcode","opname":"freeverb"},{"id":"ftaudio","short_desc":"Write a previously-allocated table to an audio file.","synopsis":["ians ftaudio ifn, \"filename\", iformat[, ibeg, iend]","kans ftaudio ktrig, kfn, \"filename\", kformat [, isync, kbeg, kend]"],"type":"opcode","opname":"ftaudio"},{"id":"ftchnls","short_desc":"Returns the number of channels in a stored function table.","synopsis":["ftchnls(x) (init-rate args only)"],"type":"opcode","opname":"ftchnls"},{"id":"ftconv","short_desc":"Low latency multichannel convolution, using a function table as impulse response source.","synopsis":["a1[, a2[, a3[, ... a8]]] ftconv ain, ift, iplen[, iskipsamples [, iirlen[, iskipinit]]]"],"type":"opcode","opname":"ftconv"},{"id":"ftcps","short_desc":"Returns the base frequency of a stored function table in Hz.","synopsis":["ftcps(x) (init-rate args only)"],"type":"opcode","opname":"ftcps"},{"id":"ftexists","short_desc":"Query if a given table exists","synopsis":["iexists ftexists ifn ","kexists ftexists kfn \/ ifn"],"type":"opcode","opname":"ftexists"},{"id":"ftfree","short_desc":"Deletes function table.","synopsis":["ftfree ifno, iwhen"],"type":"opcode","opname":"ftfree"},{"id":"ftgen","short_desc":"Generate a score function table from within the orchestra.","synopsis":["gir ftgen ifn, itime, isize, igen, iarga [, iargb ] [...]","gir ftgen ifn, itime, isize, igen, iarray"],"type":"opcode","opname":"ftgen"},{"id":"ftgenonce","short_desc":"Generate a function table from within an instrument definition, without duplication of data.","synopsis":["ifno ftgenonce ip1, ip2dummy, isize, igen, iarga, iargb, ..."],"type":"opcode","opname":"ftgenonce"},{"id":"ftgentmp","short_desc":"Generate a score function table from within the orchestra, which is deleted at the end of the note.","synopsis":["ifno ftgentmp ip1, ip2dummy, isize, igen, iarga, iargb, ..."],"type":"opcode","opname":"ftgentmp"},{"id":"ftlen","short_desc":"Returns the size of a stored function table.","synopsis":["ftlen(x) (init-rate args only)"],"type":"opcode","opname":"ftlen"},{"id":"ftload","short_desc":"Load a set of previously-allocated tables from a file.","synopsis":["ftload Sfilename, iflag, ifn1 [, ifn2] [...]"],"type":"opcode","opname":"ftload"},{"id":"ftloadk","short_desc":"Load a set of previously-allocated tables from a file.","synopsis":["ftloadk Sfilename, ktrig, iflag, ifn1 [, ifn2] [...]"],"type":"opcode","opname":"ftloadk"},{"id":"ftlptim","short_desc":"Returns the loop segment start-time of a stored function table number.","synopsis":["ftlptim(x) (init-rate args only)"],"type":"opcode","opname":"ftlptim"},{"id":"ftmorf","short_desc":"Morphs between multiple ftables as specified in a list.","synopsis":["ftmorf kftndx, iftfn, iresfn"],"type":"opcode","opname":"ftmorf"},{"id":"ftom","short_desc":"Convert frequency to midi","synopsis":["imidi ftom ifreq [,irnd]","kmidi ftom kfreq [,irnd]","imidis[] ftom ifreqs[] [,irnd]","kmidis[] ftom kfreqs[] [,irnd]"],"type":"opcode","opname":"ftom"},{"id":"ftprint","short_desc":"Print the contents of a table (for debugging)","synopsis":["ftprint ifn [, ktrig, kstart, kend, kstep, inumcols ]"],"type":"opcode","opname":"ftprint"},{"id":"ftsamplebank","short_desc":"Reads a directory for sound files.","synopsis":["iNumberOfFile ftsamplebank SDirectory, iFirstTableNumber, iSkipTime, iFormat, iChannel,","kNumberOfFile ftsamplebank SDirectory, kFirstTableNumber, kTrigger, kSkipTime, kFormat, kChannel,"],"type":"opcode","opname":"ftsamplebank"},{"id":"ftsave","short_desc":"Save a set of previously-allocated tables to a file.","synopsis":["ftsave \"filename\", iflag, ifn1 [, ifn2] [...]"],"type":"opcode","opname":"ftsave"},{"id":"ftsavek","short_desc":"Save a set of previously-allocated tables to a file.","synopsis":["ftsavek \"filename\", ktrig, iflag, ifn1 [, ifn2] [...]"],"type":"opcode","opname":"ftsavek"},{"id":"ftset","short_desc":"Sets multiple elements of a table to a given value","synopsis":["ftset ktablenum, kvalue [, kstart=0, kend=0, kstep=1 ]","ftset itablenum, ivalue [, istart=0, iend=0, istep=1 ]"],"type":"opcode","opname":"ftset"},{"id":"ftslice","short_desc":"Copy a slice from an f-table to another f-table at performance","synopsis":["ftslice ifnsource, ifndest [, kstart, kend, kstep ]","ftslice kfnsource, kfndest [, kstart, kend, kstep ]"],"type":"opcode","opname":"ftslice"},{"id":"ftslicei","short_desc":"Copy a slice from an f-table to another f-table at init","synopsis":["ftslicei ifnsource, ifndest [, istart, iend, istep ]"],"type":"opcode","opname":"ftslicei"},{"id":"ftsr","short_desc":"Returns the sampling-rate of a stored function table.","synopsis":["ftsr(x) (init-rate args only)"],"type":"opcode","opname":"ftsr"},{"id":"gain","short_desc":"Adjusts the amplitude audio signal according to a root-mean-square value.","synopsis":["ares gain asig, krms [, ihp] [, iskip]"],"type":"opcode","opname":"gain"},{"id":"gainslider","short_desc":"An implementation of a logarithmic gain curve which is similar to the gainslider~ object from Cycling 74 Max \/ MSP.","synopsis":["kout gainslider kindex"],"type":"opcode","opname":"gainslider"},{"id":"gauss","short_desc":"Gaussian distribution random number generator.","synopsis":["ares gauss krange","ires gauss irange","kres gauss krange","ares gauss kmean, ksdev","ires gauss imean, isdev","kres gauss kmean, ksdev"],"type":"opcode","opname":"gauss"},{"id":"gaussi","short_desc":"Gaussian distribution random number generator with interpolation.","synopsis":["ares gaussi krange, xamp, xcps","ires gaussi krange, xamp, xcps","kres gaussi krange, xamp, xcps"],"type":"opcode","opname":"gaussi"},{"id":"gausstrig","short_desc":"Random impulses around a certain frequency.","synopsis":["ares gausstrig kamp, kcps, kdev [, imode] [, ifrst1]","kres gausstrig kamp, kcps, kdev [, imode] [, ifrst1]"],"type":"opcode","opname":"gausstrig"},{"id":"gbuzz","short_desc":"Output is a set of harmonically related cosine partials.","synopsis":["ares gbuzz xamp, xcps, knh, klh, kmul, ifn [, iphs]"],"type":"opcode","opname":"gbuzz"},{"id":"genarray","short_desc":"Generate a vector with an arithmetic sequence.","synopsis":["karray genarray kstart, kens[, inc]","iarray genarray istart, iens[, inc]"],"type":"opcode","opname":"genarray"},{"id":"genarray_i","short_desc":"Generate a vector with an arithmetic sequence.","synopsis":["karray genarray_i istart, iend [,inc]"],"type":"opcode","opname":"genarray_i"},{"id":"gendy","short_desc":"Dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis.","synopsis":["ares gendy kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl [, initcps] [, knum]","kres gendy kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl [, initcps] [, knum]"],"type":"opcode","opname":"gendy"},{"id":"gendyc","short_desc":"Dynamic stochastic approach to waveform synthesis using cubic interpolation.","synopsis":["ares gendyc kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl [, initcps] [, knum]","kres gendyc kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl [, initcps] [, knum]"],"type":"opcode","opname":"gendyc"},{"id":"gendyx","short_desc":"Variation of the dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis.","synopsis":["ares gendyx kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]","kres gendyx kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]"],"type":"opcode","opname":"gendyx"},{"id":"getcfg","short_desc":"Return Csound settings.","synopsis":["Svalue getcfg iopt"],"type":"opcode","opname":"getcfg"},{"id":"getcol","short_desc":"Gets a given column from a 2-dimensional array as a vector.","synopsis":["i\/kout[] getcoli\/kin[],i\/kcol"],"type":"opcode","opname":"getcol"},{"id":"getftargs","short_desc":"Fill a string variable with the arguments used to create a function table at k-rate.","synopsis":["Sdst getftargs iftno, ktrig"],"type":"opcode","opname":"getftargs"},{"id":"getrow","short_desc":"Gets a given row from a 2-dimensional array as a vector.","synopsis":["i\/kout[] getrowi\/kin[],i\/krow"],"type":"opcode","opname":"getrow"},{"id":"getseed","short_desc":"Reads the global seed value.","synopsis":["ians getseed","kans getseed"],"type":"opcode","opname":"getseed"},{"id":"gogobel","short_desc":"Audio output is a tone related to the striking of a cow bell or similar.","synopsis":["ares gogobel kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivfn"],"type":"opcode","opname":"gogobel"},{"id":"goto","short_desc":"Transfer control on every pass.","synopsis":["goto label"],"type":"opcode","opname":"goto"},{"id":"grain","short_desc":"Generates granular synthesis textures.","synopsis":["ares grain xamp, xpitch, xdens, kampoff, kpitchoff, kgdur, igfn, iwfn, imgdur [, igrnd]"],"type":"opcode","opname":"grain"},{"id":"grain2","short_desc":"Easy-to-use granular synthesis texture generator.","synopsis":["ares grain2 kcps, kfmd, kgdur, iovrlp, kfn, iwfn [, irpow] [, iseed] [, imode]"],"type":"opcode","opname":"grain2"},{"id":"grain3","short_desc":"Generate granular synthesis textures with more user control.","synopsis":["ares grain3 kcps, kphs, kfmd, kpmd, kgdur, kdens, imaxovr, kfn, iwfn, kfrpow, kprpow [, iseed] [, imode]"],"type":"opcode","opname":"grain3"},{"id":"granule","short_desc":"A more complex granular synthesis texture generator.","synopsis":["ares granule xamp, ivoice, iratio, imode, ithd, ifn, ipshift, igskip, igskip_os, ilength, kgap, igap_os, kgsize, igsize_os, iatt, idec [, iseed] [, ipitch1] [, ipitch2] [, ipitch3] [, ipitch4] [, ifnenv]"],"type":"opcode","opname":"granule"},{"id":"greaterequal","short_desc":"Determines if one value is greater than or equal to another.","synopsis":["(a >= b ? v1 : v2)"],"type":"opcode","opname":">="},{"id":"greaterthan","short_desc":"Determines if one value is greater than another.","synopsis":["(a > b ? v1 : v2)"],"type":"opcode","opname":">"},{"id":"gtadsr","short_desc":"A gated linear attack-decay-sustain with exponential release.","synopsis":["ares gtadsr asig, katt, kdec, ksus, krel, kgate","xres gtadsr kamp, katt, kdec, ksus, krel, kgate"],"type":"opcode","opname":"gtadsr"},{"id":"gtf","short_desc":"Apply a gammatone filter to an audio signal.","synopsis":["aout gtf ain, kfreq, idecay[, iorder, iphase]"],"type":"opcode","opname":"gtf"},{"id":"guiro","short_desc":"Semi-physical model of a guiro sound.","synopsis":["ares guiro kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1]"],"type":"opcode","opname":"guiro"},{"id":"harmon","short_desc":"Analyze an audio input and generate harmonizing voices in synchrony.","synopsis":["ares harmon asig, kestfrq, kmaxvar, kgenfreq1, kgenfreq2, imode, iminfrq, iprd"],"type":"opcode","opname":"harmon"},{"id":"harmon2","short_desc":"Analyze an audio input and generate harmonizing voices in synchrony with formants preserved.","synopsis":["ares harmon2 asig, koct, kfrq1, kfrq2, icpsmode, ilowest[, ipolarity]","ares harmon3 asig, koct, kfrq1, kfrq2, kfrq3, icpsmode, ilowest[, ipolarity]","ares harmon4 asig, koct, kfrq1, kfrq2, kfrq3, kfrq4, icpsmode, ilowest[, ipolarity]"],"type":"opcode","opname":"harmon2"},{"id":"hdf5read","short_desc":"Read signals and arrays from an hdf5 file.","synopsis":["xout1[, xout2, xout3, ..., xoutN] hdf5read ifilename, ivariablename1[, ivariablename2, ivariablename3, ..., ivariablenameN]"],"type":"opcode","opname":"hdf5read"},{"id":"hdf5write","short_desc":"Write signals and arrays to an hdf5 file.","synopsis":["hdf5write ifilename, xout1[, xout2, xout3, ..., xoutN]"],"type":"opcode","opname":"hdf5write"},{"id":"hilbert","short_desc":"A Hilbert transformer.","synopsis":["ar1, ar2 hilbert asig"],"type":"opcode","opname":"hilbert"},{"id":"hilbert2","short_desc":"A Hilbert transformer.","synopsis":["ar1, ar2 hilbert2 asig, ifftsize, ihopsize"],"type":"opcode","opname":"hilbert2"},{"id":"hrtfearly","short_desc":"Generates 3D binaural audio with high-fidelity early reflections in a parametric room using a Phase Truncation algorithm.","synopsis":["aleft, aright, irt60low, irt60high, imfp hrtfearly asrc, ksrcx, ksrcy, ksrcz, klstnrx, klstnry, klstnrz, ifilel, ifiler, idefroom [,ifade, isr, iorder, ithreed, kheadrot, iroomx, iroomy, iroomz, iwallhigh, iwalllow, iwallgain1, iwallgain2, iwallgain3, ifloorhigh, ifloorlow, ifloorgain1, ifloorgain2, ifloorgain3, iceilinghigh, iceilinglow, iceilinggain1, iceilinggain2, iceilinggain3]"],"type":"opcode","opname":"hrtfearly"},{"id":"hrtfer","short_desc":"Creates 3D audio for two speakers.","synopsis":["aleft, aright hrtfer asig, kaz, kelev, HRTFcompact"],"type":"opcode","opname":"hrtfer"},{"id":"hrtfmove","short_desc":"Generates dynamic 3d binaural audio for headphones using magnitude interpolation and phase truncation.","synopsis":["aleft, aright hrtfmove asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]"],"type":"opcode","opname":"hrtfmove"},{"id":"hrtfmove2","short_desc":"Generates dynamic 3d binaural audio for headphones using a Woodworth based spherical head model with improved low frequency phase accuracy.","synopsis":["aleft, aright hrtfmove2 asrc, kAz, kElev, ifilel, ifiler [,ioverlap, iradius, isr]"],"type":"opcode","opname":"hrtfmove2"},{"id":"hrtfreverb","short_desc":"A binaural, dynamic FDN based diffuse-field reverberator. The opcode works independently as an efficient, flexible reverberator.","synopsis":["aleft, aright, idel hrtfreverb asrc, ilowrt60, ihighrt60, ifilel, ifiler [,isr, imfp, iorder]"],"type":"opcode","opname":"hrtfreverb"},{"id":"hrtfstat","short_desc":"Generates static 3d binaural audio for headphones using a Woodworth based spherical head model with improved low frequency phase accuracy.","synopsis":[" aleft, aright hrtfstat asrc, iAz, iElev, ifilel, ifiler [,iradius, isr] "],"type":"opcode","opname":"hrtfstat"},{"id":"hsboscil","short_desc":"An oscillator which takes tonality and brightness as arguments.","synopsis":["ares hsboscil kamp, ktone, kbrite, ibasfreq, iwfn, ioctfn [, ioctcnt] [, iphs]"],"type":"opcode","opname":"hsboscil"},{"id":"hvs1","short_desc":"Allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","synopsis":["hvs1 kx, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]"],"type":"opcode","opname":"hvs1"},{"id":"hvs2","short_desc":"Allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","synopsis":["hvs2 kx, ky, inumParms, inumPointsX, inumPointsY, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]"],"type":"opcode","opname":"hvs2"},{"id":"hvs3","short_desc":"Allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","synopsis":["hvs3 kx, ky, kz, inumParms, inumPointsX, inumPointsY, inumPointsZ, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]"],"type":"opcode","opname":"hvs3"},{"id":"hypot","short_desc":"Euclidean distance function.","synopsis":["ires[] hypot iarg1[], iarg2[] ","kres[] hypot karg1[], karg2[]"],"type":"opcode","opname":"hypot"},{"id":"ibetarand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ibetarand"},{"id":"ibexprnd","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ibexprnd"},{"id":"icauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"icauchy"},{"id":"ictrl14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ictrl14"},{"id":"ictrl21","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ictrl21"},{"id":"ictrl7","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ictrl7"},{"id":"iexprand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"iexprand"},{"id":"if","short_desc":"Branches conditionally at initialization or during performance time.","synopsis":["if ia R ib igoto label","if ka R kb kgoto label","if xa R xb goto label","if xa R xb then"],"type":"opcode","opname":"if"},{"id":"ifdef","short_desc":"Conditional reading of code.","synopsis":["#ifdef NAME","....","#else\u00a0","....","#end\u00a0"],"type":"opcode","opname":"#ifdef"},{"id":"fftinv","short_desc":"Complex-to-complex Inverse Fast Fourier Transform.","synopsis":["kout[] fftinv kin[]"],"type":"opcode","opname":"fftinv"},{"id":"ifndef","short_desc":"Conditional reading of code.","synopsis":["#ifndef NAME","....","#else\u00a0","....","#end\u00a0"],"type":"opcode","opname":"#ifndef"},{"id":"igauss","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"igauss"},{"id":"igoto","short_desc":"Transfer control during the i-time pass.","synopsis":["igoto label"],"type":"opcode","opname":"igoto"},{"id":"ihold","short_desc":"Creates a held note.","synopsis":["ihold"],"type":"opcode","opname":"ihold"},{"id":"ilinrand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ilinrand"},{"id":"imagecreate","short_desc":"Create an empty image of a given size.","synopsis":["iimagenum imagecreate iwidth, iheight"],"type":"opcode","opname":"imagecreate"},{"id":"imagefree","short_desc":"Frees memory allocated for a previously loaded or created image.","synopsis":["imagefree iimagenum"],"type":"opcode","opname":"imagefree"},{"id":"imagegetpixel","short_desc":"Return the RGB pixel values of a previously opened or created image.","synopsis":["ared, agreen, ablue imagegetpixel iimagenum, ax, ay","kred, kgreen, kblue imagegetpixel iimagenum, kx, ky"],"type":"opcode","opname":"imagegetpixel"},{"id":"imageload","short_desc":"Load an image.","synopsis":["iimagenum imageload filename"],"type":"opcode","opname":"imageload"},{"id":"imagesave","short_desc":"Save a previously created image.","synopsis":["imagesave iimagenum, filename"],"type":"opcode","opname":"imagesave"},{"id":"imagesetpixel","short_desc":"Set the RGB value of a pixel inside a previously opened or created image.","synopsis":["imagesetpixel iimagenum, ax, ay, ared, agreen, ablue","imagesetpixel iimagenum, kx, ky, kred, kgreen, kblue"],"type":"opcode","opname":"imagegetpixel"},{"id":"imagesize","short_desc":"Return the width and height of a previously opened or created image.","synopsis":["iwidth, iheight imagesize iimagenum"],"type":"opcode","opname":"imagesize"},{"id":"imidic14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"imidic14"},{"id":"imidic21","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"imidic21"},{"id":"imidic7","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"imidic7"},{"id":"in","short_desc":"Reads mono audio data from an external device or stream.","synopsis":["ar1 in","aarray in"],"type":"opcode","opname":"in"},{"id":"in32","short_desc":"Reads a 32-channel audio signal from an external device or stream.","synopsis":["ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ar32 in32"],"type":"opcode","opname":"in32"},{"id":"inch","short_desc":"Reads from numbered channels in an external audio signal or stream.","synopsis":["ain1[, ...] inch kchan1[,...]"],"type":"opcode","opname":"inch"},{"id":"include","short_desc":"Includes an external file for processing.","synopsis":["#include filename","#includestr filename"],"type":"opcode","opname":"#include"},{"id":"inh","short_desc":"Reads six-channel audio data from an external device or stream.","synopsis":["ar1, ar2, ar3, ar4, ar5, ar6 inh"],"type":"opcode","opname":"inh"},{"id":"init","short_desc":"Puts the value of the i-time expression into a k-, a-rate or t- variable.","synopsis":["ares init iarg","ires init iarg","kres init iarg","ares, ... init iarg, ...","ires, ... init iarg, ...","kres, ... init iarg, ...","tab init isize[, ival]"],"type":"opcode","opname":"init"},{"id":"initc14","short_desc":"Initializes the controllers used to create a 14-bit MIDI value.","synopsis":["initc14 ichan, ictlno1, ictlno2, ivalue"],"type":"opcode","opname":"initc14"},{"id":"initc21","short_desc":"Initializes the controllers used to create a 21-bit MIDI value.","synopsis":["initc21 ichan, ictlno1, ictlno2, ictlno3, ivalue"],"type":"opcode","opname":"initc21"},{"id":"initc7","short_desc":"Initializes the controller used to create a 7-bit MIDI value.","synopsis":["initc7 ichan, ictlno, ivalue"],"type":"opcode","opname":"initc7"},{"id":"inleta","short_desc":"Receives an arate signal into an instrument through a named port.","synopsis":["asignal inleta Sname"],"type":"opcode","opname":"inleta"},{"id":"inletf","short_desc":"Receives an frate signal (fsig) into an instrument from a named port.","synopsis":["fsignal inletf Sname"],"type":"opcode","opname":"inletf"},{"id":"inletk","short_desc":"Receives a krate signal into an instrument from a named port.","synopsis":["ksignal inletk Sname"],"type":"opcode","opname":"inletk"},{"id":"inletkid","short_desc":"Receives a krate signal into an instrument from a named port.","synopsis":["ksignal inletkid Sname, SinstanceID"],"type":"opcode","opname":"inletkid"},{"id":"inletv","short_desc":"Receives an arate array signal into an instrument through a named port.","synopsis":["array inletv Sname"],"type":"opcode","opname":"inletv"},{"id":"ino","short_desc":"Reads eight-channel audio data from an external device or stream.","synopsis":["ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8 ino"],"type":"opcode","opname":"ino"},{"id":"inq","short_desc":"Reads quad audio data from an external device or stream.","synopsis":["ar1, ar2, ar3, a4 inq"],"type":"opcode","opname":"inq"},{"id":"inrg","short_desc":"Allow input from a range of adjacent audio channels from the audio input device","synopsis":["inrg kstart, ain1 [,ain2, ain3, ..., ainN]"],"type":"opcode","opname":"inrg"},{"id":"ins","short_desc":"Reads stereo audio data from an external device or stream.","synopsis":["ar1, ar2 ins"],"type":"opcode","opname":"ins"},{"id":"insglobal","short_desc":"An opcode which can be used to implement a remote orchestra. This opcode will send note events from a source machine to many destinations.","synopsis":["insglobal isource, instrnum [,instrnum...] "],"type":"opcode","opname":"insglobal"},{"id":"insremot","short_desc":"An opcode which can be used to implement a remote orchestra. This opcode will send note events from a source machine to one destination.","synopsis":["insremot idestination, isource, instrnum [,instrnum...] "],"type":"opcode","opname":"insremot"},{"id":"instimek","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"instimek"},{"id":"instimes","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"instimes"},{"id":"instr","short_desc":"Starts an instrument block.","synopsis":["instr i, j, ..."],"type":"opcode","opname":"instr"},{"id":"int","short_desc":"Extracts an integer from a decimal number.","synopsis":["int(x) (init-rate or control-rate; also works at audio rate in Csound5)"],"type":"opcode","opname":"int"},{"id":"integ","short_desc":"Modify a signal by integration.","synopsis":["ares integ asig [, iskip]","kres integ ksig [, iskip]"],"type":"opcode","opname":"integ"},{"id":"interleave","short_desc":"Interleaves arrays into a a single one by placing the input data in alternate positions.","synopsis":["kout[] interleave kin1[], kin2[]"],"type":"opcode","opname":"interleave"},{"id":"interp","short_desc":"Converts a control signal to an audio signal using linear interpolation.","synopsis":["ares interp ksig [, iskip] [, imode] [, ivalue]"],"type":"opcode","opname":"interp"},{"id":"invalue","short_desc":"Reads a k-rate signal from a user-defined channel.","synopsis":["ivalue invalue \"channel name\"","kvalue invalue \"channel name\"","Sname invalue \"channel name\""],"type":"opcode","opname":"invalue"},{"id":"inx","short_desc":"Reads a 16-channel audio signal from an external device or stream.","synopsis":["ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16 inx"],"type":"opcode","opname":"inx"},{"id":"inz","short_desc":"Reads multi-channel audio samples into a ZAK array from an external device or stream.","synopsis":["inz ksig1"],"type":"opcode","opname":"inz"},{"id":"ioff","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioff"},{"id":"ion","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ion"},{"id":"iondur","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"iondur"},{"id":"iondur2","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"iondur2"},{"id":"ioutat","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutat"},{"id":"ioutc","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutc"},{"id":"ioutc14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutc14"},{"id":"ioutpat","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutpat"},{"id":"ioutpb","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutpb"},{"id":"ioutpc","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ioutpc"},{"id":"ipcauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ipcauchy"},{"id":"ipoisson","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ipoisson"},{"id":"ipow","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ipow"},{"id":"is16b14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"is16b14"},{"id":"is32b14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"is32b14"},{"id":"islider16","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"islider16"},{"id":"islider32","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"islider32"},{"id":"islider64","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"islider64"},{"id":"islider8","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"islider8"},{"id":"itablecopy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"itablecopy"},{"id":"itablegpw","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"itablegpw"},{"id":"itablemix","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"itablemix"},{"id":"itablew","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"itablew"},{"id":"itrirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"itrirand"},{"id":"iunirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"iunirand"},{"id":"iweibull","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"iweibull"},{"id":"jacktransport","short_desc":"Start\/stop jack_transport and can optionally relocate the playback head.","synopsis":["jacktransport icommand [, ilocation]"],"type":"opcode","opname":"jacktransport"},{"id":"jitter","short_desc":"Generates a segmented line whose segments are randomly generated.","synopsis":["kout jitter kamp, kcpsMin, kcpsMax"],"type":"opcode","opname":"jitter"},{"id":"jitter2","short_desc":"Generates a segmented line with user-controllable random segments.","synopsis":["kout jitter2 ktotamp, kamp1, kcps1, kamp2, kcps2, kamp3, kcps3[ , iopt]"],"type":"opcode","opname":"jitter2"},{"id":"joystick","short_desc":"Reads data from a joystick controller.","synopsis":["kres joystick kdevice ktab"],"type":"opcode","opname":"joystick"},{"id":"jspline","short_desc":"A jitter-spline generator.","synopsis":["ares jspline xamp, kcpsMin, kcpsMax","kres jspline kamp, kcpsMin, kcpsMax"],"type":"opcode","opname":"jspline"},{"id":"k35_hpf","short_desc":"Zero-delay feedback implementation of Korg35 resonant high-pass filter.","synopsis":["asig K35_hpf ain, xcf, xQ [, inlp, isaturation, istor]"],"type":"opcode","opname":"K35_hpf"},{"id":"k35_lpf","short_desc":"Zero-delay feedback implementation of Korg35 resonant low-pass filter.","synopsis":["asig K35_lpf ain, xcf, xQ [, inlp, isaturation, istor]"],"type":"opcode","opname":"K35_lpf"},{"id":"kbetarand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kbetarand"},{"id":"kbexprnd","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kbexprnd"},{"id":"kcauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kcauchy"},{"id":"kdump","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kdump"},{"id":"kdump2","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kdump2"},{"id":"kdump3","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kdump3"},{"id":"kdump4","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kdump4"},{"id":"kexprand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kexprand"},{"id":"kfilter2","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kfilter2"},{"id":"kgauss","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kgauss"},{"id":"kgoto","short_desc":"Transfer control during the performance-time passes.","synopsis":["kgoto label"],"type":"opcode","opname":"kgoto"},{"id":"klinrand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"klinrand"},{"id":"kon","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kon"},{"id":"koutat","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutat"},{"id":"koutc","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutc"},{"id":"koutc14","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutc14"},{"id":"koutpat","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutpat"},{"id":"koutpb","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutpb"},{"id":"koutpc","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"koutpc"},{"id":"kpcauchy","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kpcauchy"},{"id":"kpoisson","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kpoisson"},{"id":"kpow","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kpow"},{"id":"kr","short_desc":"Sets the control rate.","synopsis":["kr = iarg"],"type":"opcode","opname":"kr"},{"id":"kread","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kread"},{"id":"kread2","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kread2"},{"id":"kread3","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kread3"},{"id":"kread4","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kread4"},{"id":"ksmps","short_desc":"Sets the number of samples in a control period.","synopsis":["ksmps = iarg"],"type":"opcode","opname":"ksmps"},{"id":"ktableseg","short_desc":"Deprecated.","synopsis":["ktableseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]"],"type":"opcode","opname":"ktableseg"},{"id":"ktrirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"ktrirand"},{"id":"kunirand","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kunirand"},{"id":"kweibull","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"kweibull"},{"id":"lag","short_desc":"Exponential Lag","synopsis":["aout lag ain, klagtime [, initialvalue]","kout lag kin, klagtime [, initialvalue]"],"type":"opcode","opname":"lag"},{"id":"lagud","short_desc":"Exponential Lag","synopsis":["aout lagud ain, klagup, klagdown [, initialvalue]","kout lagud kin, klagup, klagdown [, initialvalue]"],"type":"opcode","opname":"lagud"},{"id":"lastcycle","short_desc":"Indicates whether an event is in its last performance cycle.","synopsis":["kflag lastcycle"],"type":"opcode","opname":"lastcycle"},{"id":"lenarray","short_desc":"Evaluates the size or shape length of an array.","synopsis":["ir lenarray karray[, iwhich]","kr lenarray karray[, iwhich]"],"type":"opcode","opname":"lenarray"},{"id":"lessequal","short_desc":"Determines if one value is less than or equal to another.","synopsis":["(a <= b ? v1 : v2)"],"type":"opcode","opname":"<="},{"id":"lessthan","short_desc":"Determines if one value is less than another.","synopsis":["(a < b ? v1 : v2)"],"type":"opcode","opname":"<"},{"id":"lfo","short_desc":"A low frequency oscillator of various shapes.","synopsis":["kres lfo kamp, kcps [, itype]","ares lfo kamp, kcps [, itype]"],"type":"opcode","opname":"lfo"},{"id":"lfsr","short_desc":"Linear Feedback Shift Register (LFSR).","synopsis":["knum lfsr ilen, iprob [, iseed]"],"type":"opcode","opname":"lfsr"},{"id":"limit","short_desc":"Sets the lower and upper limits of the value it processes.","synopsis":["ares limit asig, klow, khigh","ires limit isig, ilow, ihigh","kres limit ksig, klow, khigh","ires[] limit isig[], ilow, ihigh","kres[] limit ksig[], klow, khigh"],"type":"opcode","opname":"limit"},{"id":"limit1","short_desc":"Limiting function","synopsis":["ires[] limit1 iarg","kres[] limit1 karg"],"type":"opcode","opname":"limit1"},{"id":"lincos","short_desc":"Linear to cosine interpolation","synopsis":["ky lincos kx, ky0, ky1 [, kx0, kx1 ]","iy lincos ix, iy0, iy1 [, ix0, ix1 ]"],"type":"opcode","opname":"lincos"},{"id":"line","short_desc":"Trace a straight line between specified points.","synopsis":["ares line ia, idur, ib","kres line ia, idur, ib"],"type":"opcode","opname":"line"},{"id":"linen","short_desc":"Applies a straight line rise and decay pattern to an input amp signal.","synopsis":["ares linen xamp, irise, idur, idec","kres linen kamp, irise, idur, idec"],"type":"opcode","opname":"linen"},{"id":"linenr","short_desc":"The linen opcode extended with a final release segment.","synopsis":["ares linenr xamp, irise, idec, iatdec","kres linenr kamp, irise, idec, iatdec"],"type":"opcode","opname":"linenr"},{"id":"lineto","short_desc":"Generate glissandos starting from a control signal.","synopsis":["kres lineto ksig, ktime"],"type":"opcode","opname":"lineto"},{"id":"linlin","short_desc":"Linear to linear interpolation","synopsis":["ky linlin kx, ky0, ky1 [, kx0, kx1 ]","iy linlin ix, iy0, iy1 [, ix0, ix1 ]","kys[] linlin kxs[], ky0, ky1 [, kx0, kx1 ]","iys[] linlin ixs[], ky0, ky1, [ kx0, kx1 ]","kC[] linlin kx, kA[], kB[] [, kx0, kx1 ]"],"type":"opcode","opname":"linlin"},{"id":"linrand","short_desc":"Linear distribution random number generator (positive values only).","synopsis":["ares linrand krange","ires linrand krange","kres linrand krange"],"type":"opcode","opname":"linrand"},{"id":"linseg","short_desc":"Trace a series of line segments between specified points.","synopsis":["ares linseg ia, idur1, ib [, idur2] [, ic] [...]","kres linseg ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"linseg"},{"id":"linsegb","short_desc":"Trace a series of line segments between specified absolute points.","synopsis":["ares linsegb ia, itim1, ib [, itim2] [, ic] [...]","kres linsegb ia, itim1, ib [, itim2] [, ic] [...]"],"type":"opcode","opname":"linsegb"},{"id":"linsegr","short_desc":"Trace a series of line segments between specified points including a release segment.","synopsis":["ares linsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz","kres linsegr ia, idur1, ib [, idur2] [, ic] [...], irel, iz"],"type":"opcode","opname":"linsegr"},{"id":"liveconv","short_desc":"Partitioned convolution with dynamically reloadable impulse response","synopsis":["ares liveconv ain, ift, iplen, kupdate, kclear"],"type":"opcode","opname":"liveconv"},{"id":"locsend","short_desc":"Distributes the audio signals of a previous locsig opcode.","synopsis":["a1, a2 locsend","a1, a2, a3, a4 locsend"],"type":"opcode","opname":"locsend"},{"id":"locsig","short_desc":"Takes an input signal and distributes between 2 or 4 channels.","synopsis":["a1, a2 locsig asig, kdegree, kdistance, kreverbsend","a1, a2, a3, a4 locsig asig, kdegree, kdistance, kreverbsend"],"type":"opcode","opname":"locsig"},{"id":"log","short_desc":"Returns a natural log of a number, or an array (with optional arbitrary base).","synopsis":["log(x) (no rate restriction)","log(k\/i[]) (k- or i-arrays )","kout[]log kin[],ibas"],"type":"opcode","opname":"log"},{"id":"log10","short_desc":"Returns a base 10 log.","synopsis":["log10(x) (no rate restriction)","log10(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"log10"},{"id":"log2","short_desc":"Returns a base 2 log.","synopsis":["log2(x) (no rate restriction)","log2(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"log2"},{"id":"logbtwo","short_desc":"Performs a logarithmic base two calculation.","synopsis":["logbtwo(x) (init-rate or control-rate args only)"],"type":"opcode","opname":"logbtwo"},{"id":"logcurve","short_desc":"This opcode implements a formula for generating a normalised logarithmic curve in range 0 - 1. It is based on the Max \/ MSP work of Eric Singer (c) 1994.","synopsis":["kout logcurve kindex, ksteepness"],"type":"opcode","opname":"logcurve"},{"id":"loop_ge","short_desc":"Looping constructions.","synopsis":["loop_ge indx, idecr, imin, label","loop_ge kndx, kdecr, kmin, label"],"type":"opcode","opname":"loop_ge"},{"id":"loop_gt","short_desc":"Looping constructions.","synopsis":["loop_gt indx, idecr, imin, label","loop_gt kndx, kdecr, kmin, label"],"type":"opcode","opname":"loop_gt"},{"id":"loop_le","short_desc":"Looping constructions.","synopsis":["loop_le indx, incr, imax, label","loop_le kndx, kncr, kmax, label"],"type":"opcode","opname":"loop_le"},{"id":"loop_lt","short_desc":"Looping constructions.","synopsis":["loop_lt indx, incr, imax, label","loop_lt kndx, kncr, kmax, label"],"type":"opcode","opname":"loop_lt"},{"id":"loopseg","short_desc":"Generate control signal consisting of linear segments delimited by two or more specified points.","synopsis":["ksig loopseg kfreq, ktrig, iphase, kvalue0, ktime0 [, kvalue1] [, ktime1] [, kvalue2] [, ktime2][...]"],"type":"opcode","opname":"loopseg"},{"id":"loopsegp","short_desc":"Control signals based on linear segments.","synopsis":["ksig loopsegp kphase, kvalue0, kdur0, kvalue1 [, kdur1, ... , kdurN-1, kvalueN]"],"type":"opcode","opname":"loopsegp"},{"id":"looptseg","short_desc":"Generate control signal consisting of exponential or linear segments delimited by two or more specified points.","synopsis":["ksig looptseg kfreq, ktrig, iphase, kvalue0, ktype0, ktime0, [, kvalue1] [,ktype1] [, ktime1] [, kvalue2] [,ktype2] [, ktime2] [...] [, kvalueN] [,ktypeN] [, ktimeN]"],"type":"opcode","opname":"looptseg"},{"id":"loopxseg","short_desc":"Generate control signal consisting of exponential segments delimited by two or more specified points.","synopsis":["ksig loopxseg kfreq, ktrig, iphase, kvalue0, ktime0 [, kvalue1] [, ktime1] [, kvalue2] [, ktime2] [...]"],"type":"opcode","opname":"loopxseg"},{"id":"lorenz","short_desc":"Implements the Lorenz system of equations.","synopsis":["ax, ay, az lorenz ksv, krv, kbv, kh, ix, iy, iz, iskip [, iskipinit]"],"type":"opcode","opname":"lorenz"},{"id":"lorismorph","short_desc":"Morphs two stored sets of bandwidth-enhanced partials and stores a new set of partials representing the morphed sound. The morph is performed by linearly interpolating the parameter envelopes (frequency, amplitude, and bandwidth, or noisiness) of the bandwidth-enhanced partials according to control-rate frequency, amplitude, and bandwidth morphing functions.","synopsis":["lorismorph isrcidx, itgtidx, istoreidx, kfreqmorphenv, kampmorphenv, kbwmorphenv"],"type":"opcode","opname":"lorismorph"},{"id":"lorisplay","short_desc":"renders a stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software, applying control-rate frequency, amplitude, and bandwidth scaling envelopes.","synopsis":["ar lorisplay ireadidx, kfreqenv, kampenv, kbwenv"],"type":"opcode","opname":"lorisplay"},{"id":"lorisread","short_desc":"Imports a set of bandwidth-enhanced partials from a SDIF-format data file, applying control-rate frequency, amplitude, and bandwidth scaling envelopes, and stores the modified partials in memory.","synopsis":["lorisread ktimpnt, ifilcod, istoreidx, kfreqenv, kampenv, kbwenv[, ifadetime]"],"type":"opcode","opname":"lorisread"},{"id":"loscil","short_desc":"Read sampled sound from a table.","synopsis":["ar1 [,ar2] loscil xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]","aph, ar1 [,ar2] loscilphs xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]"],"type":"opcode","opname":"loscil"},{"id":"loscil3","short_desc":"Read sampled sound from a table using cubic interpolation. A version that outputs the exact table position (phase) corresponding to the output sample is provided as an alternative opcode.","synopsis":["ar1 [,ar2] loscil3 xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]","aph, ar1 [,ar2] loscil3phs xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] [, imod2] [, ibeg2] [, iend2]"],"type":"opcode","opname":"loscil3"},{"id":"loscilx","short_desc":"Read multi-channel sampled sound from a table.","synopsis":["ar1 [, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16] loscilx xamp, kcps, ifn [, iwsize, ibas, istrt, imod, ibeg, iend]","ar[] loscilx xamp, kcps, ifn [, iwsize, ibas, istrt, imod, ibeg, iend]"],"type":"opcode","opname":"loscilx"},{"id":"lowpass2","short_desc":"A resonant lowpass filter.","synopsis":["ares lowpass2 asig, kcf, kq [, iskip]"],"type":"opcode","opname":"lowpass2"},{"id":"lowres","short_desc":"Another resonant lowpass filter.","synopsis":["ares lowres asig, xcutoff, xresonance [, iskip]"],"type":"opcode","opname":"lowres"},{"id":"lowresx","short_desc":"Simulates layers of serially connected resonant lowpass filters.","synopsis":["ares lowresx asig, xcutoff, xresonance [, inumlayer] [, iskip]"],"type":"opcode","opname":"lowresx"},{"id":"lpcanal","short_desc":"Streaming linear prediction analysis.","synopsis":["kCoef[],krms,kerr,kcps lpcanal asrc, kflg, kprd, isiz, iord[,iwin] ","kCoef[],krms,kerr,kcps lpcanal koff, kflg, ifn, isiz, iord[,iwin] ","iCoef[],irms,ierr,icps lpcanal ioff, iflg, ifn, isiz, iord[,iwin] "],"type":"opcode","opname":"lpcanal"},{"id":"lpcfilter","short_desc":"Streaming linear prediction all-pole filter.","synopsis":["ares lpcfilter asig, asrc, kflg, kprd, isiz, iord[,iwin] ","ares lpcfilter asig, koff, kflg, ifn, isiz, iord[,iwin] "],"type":"opcode","opname":"lpcfilter"},{"id":"lpf18","short_desc":"A 3-pole sweepable resonant lowpass filter.","synopsis":["ares lpf18 asig, xfco, xres, xdist [, iskip]"],"type":"opcode","opname":"lpf18"},{"id":"lpfreson","short_desc":"Resynthesises a signal from the data passed internally by a previous lpread, applying formant shifting.","synopsis":["ares lpfreson asig, kfrqratio"],"type":"opcode","opname":"lpfreson"},{"id":"lphasor","short_desc":"Generates a table index for sample playback","synopsis":["ares lphasor xtrns [, ilps] [, ilpe] [, imode] [, istrt] [, istor]"],"type":"opcode","opname":"lphasor"},{"id":"lpinterp","short_desc":"Computes a new set of poles from the interpolation between two analysis.","synopsis":["lpinterp islot1, islot2, kmix"],"type":"opcode","opname":"lpinterp"},{"id":"lposcil","short_desc":"Read sampled sound from a table with looping and high precision.","synopsis":["ares lposcil kamp, kfreqratio, kloop, kend, ifn [, iphs]"],"type":"opcode","opname":"lposcil"},{"id":"lposcil3","short_desc":"Read sampled sound from a table with high precision and cubic interpolation.","synopsis":["ares lposcil3 kamp, kfreqratio, kloop, kend, ifn [, iphs]"],"type":"opcode","opname":"lposcil3"},{"id":"lposcila","short_desc":"Read sampled sound from a table with looping and high precision.","synopsis":["ar lposcila aamp, kfreqratio, kloop, kend, ift [,iphs] "],"type":"opcode","opname":"lposcila"},{"id":"lposcilsa","short_desc":"Read stereo sampled sound from a table with looping and high precision.","synopsis":["ar1, ar2 lposcilsa aamp, kfreqratio, kloop, kend, ift [,iphs] "],"type":"opcode","opname":"lposcilsa"},{"id":"lposcilsa2","short_desc":"Read stereo sampled sound from a table with looping and high precision.","synopsis":["ar1, ar2 lposcilsa2 aamp, kfreqratio, kloop, kend, ift [,iphs] "],"type":"opcode","opname":"lposcilsa2"},{"id":"lpread","short_desc":"Reads a control file of time-ordered information frames.","synopsis":["krmsr, krmso, kerr, kcps lpread ktimpnt, ifilcod [, inpoles] [, ifrmrate]"],"type":"opcode","opname":"lpread"},{"id":"lpreson","short_desc":"Resynthesises a signal from the data passed internally by a previous lpread.","synopsis":["ares lpreson asig"],"type":"opcode","opname":"lpreson"},{"id":"lpshold","short_desc":"Generate control signal consisting of held segments.","synopsis":["ksig lpshold kfreq, ktrig, iphase, kvalue0, ktime0 [, kvalue1] [, ktime1] [, kvalue2] [, ktime2] [...]"],"type":"opcode","opname":"lpshold"},{"id":"lpsholdp","short_desc":"Control signals based on held segments.","synopsis":["ksig lpsholdp kphase, kvalue0, ktime0 [, kvalue1] [, ktime1] [, kvalue2] [, ktime2] [...]"],"type":"opcode","opname":"lpsholdp"},{"id":"lpslot","short_desc":"Selects the slot to be use by further lp opcodes.","synopsis":["lpslot islot"],"type":"opcode","opname":"lpslot"},{"id":"lufs","short_desc":"Momentary, Integrated and Short-Term Loudness meter in LUFS","synopsis":["kmom, kint, kshort lufs kreset, ain1 [, ain2]"],"type":"opcode","opname":"lufs"},{"id":"mac","short_desc":"Multiplies and accumulates a- and k-rate signals.","synopsis":["ares mac ksig1, asig1 [, ksig2] [, asig2] [, ksig3] [, asig3] [...]"],"type":"opcode","opname":"mac"},{"id":"maca","short_desc":"Multiply and accumulate a-rate signals only.","synopsis":["ares maca asig1 , asig2 [, asig3] [, asig4] [, asig5] [...]"],"type":"opcode","opname":"maca"},{"id":"madsr","short_desc":"Calculates the classical ADSR envelope using the linsegr mechanism.","synopsis":["ares madsr iatt, idec, islev, irel [, idel] [, ireltim]","kres madsr iatt, idec, islev, irel [, idel] [, ireltim]"],"type":"opcode","opname":"madsr"},{"id":"mags","short_desc":"Obtains the magnitudes of a complex-number array","synopsis":["kout[] mags kin[]"],"type":"opcode","opname":"mags"},{"id":"mandel","short_desc":"Mandelbrot set","synopsis":["kiter, koutrig mandel ktrig, kx, ky, kmaxIter"],"type":"opcode","opname":"mandel"},{"id":"mandol","short_desc":"An emulation of a mandolin.","synopsis":["ares mandol kamp, kfreq, kpluck, kdetune, kgain, ksize [, ifn] [, iminfreq]"],"type":"opcode","opname":"mandol"},{"id":"maparray","short_desc":"Apply a function to every element of a vector.","synopsis":["karray maparray kinarray, String","karray maparray_i kinarray, String"],"type":"opcode","opname":"maparray"},{"id":"marimba","short_desc":"Physical model related to the striking of a wooden block.","synopsis":["ares marimba kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec [, idoubles] [, itriples]"],"type":"opcode","opname":"marimba"},{"id":"massign","short_desc":"Assigns a MIDI channel number to a Csound instrument.","synopsis":["massign ichnl, insnum[, ireset]","massign ichnl, \"insname\"[, ireset]"],"type":"opcode","opname":"massign"},{"id":"max","short_desc":"Produces a signal that is the maximum of any number of input signals.","synopsis":["amax max ain1, ain2 [, ain3] [, ain4] [...]","kmax max kin1, kin2 [, kin3] [, kin4] [...]","imax max iin1, iin2 [, iin3] [, iin4] [...]"],"type":"opcode","opname":"max"},{"id":"max_k","short_desc":"Local maximum (or minimum) value of an incoming asig signal","synopsis":["knumkout max_k asig, ktrig, itype"],"type":"opcode","opname":"max_k"},{"id":"maxabs","short_desc":"Produces a signal that is the maximum of the absolute values of any number of input signals.","synopsis":["amax maxabs ain1, ain2 [, ain3] [, ain4] [...]","kmax maxabs kin1, kin2 [, kin3] [, kin4] [...]"],"type":"opcode","opname":"maxabs"},{"id":"maxabsaccum","short_desc":"Accumulates the maximum of the absolute values of audio signals.","synopsis":["maxabsaccum aAccumulator, aInput"],"type":"opcode","opname":"maxabsaccum"},{"id":"maxaccum","short_desc":"Accumulates the maximum value of audio signals.","synopsis":["maxaccum aAccumulator, aInput"],"type":"opcode","opname":"maxaccum"},{"id":"maxalloc","short_desc":"Limits the number of allocations of an instrument.","synopsis":["maxalloc insnum, icount","maxalloc Sinsname, icount"],"type":"opcode","opname":"maxalloc"},{"id":"maxarray","short_desc":"returns the maximum value in an array.","synopsis":["kmax [,kindx] maxarray karray"],"type":"opcode","opname":"maxarray"},{"id":"mclock","short_desc":"Sends a MIDI CLOCK message.","synopsis":["mclock ifreq"],"type":"opcode","opname":"mclock"},{"id":"mdelay","short_desc":"A MIDI delay opcode.","synopsis":["mdelay kstatus, kchan, kd1, kd2, kdelay"],"type":"opcode","opname":"mdelay"},{"id":"median","short_desc":"A median filter, a variant FIR lowpass filter.","synopsis":["ares median asig, ksize, imaxsize [, iskip]"],"type":"opcode","opname":"median"},{"id":"mediank","short_desc":"A median filter, a variant FIR lowpass filter.","synopsis":["kres mediank kin, ksize, imaxsize [, iskip]"],"type":"opcode","opname":"mediank"},{"id":"metro","short_desc":"Trigger Metronome","synopsis":["ktrig metro kfreq [, initphase]"],"type":"opcode","opname":"metro"},{"id":"metro2","short_desc":"Trigger Metronome with Swing and Accents","synopsis":["ktrig metro2 kfreq, kswing [, iamp, initphase]"],"type":"opcode","opname":"metro2"},{"id":"metrobpm","short_desc":"Trigger Metronome with optional gate","synopsis":["ktrig metrobpm kfreq [, initphase] [, kgate]"],"type":"opcode","opname":"metrobpm"},{"id":"mfb","short_desc":"Mel scale filterbank for spectral magnitudes.","synopsis":["kout[] mfb kin[],klow,khigh,ibands"],"type":"opcode","opname":"mfb"},{"id":"midglobal","short_desc":"An opcode which can be used to implement a remote midi orchestra. This opcode will broadcast the midi events to all the machines involved in the remote concert.","synopsis":["midglobal isource, instrnum [,instrnum...] "],"type":"opcode","opname":"midglobal"},{"id":"midiarp","short_desc":"Generates arpeggios based on currently held MIDI notes.","synopsis":["kMidiNoteNum, kTrigger midiarp kRate[, kMode]"],"type":"opcode","opname":"midiarp"},{"id":"midic14","short_desc":"Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest midic14 ictlno1, ictlno2, imin, imax [, ifn]","kdest midic14 ictlno1, ictlno2, kmin, kmax [, ifn]"],"type":"opcode","opname":"midic14"},{"id":"midic21","short_desc":"Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest midic21 ictlno1, ictlno2, ictlno3, imin, imax [, ifn]","kdest midic21 ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]"],"type":"opcode","opname":"midic21"},{"id":"midic7","short_desc":"Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.","synopsis":["idest midic7 ictlno, imin, imax [, ifn]","kdest midic7 ictlno, kmin, kmax [, ifn]"],"type":"opcode","opname":"midic7"},{"id":"midichannelaftertouch","short_desc":"Gets a MIDI channel\\'s aftertouch value.","synopsis":["midichannelaftertouch xchannelaftertouch [, ilow] [, ihigh]"],"type":"opcode","opname":"midichannelaftertouch"},{"id":"midichn","short_desc":"Returns the MIDI channel number from which the note was activated.","synopsis":["ichn midichn"],"type":"opcode","opname":"midichn"},{"id":"midicontrolchange","short_desc":"Gets a MIDI control change value.","synopsis":["midicontrolchange xcontroller, xcontrollervalue [, ilow] [, ihigh]"],"type":"opcode","opname":"midicontrolchange"},{"id":"midictrl","short_desc":"Get the current value (0-127) of a specified MIDI controller.","synopsis":["ival midictrl inum [, imin] [, imax]","kval midictrl inum [, imin] [, imax]"],"type":"opcode","opname":"midictrl"},{"id":"mididefault","short_desc":"Changes values, depending on MIDI activation.","synopsis":["mididefault xdefault, xvalue"],"type":"opcode","opname":"mididefault"},{"id":"midifilestatus","short_desc":"Returns the playback status of MIDI file input.","synopsis":["ksig midifilestatus"],"type":"opcode","opname":"midifilestatus"},{"id":"midiin","short_desc":"Returns a generic MIDI message received by the MIDI IN port.","synopsis":["kstatus, kchan, kdata1, kdata2 midiin"],"type":"opcode","opname":"midiin"},{"id":"midinoteoff","short_desc":"Gets a MIDI noteoff value.","synopsis":["midinoteoff xkey, xvelocity"],"type":"opcode","opname":"midinoteoff"},{"id":"midinoteoncps","short_desc":"Gets a MIDI note number as a cycles-per-second frequency.","synopsis":["midinoteoncps xcps, xvelocity"],"type":"opcode","opname":"midinoteoncps"},{"id":"midinoteonkey","short_desc":"Gets a MIDI note number value.","synopsis":["midinoteonkey xkey, xvelocity"],"type":"opcode","opname":"midinoteonkey"},{"id":"midinoteonoct","short_desc":"Gets a MIDI note number value as octave-point-decimal value.","synopsis":["midinoteonoct xoct, xvelocity"],"type":"opcode","opname":"midinoteonoct"},{"id":"midinoteonpch","short_desc":"Gets a MIDI note number as a pitch-class value.","synopsis":["midinoteonpch xpch, xvelocity"],"type":"opcode","opname":"midinoteonpch"},{"id":"midion","short_desc":"Generates MIDI note messages at k-rate.","synopsis":["midion kchn, knum, kvel"],"type":"opcode","opname":"midion"},{"id":"midion2","short_desc":"Sends noteon and noteoff messages to the MIDI OUT port.","synopsis":["midion2 kchn, knum, kvel, ktrig"],"type":"opcode","opname":"midion2"},{"id":"midiout","short_desc":"Sends a generic MIDI message to the MIDI OUT port.","synopsis":["midiout kstatus, kchan, kdata1, kdata2"],"type":"opcode","opname":"midiout"},{"id":"midiout_i","short_desc":"Sends a generic MIDI message to the MIDI OUT port.","synopsis":["midiout_i istatus, ichan, idata1, idata2"],"type":"opcode","opname":"midiout_i"},{"id":"midipitchbend","short_desc":"Gets a MIDI pitchbend value.","synopsis":["midipitchbend xpitchbend [, ilow] [, ihigh]"],"type":"opcode","opname":"midipitchbend"},{"id":"midipolyaftertouch","short_desc":"Gets a MIDI polyphonic aftertouch value.","synopsis":["midipolyaftertouch xpolyaftertouch, xkey [, ilow] [, ihigh]"],"type":"opcode","opname":"midipolyaftertouch"},{"id":"midiprogramchange","short_desc":"Gets a MIDI program change value.","synopsis":["midiprogramchange xprogram"],"type":"opcode","opname":"midiprogramchange"},{"id":"miditempo","short_desc":"Returns the current tempo at k-rate, of either the MIDI file (if available) or the score.","synopsis":["ksig miditempo"],"type":"opcode","opname":"miditempo"},{"id":"midremot","short_desc":"An opcode which can be used to implement a remote midi orchestra. This opcode will send midi events from a source machine to one destination.","synopsis":["midremot idestination, isource, instrnum [,instrnum...] "],"type":"opcode","opname":"midremot"},{"id":"min","short_desc":"Produces a signal that is the minimum of any number of input signals.","synopsis":["amin min ain1, ain2 [, ain3] [, ain4] [...]","kmin min kin1, kin2 [, kin3] [, kin4] [...]","imin min iin1, iin2 [, iin3] [, iin4] [...]"],"type":"opcode","opname":"min"},{"id":"minabs","short_desc":"Produces a signal that is the minimum of the absolute values of any number of input signals.","synopsis":["amin minabs ain1, ain2 [, ain3] [, ain4] [...]","kmin minabs kin1, kin2 [, kin3] [, kin4] [...]"],"type":"opcode","opname":"minabs"},{"id":"minabsaccum","short_desc":"Accumulates the minimum of the absolute values of audio signals.","synopsis":["minabsaccum aAccumulator, aInput"],"type":"opcode","opname":"minabsaccum"},{"id":"minaccum","short_desc":"Accumulates the minimum value of audio signals.","synopsis":["minaccum aAccumulator, aInput"],"type":"opcode","opname":"minaccum"},{"id":"minarray","short_desc":"returns the minimum value in an array.","synopsis":["kmin [,kindx] minarray karray"],"type":"opcode","opname":"minarray"},{"id":"mincer","short_desc":"Phase-locked vocoder processing.","synopsis":["asig mincer atimpt, kamp, kpitch, ktab, klock[,ifftsize,idecim] "],"type":"opcode","opname":"mincer"},{"id":"mirror","short_desc":"Reflects the signal that exceeds the low and high thresholds.","synopsis":["ares mirror asig, klow, khigh","ires mirror isig, ilow, ihigh","kres mirror ksig, klow, khigh"],"type":"opcode","opname":"mirror"},{"id":"MixerClear","short_desc":"Resets all channels of a buss to 0.","synopsis":["MixerClear"],"type":"opcode","opname":"MixerClear"},{"id":"MixerGetLevel","short_desc":"Gets the level of a send to a buss.","synopsis":["kgain MixerGetLevel isend, ibuss"],"type":"opcode","opname":"MixerGetLevel"},{"id":"MixerReceive","short_desc":"Receives an arate signal from a channel of a buss.","synopsis":["asignal MixerReceive ibuss, ichannel"],"type":"opcode","opname":"MixerReceive"},{"id":"MixerSend","short_desc":"Mixes an arate signal into a channel of a buss.","synopsis":["MixerSend asignal, isend, ibuss, ichannel"],"type":"opcode","opname":"MixerSend"},{"id":"MixerSetLevel","short_desc":"Sets the level of a send to a buss.","synopsis":["MixerSetLevel isend, ibuss, kgain"],"type":"opcode","opname":"MixerSetLevel"},{"id":"MixerSetLevel_i","short_desc":"Sets the level of a send to a buss.","synopsis":["MixerSetLevel_i isend, ibuss, igain"],"type":"opcode","opname":"MixerSetLevel_i"},{"id":"mode","short_desc":"A filter that simulates a mass-spring-damper system","synopsis":["aout mode ain, xfreq, xQ [, iskip]"],"type":"opcode","opname":"mode"},{"id":"modmatrix","short_desc":"Modulation matrix opcode with optimizations for sparse matrices.","synopsis":["modmatrix iresfn, isrcmodfn, isrcparmfn, imodscale, inum_mod, inum_parm, kupdate"],"type":"opcode","opname":"modmatrix"},{"id":"modulus","short_desc":"Modulus operator.","synopsis":["a % b (no rate restriction)"],"type":"opcode","opname":"%"},{"id":"monitor","short_desc":"Returns the audio spout frame.","synopsis":["aout1 [,aout2 ... aoutX] monitor","aarra monitor"],"type":"opcode","opname":"monitor"},{"id":"moog","short_desc":"An emulation of a mini-Moog synthesizer.","synopsis":["ares moog kamp, kfreq, kfiltq, kfiltrate, kvibf, kvamp, iafn, iwfn, ivfn"],"type":"opcode","opname":"moog"},{"id":"moogladder","short_desc":"Moog ladder lowpass filter.","synopsis":["asig moogladder ain, kcf, kres[, istor]","asig moogladder ain, acf, kres[, istor]","asig moogladder ain, kcf, ares[, istor]","asig moogladder ain, acf, ares[, istor]"],"type":"opcode","opname":"moogladder"},{"id":"moogladder2","short_desc":"Moog ladder lowpass filter.","synopsis":["asig moogladder2 ain, kcf, kres[, istor]","asig moogladder2 ain, acf, kres[, istor]","asig moogladder2 ain, kcf, ares[, istor]","asig moogladder2 ain, acf, ares[, istor]"],"type":"opcode","opname":"moogladder2"},{"id":"moogvcf","short_desc":"A digital emulation of the Moog diode ladder filter configuration.","synopsis":["ares moogvcf asig, xfco, xres [,iscale, iskip]"],"type":"opcode","opname":"moogvcf"},{"id":"moogvcf2","short_desc":"A digital emulation of the Moog diode ladder filter configuration.","synopsis":["ares moogvcf2 asig, xfco, xres [,iscale, iskip]"],"type":"opcode","opname":"moogvcf2"},{"id":"moscil","short_desc":"Sends a stream of the MIDI notes.","synopsis":["moscil kchn, knum, kvel, kdur, kpause"],"type":"opcode","opname":"moscil"},{"id":"mp3in","short_desc":"Reads mono or stereo audio data from an external MP3 file.","synopsis":["ar1, ar2 mp3in ifilcod[, iskptim, iformat, iskipinit, ibufsize]","ar1 mp3in ifilcod[, iskptim, iformat, iskipinit, ibufsize]"],"type":"opcode","opname":"mp3in"},{"id":"mp3len","short_desc":"Returns the length of an MP3 sound file.","synopsis":["ir mp3len ifilcod"],"type":"opcode","opname":"mp3len"},{"id":"mp3scal","short_desc":"Phase-locked vocoder processing with onset detection\/processing, \\'tempo-scaling\\'.","synopsis":["asig, asig2, ktime mp3scal Sfile, ktimescal, kpitch, kamp[, iskip, ifftsize, idecim, ilock] "],"type":"opcode","opname":"mp3scal"},{"id":"mpulse","short_desc":"Generates a set of impulses.","synopsis":["ares mpulse kamp, kintvl [, ioffset]"],"type":"opcode","opname":"mpulse"},{"id":"mrtmsg","short_desc":"Send system real-time messages to the MIDI OUT port.","synopsis":["mrtmsg imsgtype"],"type":"opcode","opname":"mrtmsg"},{"id":"ms2st","short_desc":"Mid-Side to stereo Conversion.","synopsis":["aleft,aright ms2st as,am,kwidth"],"type":"opcode","opname":"ms2st"},{"id":"mtof","short_desc":"Convert a midi to frequency","synopsis":["ifreq mtof imidi","kfreq mtof kmidi","ifreqs[] mtof imidis[]","kfreqs[] mtof kmidis[]"],"type":"opcode","opname":"mtof"},{"id":"mton","short_desc":"Convert midi note number to string note name","synopsis":["Snote mton kmidi","Snote mton imidi"],"type":"opcode","opname":"mton"},{"id":"multiplies","short_desc":"Multiplication operator.","synopsis":["a * b (no rate restriction)"],"type":"opcode","opname":"*"},{"id":"multitap","short_desc":"Multitap delay line implementation.","synopsis":["ares multitap asig [, itime1, igain1] [, itime2, igain2] [...]"],"type":"opcode","opname":"multitap"},{"id":"mute","short_desc":"Mutes\/unmutes new instances of a given instrument.","synopsis":["mute insnum [, iswitch]","mute \"insname\" [, iswitch]"],"type":"opcode","opname":"mute"},{"id":"mvchpf","short_desc":"Moog voltage-controlled highpass filter emulation.","synopsis":["asig mvchpf ain, xcf[, istor]"],"type":"opcode","opname":"mvchpf"},{"id":"mvclpf1","short_desc":"Moog voltage-controlled lowpass filter emulation.","synopsis":["asig mvclpf1 ain, xcf, xres[,istor]"],"type":"opcode","opname":"mvclpf1"},{"id":"mvclpf2","short_desc":"Moog voltage-controlled lowpass filter emulation.","synopsis":["asig mvclpf2 ain, xcf, xres[, istor]"],"type":"opcode","opname":"mvclpf2"},{"id":"mvclpf3","short_desc":"Moog voltage-controlled lowpass filter emulation.","synopsis":["asig mvclpf3 ain, xcf, xres[, istor]"],"type":"opcode","opname":"mvclpf3"},{"id":"mvclpf4","short_desc":"Moog voltage-controlled lowpass filter emulation.","synopsis":["asig1,asig2,asig3,asig4 mvclpf4 ain, xcf, xres[, istor]"],"type":"opcode","opname":"mvclpf4"},{"id":"mvmfilter","short_desc":"A filter with pronounced resonance and controllable decay time.","synopsis":["aout mvmfilter ain, xfreq, xTau [, iskip]"],"type":"opcode","opname":"mvmfilter"},{"id":"mxadsr","short_desc":"Calculates the classical ADSR envelope using the expsegr mechanism.","synopsis":["ares mxadsr iatt, idec, islev, irel [, idel] [, ireltim]","kres mxadsr iatt, idec, islev, irel [, idel] [, ireltim]"],"type":"opcode","opname":"mxadsr"},{"id":"nchnls","short_desc":"Sets the number of channels of audio output.","synopsis":["nchnls = iarg"],"type":"opcode","opname":"nchnls"},{"id":"nchnls_hw","short_desc":"Returns the number of audio channels in the underlying hardware.","synopsis":["idacc,iadcc nchnls_hw"],"type":"opcode","opname":"nchnls_hw"},{"id":"nchnls_i","short_desc":"Sets the number of channels of audio input.","synopsis":["nchnls_i = iarg"],"type":"opcode","opname":"nchnls_i"},{"id":"nestedap","short_desc":"Three different nested all-pass filters.","synopsis":["ares nestedap asig, imode, imaxdel, idel1, igain1 [, idel2] [, igain2] [, idel3] [, igain3] [, istor]"],"type":"opcode","opname":"nestedap"},{"id":"nlfilt","short_desc":"A filter with a non-linear effect.","synopsis":["ares nlfilt ain, ka, kb, kd, kC, kL"],"type":"opcode","opname":"nlfilt"},{"id":"nlfilt2","short_desc":"A filter with a non-linear effect and blowup protection.","synopsis":["ares nlfilt2 ain, ka, kb, kd, kC, kL"],"type":"opcode","opname":"nlfilt2"},{"id":"noise","short_desc":"A white noise generator with an IIR lowpass filter.","synopsis":["ares noise xamp, kbeta"],"type":"opcode","opname":"noise"},{"id":"noteoff","short_desc":"Send a noteoff message to the MIDI OUT port.","synopsis":["noteoff ichn, inum, ivel"],"type":"opcode","opname":"noteoff"},{"id":"noteon","short_desc":"Send a noteon message to the MIDI OUT port.","synopsis":["noteon ichn, inum, ivel"],"type":"opcode","opname":"noteon"},{"id":"noteondur","short_desc":"Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.","synopsis":["noteondur ichn, inum, ivel, idur"],"type":"opcode","opname":"noteondur"},{"id":"noteondur2","short_desc":"Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.","synopsis":["noteondur2 ichn, inum, ivel, idur"],"type":"opcode","opname":"noteondur2"},{"id":"notequal","short_desc":"Determines if one value is not equal to another.","synopsis":["(a != b ? v1 : v2)"],"type":"opcode","opname":"!="},{"id":"notnum","short_desc":"Get a note number from a MIDI event.","synopsis":["ival notnum"],"type":"opcode","opname":"notnum"},{"id":"nreverb","short_desc":"A reverberator consisting of 6 parallel comb-lowpass filters.","synopsis":["ares nreverb asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] [, inumAlpas] [, ifnAlpas]"],"type":"opcode","opname":"nreverb"},{"id":"nrpn","short_desc":"Sends a Non-Registered Parameter Number to the MIDI OUT port.","synopsis":["nrpn kchan, kparmnum, kparmvalue"],"type":"opcode","opname":"nrpn"},{"id":"nsamp","short_desc":"Returns the number of samples loaded into a stored function table number.","synopsis":["nsamp(x) (init-rate args only)"],"type":"opcode","opname":"nsamp"},{"id":"nstance","short_desc":"Schedules a new instrument instance, storing the instance handle in a variable.","synopsis":["iHandle nstance insnum, iwhen, idur [, ip4] [, ip5] [...]","iHandle nstance \"insname\", iwhen, idur [, ip4] [, ip5] [...]"],"type":"opcode","opname":"nstance"},{"id":"nstrnum","short_desc":"Returns the number of a named instrument.","synopsis":["insno nstrnum \"name\""],"type":"opcode","opname":"nstrnum"},{"id":"nstrstr","short_desc":"Returns the string of a named instr from its number.","synopsis":["Sname nstrstr insno","Sname nstrstr knsno"],"type":"opcode","opname":"nstrstr"},{"id":"ntof","short_desc":"Convert note name to frequency","synopsis":["kfreq ntof Snote","ifreq ntof Snote"],"type":"opcode","opname":"ntof"},{"id":"ntom","short_desc":"Convert note name to midi note number","synopsis":["kmidi ntom Snote","imidi ntom Snote"],"type":"opcode","opname":"ntom"},{"id":"ntrpol","short_desc":"Calculates the weighted mean value of two input signals.","synopsis":["ares ntrpol asig1, asig2, kpoint [, imin] [, imax]","ires ntrpol isig1, isig2, ipoint [, imin] [, imax]","kres ntrpol ksig1, ksig2, kpoint [, imin] [, imax]"],"type":"opcode","opname":"ntrpol"},{"id":"octave","short_desc":"Calculates a factor to raise\/lower a frequency by a given amount of octaves.","synopsis":["octave(x)"],"type":"opcode","opname":"octave"},{"id":"octcps","short_desc":"Converts a cycles-per-second value to octave-point-decimal.","synopsis":["octcps (cps) (init- or control-rate args only)"],"type":"opcode","opname":"octcps"},{"id":"octmidi","short_desc":"Get the note number, in octave-point-decimal units, of the current MIDI event.","synopsis":["ioct octmidi"],"type":"opcode","opname":"octmidi"},{"id":"octmidib","short_desc":"Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal.","synopsis":["ioct octmidib [irange]","koct octmidib [irange]"],"type":"opcode","opname":"octmidib"},{"id":"octmidinn","short_desc":"Converts a Midi note number value to octave-point-decimal.","synopsis":["octmidinn (MidiNoteNumber) (init- or control-rate args only)"],"type":"opcode","opname":"octmidinn"},{"id":"octpch","short_desc":"Converts a pitch-class value to octave-point-decimal.","synopsis":["octpch (pch) (init- or control-rate args only)"],"type":"opcode","opname":"octpch"},{"id":"olabuffer","short_desc":"Sum overlapping frames of audio as k-rate arrays and read as an audio signal","synopsis":["aout olabuffer kin, ioverlap"],"type":"opcode","opname":"olabuffer"},{"id":"opa","short_desc":"Converts a k-rate parameter to an a-rate value with interpolation.","synopsis":["a(x) (control-rate args only)"],"type":"opcode","opname":"a"},{"id":"opand","short_desc":"Logical AND operator.","synopsis":["a && b (logical AND; not audio-rate)"],"type":"opcode","opname":"&&"},{"id":"opbitand","short_desc":"Bitwise AND operator.","synopsis":["a & b (bitwise AND)"],"type":"opcode","opname":"&"},{"id":"opbitnot","short_desc":"Bitwise NOT operator.","synopsis":["~ a (bitwise NOT)"],"type":"opcode","opname":"\u00ac"},{"id":"opbitor","short_desc":"Bitwise OR operator.","synopsis":["a || b (bitwise OR)"],"type":"opcode","opname":"||"},{"id":"opbitshl","short_desc":"Bitshift left operator.","synopsis":["a << b (bitshift left)"],"type":"opcode","opname":"\u00ac"},{"id":"opbitshr","short_desc":"Bitshift right operator.","synopsis":["a >> b (bitshift left)"],"type":"opcode","opname":"\u00ac"},{"id":"opcode","short_desc":"Defines the start of user-defined opcode block.","synopsis":["opcode name, outtypes, intypes"],"type":"opcode","opname":"opcode"},{"id":"opi","short_desc":"Returns an init-type equivalent of a k-rate argument, or directly returns an i-rate argument.","synopsis":["i(x) (control-rate or init-rate arg)","i(karray,index1, ...) (k-array with indices)"],"type":"opcode","opname":"i"},{"id":"opk","short_desc":"Converts a i-rate parameter to an k-rate value. Or converts an a-rate value to a k-rate value by down-sampling.","synopsis":["k(x) (i-rate args only)","k(x) (a-rate args only)"],"type":"opcode","opname":"a"},{"id":"opnonequiv","short_desc":"Bitwise NON EQUIVALENCE operator.","synopsis":["a # b (bitwise NON EQUIVALENCE)"],"type":"opcode","opname":"#"},{"id":"opnot","short_desc":"Logical NOT operator.","synopsis":["! a (logical NOT; not audio-rate)"],"type":"opcode","opname":"!"},{"id":"opor","short_desc":"Logical OR operator.","synopsis":["a |||| b (logical OR; not audio-rate)"],"type":"opcode","opname":"||||"},{"id":"ops","short_desc":"Returns an S-type equivalent of an init-time or k-rate argument.","synopsis":["S(x) (control-rate or init-rate arg)"],"type":"opcode","opname":"i"},{"id":"oscbnk","short_desc":"Mixes the output of any number of oscillators.","synopsis":["ares oscbnk kcps, kamd, kfmd, kpmd, iovrlap, iseed, kl1minf, kl1maxf, kl2minf, kl2maxf, ilfomode, keqminf, keqmaxf, keqminl, keqmaxl, keqminq, keqmaxq, ieqmode, kfn [, il1fn] [, il2fn] [, ieqffn] [, ieqlfn] [, ieqqfn] [, itabl] [, ioutfn]"],"type":"opcode","opname":"oscbnk"},{"id":"oscil","short_desc":"A simple oscillator.","synopsis":["ares oscil xamp, xcps [, ifn, iphs]","kres oscil kamp, kcps [, ifn, iphs]"],"type":"opcode","opname":"oscil"},{"id":"oscil1","short_desc":"Accesses table values by incremental sampling.","synopsis":["kres oscil1 idel, kamp, idur [, ifn]"],"type":"opcode","opname":"oscil1"},{"id":"oscil1i","short_desc":"Accesses table values by incremental sampling with linear interpolation.","synopsis":["kres oscil1i idel, kamp, idur [, ifn]"],"type":"opcode","opname":"oscil1i"},{"id":"oscil3","short_desc":"A simple oscillator with cubic interpolation.","synopsis":["ares oscil3 xamp, xcps [, ifn, iphs]","kres oscil3 kamp, kcps [, ifn, iphs]"],"type":"opcode","opname":"oscil3"},{"id":"oscili","short_desc":"A simple oscillator with linear interpolation.","synopsis":["ares oscili xamp, xcps[, ifn, iphs]","kres oscili kamp, kcps[, ifn, iphs]"],"type":"opcode","opname":"oscili"},{"id":"oscilikt","short_desc":"A linearly interpolated oscillator that allows changing the table number at k-rate.","synopsis":["ares oscilikt xamp, xcps, kfn [, iphs] [, istor]","kres oscilikt kamp, kcps, kfn [, iphs] [, istor]"],"type":"opcode","opname":"oscilikt"},{"id":"osciliktp","short_desc":"A linearly interpolated oscillator that allows allows phase modulation.","synopsis":["ares osciliktp kcps, kfn, kphs [, istor]"],"type":"opcode","opname":"osciliktp"},{"id":"oscilikts","short_desc":"A linearly interpolated oscillator with sync status that allows changing the table number at k-rate.","synopsis":["ares oscilikts xamp, xcps, kfn, async, kphs [, istor]"],"type":"opcode","opname":"oscilikts"},{"id":"osciln","short_desc":"Accesses table values at a user-defined frequency.","synopsis":["ares osciln kamp, ifrq, ifn, itimes"],"type":"opcode","opname":"osciln"},{"id":"oscils","short_desc":"A simple, fast sine oscillator","synopsis":["ares oscils iamp, icps, iphs [, iflg]"],"type":"opcode","opname":"oscils"},{"id":"oscilx","short_desc":"Same as the osciln opcode.","synopsis":[],"type":"opcode","opname":"oscilx"},{"id":"out","short_desc":"Writes audio data to an external device or stream.","synopsis":["out asig1[, asig2,....]","out aarray"],"type":"opcode","opname":"out"},{"id":"out32","short_desc":"Writes 32-channel audio data to an external device or stream.","synopsis":["out32 asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig10, asig11, asig12, asig13, asig14, asig15, asig16, asig17, asig18, asig19, asig20, asig21, asig22, asig23, asig24, asig25, asig26, asig27, asig28, asig29, asig30, asig31, asig32"],"type":"opcode","opname":"out32"},{"id":"outall","short_desc":"Replicates one audio data sream to multiple channels.","synopsis":["outall asig"],"type":"opcode","opname":"outall"},{"id":"outc","short_desc":"Writes audio data with an arbitrary number of channels to an external device or stream.","synopsis":["outc asig1 [, asig2] [...]"],"type":"opcode","opname":"outc"},{"id":"outch","short_desc":"Writes multi-channel audio data, with user-controllable channels, to an external device or stream.","synopsis":["outch kchan1, asig1 [, kchan2] [, asig2] [...]"],"type":"opcode","opname":"outch"},{"id":"outh","short_desc":"Writes 6-channel audio data to an external device or stream.","synopsis":["outh asig1, asig2, asig3, asig4, asig5, asig6"],"type":"opcode","opname":"outh"},{"id":"outiat","short_desc":"Sends MIDI aftertouch messages at i-rate.","synopsis":["outiat ichn, ivalue, imin, imax"],"type":"opcode","opname":"outiat"},{"id":"outic","short_desc":"Sends MIDI controller output at i-rate.","synopsis":["outic ichn, inum, ivalue, imin, imax"],"type":"opcode","opname":"outic"},{"id":"outic14","short_desc":"Sends 14-bit MIDI controller output at i-rate.","synopsis":["outic14 ichn, imsb, ilsb, ivalue, imin, imax"],"type":"opcode","opname":"outic14"},{"id":"outipat","short_desc":"Sends polyphonic MIDI aftertouch messages at i-rate.","synopsis":["outipat ichn, inotenum, ivalue, imin, imax"],"type":"opcode","opname":"outipat"},{"id":"outipb","short_desc":"Sends MIDI pitch-bend messages at i-rate.","synopsis":["outipb ichn, ivalue, imin, imax"],"type":"opcode","opname":"outipb"},{"id":"outipc","short_desc":"Sends MIDI program change messages at i-rate","synopsis":["outipc ichn, iprog, imin, imax"],"type":"opcode","opname":"outipc"},{"id":"outkat","short_desc":"Sends MIDI aftertouch messages at k-rate.","synopsis":["outkat kchn, kvalue, kmin, kmax"],"type":"opcode","opname":"outkat"},{"id":"outkc","short_desc":"Sends MIDI controller messages at k-rate.","synopsis":["outkc kchn, knum, kvalue, kmin, kmax"],"type":"opcode","opname":"outkc"},{"id":"outkc14","short_desc":"Sends 14-bit MIDI controller output at k-rate.","synopsis":["outkc14 kchn, kmsb, klsb, kvalue, kmin, kmax"],"type":"opcode","opname":"outkc14"},{"id":"outkpat","short_desc":"Sends polyphonic MIDI aftertouch messages at k-rate.","synopsis":["outkpat kchn, knotenum, kvalue, kmin, kmax"],"type":"opcode","opname":"outkpat"},{"id":"outkpb","short_desc":"Sends MIDI pitch-bend messages at k-rate.","synopsis":["outkpb kchn, kvalue, kmin, kmax"],"type":"opcode","opname":"outkpb"},{"id":"outkpc","short_desc":"Sends MIDI program change messages at k-rate.","synopsis":["outkpc kchn, kprog, kmin, kmax"],"type":"opcode","opname":"outkpc"},{"id":"outleta","short_desc":"Sends an arate signal out from an instrument to a named port.","synopsis":["outleta Sname, asignal"],"type":"opcode","opname":"outleta"},{"id":"outletf","short_desc":"Sends a frate signal (fsig) out from an instrument to a named port.","synopsis":["outletf Sname, fsignal"],"type":"opcode","opname":"outletf"},{"id":"outletk","short_desc":"Sends a krate signal out from an instrument to a named port.","synopsis":["outletk Sname, ksignal"],"type":"opcode","opname":"outletk"},{"id":"outletkid","short_desc":"Sends a krate signal out from an instrument to a named port.","synopsis":["outletkid Sname, SinstanceID, ksignal"],"type":"opcode","opname":"outletkid"},{"id":"outletv","short_desc":"Sends an arate array signal out from an instrument to a named port.","synopsis":["outletv Sname, array"],"type":"opcode","opname":"outletv"},{"id":"outo","short_desc":"Writes 8-channel audio data to an external device or stream.","synopsis":["outo asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8"],"type":"opcode","opname":"outo"},{"id":"outq","short_desc":"Writes 4-channel audio data to an external device or stream.","synopsis":["outq asig1, asig2, asig3, asig4"],"type":"opcode","opname":"outq"},{"id":"outq1","short_desc":"Writes samples to quad channel 1 of an external device or stream.","synopsis":["outq1 asig"],"type":"opcode","opname":"outq1"},{"id":"outq2","short_desc":"Writes samples to quad channel 2 of an external device or stream.","synopsis":["outq2 asig"],"type":"opcode","opname":"outq2"},{"id":"outq3","short_desc":"Writes samples to quad channel 3 of an external device or stream.","synopsis":["outq3 asig"],"type":"opcode","opname":"outq3"},{"id":"outq4","short_desc":"Writes samples to quad channel 4 of an external device or stream.","synopsis":["outq4 asig"],"type":"opcode","opname":"outq4"},{"id":"outrg","short_desc":"Allow output to a range of adjacent audio channels on the audio output device","synopsis":["outrg kstart, aout1 [,aout2, aout3, ..., aoutN]"],"type":"opcode","opname":"outrg"},{"id":"outs","short_desc":"Writes stereo audio data to an external device or stream.","synopsis":["outs asig1, asig2"],"type":"opcode","opname":"outs"},{"id":"outs1","short_desc":"Writes samples to stereo channel 1 of an external device or stream.","synopsis":["outs1 asig"],"type":"opcode","opname":"outs1"},{"id":"outs2","short_desc":"Writes samples to stereo channel 2 of an external device or stream.","synopsis":["outs2 asig"],"type":"opcode","opname":"outs2"},{"id":"outvalue","short_desc":"Sends an i-rate or k-rate signal or string to a user-defined channel.","synopsis":["outvalue \"channel name\", ivalue","outvalue \"channel name\", kvalue","outvalue \"channel name\", \"string\""],"type":"opcode","opname":"outvalue"},{"id":"outx","short_desc":"Writes 16-channel audio data to an external device or stream.","synopsis":["outx asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig9, asig10, asig11, asig12, asig13, asig14, asig15, asig16"],"type":"opcode","opname":"outx"},{"id":"outz","short_desc":"Writes multi-channel audio data from a ZAK array to an external device or stream.","synopsis":["outz ksig1"],"type":"opcode","opname":"outz"},{"id":"p","short_desc":"Show the value in a given p-field.","synopsis":["p(x) "],"type":"opcode","opname":"p"},{"id":"p5gconnect","short_desc":"Reads data from a P5 Glove controller.","synopsis":["p5gconnect"],"type":"opcode","opname":"p5gconnect"},{"id":"p5gdata","short_desc":"Reads data fields from an external P5 Glove.","synopsis":["kres p5gdata kcontrol"],"type":"opcode","opname":"p5gdata"},{"id":"pan","short_desc":"Distribute an audio signal amongst four channels.","synopsis":["a1, a2, a3, a4 pan asig, kx, ky, ifn [, imode] [, ioffset]"],"type":"opcode","opname":"pan"},{"id":"pan2","short_desc":"Distribute an audio signal across two channels.","synopsis":["a1, a2 pan2 asig, xp [, imode]"],"type":"opcode","opname":"pan2"},{"id":"pareq","short_desc":"Implementation of Zoelzer\\'s parametric equalizer filters.","synopsis":["ares pareq asig, kc, kv, kq [, imode] [, iskip]"],"type":"opcode","opname":"pareq"},{"id":"part2txt","short_desc":"Write a text file containing partial tracks data","synopsis":["part2txt SFile,ftrks"],"type":"opcode","opname":"part2txt"},{"id":"partials","short_desc":"Partial track spectral analysis.","synopsis":["ftrks partials ffr, fphs, kthresh, kminpts, kmaxgap, imaxtracks"],"type":"opcode","opname":"partials"},{"id":"partikkel","short_desc":"Granular synthesizer with \"per grain\" control over many of its parameters. Has a sync input to sychronize its internal grain scheduler clock to an external clock source.","synopsis":["a1 [, a2, a3, a4, a5, a6, a7, a8] partikkel agrainfreq, kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains [, iopcode_id, ipanlaws]"],"type":"opcode","opname":"partikkel"},{"id":"partikkelget","short_desc":"Get mask index for a specific mask parameter of a running partikkel instance.","synopsis":["kindex partikkelget kparameterindex, iopcode_id"],"type":"opcode","opname":"partikkelget"},{"id":"partikkelset","short_desc":"Set mask index for a specific mask parameter of a running partikkel instance.","synopsis":["partikkelset kparameterindex, kmaskindex, iopcode_id"],"type":"opcode","opname":"partikkelset"},{"id":"partikkelsync","short_desc":"Outputs partikkel\\'s grain scheduler clock pulse and phase to synchronize several instances of the partikkel opcode to the same clock source.","synopsis":["async [,aphase] partikkelsync iopcode_id"],"type":"opcode","opname":"partikkelsync"},{"id":"passign","short_desc":"Assigns a range of p-fields to ivariables.","synopsis":[" ivar1, ... passign [istart][, iend"," iarray passign [istart][, iend"," karray passign [istart][, iend"],"type":"opcode","opname":"passign"},{"id":"paulstretch","short_desc":"Extreme time-stretching algorithm by Nasca Octavian Paul.","synopsis":["asig paulstretch istretch, iwindowsize, ift "],"type":"opcode","opname":"paulstretch"},{"id":"pcauchy","short_desc":"Cauchy distribution random number generator (positive values only).","synopsis":["ares pcauchy kalpha","ires pcauchy kalpha","kres pcauchy kalpha"],"type":"opcode","opname":"pcauchy"},{"id":"pchbend","short_desc":"Get the current pitch-bend value for this channel.","synopsis":["ibend pchbend [imin] [, imax]","kbend pchbend [imin] [, imax]"],"type":"opcode","opname":"pchbend"},{"id":"pchmidi","short_desc":"Get the note number of the current MIDI event, expressed in pitch-class units.","synopsis":["ipch pchmidi"],"type":"opcode","opname":"pchmidi"},{"id":"pchmidib","short_desc":"Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units.","synopsis":["ipch pchmidib [irange]","kpch pchmidib [irange]"],"type":"opcode","opname":"pchmidib"},{"id":"pchmidinn","short_desc":"Converts a Midi note number value to octave point pitch-class units.","synopsis":["pchmidinn (MidiNoteNumber) (init- or control-rate args only)"],"type":"opcode","opname":"pchmidinn"},{"id":"pchoct","short_desc":"Converts an octave-point-decimal value to pitch-class.","synopsis":["pchoct (oct) (init- or control-rate args only)"],"type":"opcode","opname":"pchoct"},{"id":"pchtom","short_desc":"Convert pch to midi note number","synopsis":["imidi pchtom ipch","kmidi pchtom kpch"],"type":"opcode","opname":"pchtom"},{"id":"pconvolve","short_desc":"Convolution based on a uniformly partitioned overlap-save algorithm","synopsis":["ar1 [, ar2] [, ar3] [, ar4] pconvolve ain, ifilcod [, ipartitionsize, ichannel]"],"type":"opcode","opname":"pconvolve"},{"id":"pcount","short_desc":"Returns the number of pfields belonging to a note event.","synopsis":["icount pcount"],"type":"opcode","opname":"pcount"},{"id":"pdclip","short_desc":"Performs linear clipping on an audio signal or a phasor.","synopsis":["aout pdclip ain, kWidth, kCenter [, ibipolar [, ifullscale]]"],"type":"opcode","opname":"pdclip"},{"id":"pdhalf","short_desc":"Distorts a phasor for reading the two halves of a table at different rates.","synopsis":["aout pdhalf ain, kShapeAmount [, ibipolar [, ifullscale]]"],"type":"opcode","opname":"pdhalf"},{"id":"pdhalfy","short_desc":"Distorts a phasor for reading two unequal portions of a table in equal periods.","synopsis":["aout pdhalfy ain, kShapeAmount [, ibipolar [, ifullscale]]"],"type":"opcode","opname":"pdhalfy"},{"id":"peak","short_desc":"Maintains the output equal to the highest absolute value received.","synopsis":["kres peak asig","kres peak ksig"],"type":"opcode","opname":"peak"},{"id":"peakk","short_desc":"Deprecated.","synopsis":[],"type":"opcode","opname":"peakk"},{"id":"pgmassign","short_desc":"Assigns an instrument number to a specified MIDI program.","synopsis":["pgmassign ipgm, inst[, ichn]","pgmassign ipgm, \"insname\"[, ichn]"],"type":"opcode","opname":"pgmassign"},{"id":"phaser1","short_desc":"First-order allpass filters arranged in a series.","synopsis":["ares phaser1 asig, kfreq, kord, kfeedback [, iskip]"],"type":"opcode","opname":"phaser1"},{"id":"phaser2","short_desc":"Second-order allpass filters arranged in a series.","synopsis":["ares phaser2 asig, kfreq, kq, kord, kmode, ksep, kfeedback"],"type":"opcode","opname":"phaser2"},{"id":"phasor","short_desc":"Produce a normalized moving phase value.","synopsis":["ares phasor xcps [, iphs]","kres phasor kcps [, iphs]"],"type":"opcode","opname":"phasor"},{"id":"phasorbnk","short_desc":"Produce an arbitrary number of normalized moving phase values.","synopsis":["ares phasorbnk xcps, kndx, icnt [, iphs]","kres phasorbnk kcps, kndx, icnt [, iphs]"],"type":"opcode","opname":"phasorbnk"},{"id":"phs","short_desc":"Obtains the phases of a complex-number array","synopsis":["kout[] phs kin[]"],"type":"opcode","opname":"phs"},{"id":"pindex","short_desc":"Returns the value of a specified pfield.","synopsis":["ivalue pindex ipfieldIndex"],"type":"opcode","opname":"pindex"},{"id":"pinker","short_desc":"Generates pink noise.","synopsis":["ares pinker"],"type":"opcode","opname":"pinker"},{"id":"pinkish","short_desc":"Generates approximate pink noise.","synopsis":["ares pinkish xin [, imethod] [, inumbands] [, iseed] [, iskip]"],"type":"opcode","opname":"pinkish"},{"id":"pitch","short_desc":"Tracks the pitch of a signal.","synopsis":["koct, kamp pitch asig, iupdte, ilo, ihi, idbthresh [, ifrqs] [, iconf] [, istrt] [, iocts] [, iq] [, inptls] [, irolloff] [, iskip]"],"type":"opcode","opname":"pitch"},{"id":"pitchamdf","short_desc":"Follows the pitch of a signal based on the AMDF method.","synopsis":["kcps, krms pitchamdf asig, imincps, imaxcps [, icps] [, imedi] [, idowns] [, iexcps] [, irmsmedi]"],"type":"opcode","opname":"pitchamdf"},{"id":"planet","short_desc":"Simulates a planet orbiting in a binary star system.","synopsis":["ax, ay, az planet kmass1, kmass2, ksep, ix, iy, iz, ivx, ivy, ivz, idelta [, ifriction] [, iskip]"],"type":"opcode","opname":"planet"},{"id":"platerev","short_desc":"Models the reverberation of a metal plate.","synopsis":["a1[, a2, ...] platerev itabexcite. itabouts, kbndry, iaspect, istiff, idecay, iloss, aexcite1[, aexcite2, ...]"],"type":"opcode","opname":"platerev"},{"id":"plltrack","short_desc":"Tracks the pitch of a signal.","synopsis":["acps, alock plltrack asig, kd [, kloopf, kloopq, klf, khf, kthresh]"],"type":"opcode","opname":"plltrack"},{"id":"pluck","short_desc":"Produces a naturally decaying plucked string or drum sound.","synopsis":["ares pluck kamp, kcps, icps, ifn, imeth [, iparm1] [, iparm2]"],"type":"opcode","opname":"pluck"},{"id":"plusbecomes","short_desc":"Performs add and assignment.","synopsis":["ares += xarg","ires += iarg","kres += karg","table [ kval] += karg"],"type":"opcode","opname":"+="},{"id":"poisson","short_desc":"Poisson distribution random number generator (positive values only).","synopsis":["ares poisson klambda","ires poisson klambda","kres poisson klambda"],"type":"opcode","opname":"poisson"},{"id":"pol2rect","short_desc":"Polar to rectangular format conversion.","synopsis":["kout[] pol2rect kin[]","kout[] pol2rect kmags[], kphs[]"],"type":"opcode","opname":"pol2rect"},{"id":"polyaft","short_desc":"Returns the polyphonic after-touch pressure of the selected note number.","synopsis":["ires polyaft inote [, ilow] [, ihigh]","kres polyaft inote [, ilow] [, ihigh]"],"type":"opcode","opname":"polyaft"},{"id":"polynomial","short_desc":"Efficiently evaluates a polynomial of arbitrary order.","synopsis":["aout polynomial ain, k0 [, k1 [, k2 [...]]]"],"type":"opcode","opname":"polynomial"},{"id":"pop","short_desc":"Pops values from the global stack. Deprecated.","synopsis":["xval1, [xval2, ... , xval31] pop","ival1, [ival2, ... , ival31] pop"],"type":"opcode","opname":"pop"},{"id":"pop_f","short_desc":"Pops an f-sig frame from the global stack. Deprecated.","synopsis":["fsig pop_f"],"type":"opcode","opname":"pop_f"},{"id":"port","short_desc":"Applies portamento to a step-valued control signal.","synopsis":["kres port ksig, ihtim [, isig]"],"type":"opcode","opname":"port"},{"id":"portk","short_desc":"Applies portamento to a step-valued control signal.","synopsis":["kres portk ksig, khtim [, isig]"],"type":"opcode","opname":"portk"},{"id":"poscil","short_desc":"High precision oscillator.","synopsis":["ares poscil aamp, acps [, ifn, iphs]","ares poscil aamp, kcps [, ifn, iphs]","ares poscil kamp, acps [, ifn, iphs]","ares poscil kamp, kcps [, ifn, iphs]","ires poscil kamp, kcps [, ifn, iphs]","kres poscil kamp, kcps [, ifn, iphs]"],"type":"opcode","opname":"poscil"},{"id":"poscil3","short_desc":"High precision oscillator with cubic interpolation.","synopsis":["ares poscil3 aamp, acps [, ifn, iphs]","ares poscil3 aamp, kcps [, ifn, iphs]","ares poscil3 kamp, acps [, ifn, iphs]","ares poscil3 kamp, kcps [, ifn, iphs]","ires poscil3 kamp, kcps [, ifn, iphs]","kres poscil3 kamp, kcps [, ifn, iphs]"],"type":"opcode","opname":"poscil3"},{"id":"pow","short_desc":"Computes one argument to the power of another argument.","synopsis":["ares pow aarg, kpow [, inorm]","ires pow iarg, ipow [, inorm]","kres pow karg, kpow [, inorm]","ires[] pow iarg[], ipow[] ","kres[] pow karg[], kpow[]","ires[] pow iarg[], ipow ","kres[] pow karg[], kpow "],"type":"opcode","opname":"pow"},{"id":"powershape","short_desc":"Waveshapes a signal by raising it to a variable exponent.","synopsis":["aout powershape ain, kShapeAmount [, ifullscale]"],"type":"opcode","opname":"powershape"},{"id":"powoftwo","short_desc":"Performs a power-of-two calculation.","synopsis":["powoftwo(x) (init-rate or control-rate args only)"],"type":"opcode","opname":"powoftwo"},{"id":"prealloc","short_desc":"Creates space for instruments but does not run them.","synopsis":["prealloc insnum, icount","prealloc \"insname\", icount"],"type":"opcode","opname":"prealloc"},{"id":"prepiano","short_desc":"Creates a tone similar to a piano string prepared in a Cageian fashion.","synopsis":["ares prepiano ifreq, iNS, iD, iK, iT30,iB, kbcl, kbcr, imass, ihvfreq, iinit, ipos, ivel, isfreq, isspread[, irattles, irubbers]","al,ar prepiano ifreq, iNS, iD, iK, iT30,iB, kbcl, kbcr, imass, ihvfreq, iinit, ipos, ivel, isfreq, isspread[, irattles, irubbers]"],"type":"opcode","opname":"prepiano"},{"id":"print","short_desc":"Displays the values init (i-rate) variables.","synopsis":["print iarg [, iarg1] [, iarg2] [...]"],"type":"opcode","opname":"print"},{"id":"printarray","short_desc":"Print the contents of an array","synopsis":["printarray ixs[] [, Smft, Slabel ]","printarray kxs[] [, ktrig, Sfmt, Slabel ]"],"type":"opcode","opname":"printarray"},{"id":"printf","short_desc":"printf-style formatted output","synopsis":["printf_i Sfmt, itrig, [iarg1[, iarg2[, ... ]]]","printf Sfmt, ktrig, [xarg1[, xarg2[, ... ]]]"],"type":"opcode","opname":"printf"},{"id":"printk","short_desc":"Prints one k-rate value at specified intervals.","synopsis":["printk itime, kval [, ispace] [, inamed]"],"type":"opcode","opname":"printk"},{"id":"printk2","short_desc":"Prints a new value every time a control variable changes.","synopsis":["printk2 kvar [, inumspaces] [, inamed]"],"type":"opcode","opname":"printk2"},{"id":"printks","short_desc":"Prints at k-rate using a printf() style syntax.","synopsis":["printks \"string\", itime [, xval1] [, xval2] [...]"],"type":"opcode","opname":"printks"},{"id":"printks2","short_desc":"Prints a new value every time a control variable changes using a printf() style syntax.","synopsis":["printks2 \"string\", kval"],"type":"opcode","opname":"printks2"},{"id":"println","short_desc":"Prints at k-rate using a printf() style syntax, appends a new line","synopsis":["println \"string\", [, xval1] [, xval2] [...]"],"type":"opcode","opname":"println"},{"id":"prints","short_desc":"Prints at init-time using a printf() style syntax.","synopsis":["prints \"string\" [, xval1] [, xval2] [...]"],"type":"opcode","opname":"prints"},{"id":"printsk","short_desc":"Prints at k-rate using a printf() style syntax.","synopsis":["printsk \"string\", [, xval1] [, xval2] [...]"],"type":"opcode","opname":"printsk"},{"id":"product","short_desc":"Multiplies any number of a-rate signals.","synopsis":["ares product asig1, asig2 [, asig3] [...]"],"type":"opcode","opname":"product"},{"id":"productarray","short_desc":"Calculates the product of an array.","synopsis":["kres\/ires product karr[]\/iarr[] (k- or i-arrays )"],"type":"opcode","opname":"product"},{"id":"pset","short_desc":"Defines and initializes numeric arrays at orchestra load time.","synopsis":["pset icon1 [, icon2] [...]"],"type":"opcode","opname":"pset"},{"id":"ptable","short_desc":"Accesses table values by direct indexing.","synopsis":["ares ptable andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires ptable indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres ptable kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"ptable"},{"id":"ptable3","short_desc":"Accesses table values by direct indexing with cubic interpolation.","synopsis":["ares ptable3 andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires ptable3 indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres ptable3 kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"ptable3"},{"id":"ptablei","short_desc":"Accesses table values by direct indexing with linear interpolation.","synopsis":["ares ptablei andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires ptablei indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres ptablei kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"ptablei"},{"id":"ptablew","short_desc":"Change the contents of existing function tables of any length.","synopsis":["ptablew asig, andx, ifn [, ixmode] [, ixoff] [, iwgmode]","ptablew isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]","ptablew ksig, kndx, ifn [, ixmode] [, ixoff] [, iwgmode]"],"type":"opcode","opname":"ptablew"},{"id":"ptrack","short_desc":"Tracks the pitch of a signal.","synopsis":["kcps, kamp ptrack asig, ihopsize[,ipeaks]"],"type":"opcode","opname":"ptrack"},{"id":"push","short_desc":"Pushes a value into the global stack. Deprecated.","synopsis":["push xval1, [xval2, ... , xval31]","push ival1, [ival2, ... , ival31]"],"type":"opcode","opname":"push"},{"id":"push_f","short_desc":"Pushes an f-sig frame into the global stack. Deprecated.","synopsis":["push_f fsig"],"type":"opcode","opname":"push_f"},{"id":"puts","short_desc":"Print a string constant or variable","synopsis":["puts Sstr, ktrig[, inonl]"],"type":"opcode","opname":"puts"},{"id":"pvadd","short_desc":"Reads from a pvoc file and uses the data to perform additive synthesis.","synopsis":["ares pvadd ktimpnt, kfmod, ifilcod, ifn, ibins [, ibinoffset] [, ibinincr] [, iextractmode] [, ifreqlim] [, igatefn]"],"type":"opcode","opname":"pvadd"},{"id":"pvbufread","short_desc":"Reads from a phase vocoder analysis file and makes the retrieved data available.","synopsis":["pvbufread ktimpnt, ifile"],"type":"opcode","opname":"pvbufread"},{"id":"pvcross","short_desc":"Applies the amplitudes from one phase vocoder analysis file to the data from a second file.","synopsis":["ares pvcross ktimpnt, kfmod, ifile, kampscale1, kampscale2 [, ispecwp]"],"type":"opcode","opname":"pvcross"},{"id":"pvinterp","short_desc":"Interpolates between the amplitudes and frequencies of two phase vocoder analysis files.","synopsis":["ares pvinterp ktimpnt, kfmod, ifile, kfreqscale1, kfreqscale2, kampscale1, kampscale2, kfreqinterp, kampinterp"],"type":"opcode","opname":"pvinterp"},{"id":"pvoc","short_desc":"Implements signal reconstruction using an fft-based phase vocoder.","synopsis":["ares pvoc ktimpnt, kfmod, ifilcod [, ispecwp] [, iextractmode] [, ifreqlim] [, igatefn]"],"type":"opcode","opname":"pvoc"},{"id":"pvread","short_desc":"Reads from a phase vocoder analysis file and returns the frequency and amplitude from a single analysis channel or bin.","synopsis":["kfreq, kamp pvread ktimpnt, ifile, ibin"],"type":"opcode","opname":"pvread"},{"id":"pvs2array","short_desc":"Same as the pvs2tab opcode.","synopsis":["kframe pvs2array kvar[], fsig","kframe pvs2array kmags[], kfreqs[], fsig"],"type":"opcode","opname":"pvs2array"},{"id":"pvs2tab","short_desc":"Copies spectral data to k-rate arrays (or t-variables). Also known as pvs2array.","synopsis":["kframe pvs2tab tvar|kvar[], fsig","kframe pvs2tab kmags[], kfreqs[], fsig"],"type":"opcode","opname":"pvs2tab"},{"id":"pvsadsyn","short_desc":"Resynthesize using a fast oscillator-bank.","synopsis":["ares pvsadsyn fsrc, inoscs, kfmod [, ibinoffset] [, ibinincr] [, iinit]"],"type":"opcode","opname":"pvsadsyn"},{"id":"pvsanal","short_desc":"Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis.","synopsis":["fsig pvsanal ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]"],"type":"opcode","opname":"pvsanal"},{"id":"pvsarp","short_desc":"Arpeggiate the spectral components of a streaming pv signal.","synopsis":["fsig pvsarp fsigin, kbin, kdepth, kgain"],"type":"opcode","opname":"pvsarp"},{"id":"pvsbandp","short_desc":"A band pass filter working in the spectral domain.","synopsis":["fsig pvsbandp fsigin, xlowcut, xlowfull, xhighfull, xhighcut[, ktype]"],"type":"opcode","opname":"pvsbandp"},{"id":"pvsbandr","short_desc":"A band reject filter working in the spectral domain.","synopsis":["fsig pvsbandr fsigin, xlowcut, xlowfull, xhighfull, xhighcut[, ktype]"],"type":"opcode","opname":"pvsbandr"},{"id":"pvsbandwidth","short_desc":"Calculate the spectral bandwidth of a signal.","synopsis":["kbnd pvsbandwidth fsig"],"type":"opcode","opname":"pvsbandwidth"},{"id":"pvsbin","short_desc":"Obtain the amp and freq values off a PVS signal bin.","synopsis":["kamp, kfr pvsbin fsig, kbin"],"type":"opcode","opname":"pvsbin"},{"id":"pvsblur","short_desc":"Average the amp\/freq time functions of each analysis channel for a specified time.","synopsis":["fsig pvsblur fsigin, kblurtime, imaxdel"],"type":"opcode","opname":"pvsblur"},{"id":"pvsbuffer","short_desc":"This opcode creates and writes to a circular buffer for f-signals (streaming PV signals).","synopsis":["ihandle, ktime pvsbuffer fsig, ilen "],"type":"opcode","opname":"pvsbuffer"},{"id":"pvsbufread","short_desc":"This opcode reads a circular buffer of f-signals (streaming PV signals).","synopsis":["fsig pvsbufread ktime, khandle[, ilo, ihi, iclear] "],"type":"opcode","opname":"pvsbufread"},{"id":"pvsbufread2","short_desc":"This opcode reads a circular buffer of f-signals (streaming PV signals), with binwise additional delays.","synopsis":["fsig pvsbufread2 ktime, khandle, ift1, ift2 "],"type":"opcode","opname":"pvsbufread2"},{"id":"pvscale","short_desc":"Scale the frequency components of a pv stream.","synopsis":["fsig pvscale fsigin, kscal[, kkeepform, kgain, kcoefs]"],"type":"opcode","opname":"pvscale"},{"id":"pvscent","short_desc":"Calculate the spectral centroid of a signal.","synopsis":["kcent pvscent fsig","acent pvscent fsig"],"type":"opcode","opname":"pvscent"},{"id":"pvsceps","short_desc":"Calculate the cepstrum of a pvs input, optionally liftering coefficients.","synopsis":["keps[] pvsceps fsig[, icoefs]"],"type":"opcode","opname":"pvsceps"},{"id":"pvscfs","short_desc":"Cepstrum all-pole coefficient analysis.","synopsis":["kCoef[],krms,kerr pvscfs fsig, iord[,imod]"],"type":"opcode","opname":"pvscfs"},{"id":"pvscross","short_desc":"Performs cross-synthesis between two source fsigs.","synopsis":["fsig pvscross fsrc, fdest, kamp1, kamp2"],"type":"opcode","opname":"pvscross"},{"id":"pvsdemix","short_desc":"Spectral azimuth-based de-mixing of stereo sources.","synopsis":["fsig pvsdemix fleft, fright, kpos, kwidth, ipoints"],"type":"opcode","opname":"pvsdemix"},{"id":"pvsdiskin","short_desc":"Read a selected channel from a PVOC-EX analysis file.","synopsis":["fsig pvsdiskin SFname,ktscal,kgain[,ioffset, ichan]"],"type":"opcode","opname":"pvsdiskin"},{"id":"pvsdisp","short_desc":"Displays a PVS signal as an amplitude vs. freq graph.","synopsis":["pvsdisp fsig[, ibins, iwtflg] "],"type":"opcode","opname":"pvsdisp"},{"id":"pvsfilter","short_desc":"Multiply amplitudes of a pvoc stream by those of a secondpvoc stream, with dynamic scaling.","synopsis":["fsig pvsfilter fsigin, fsigfil, kdepth[, igain]"],"type":"opcode","opname":"pvsfilter"},{"id":"pvsfread","short_desc":"Read a selected channel from a PVOC-EX analysis file.","synopsis":["fsig pvsfread ktimpt, ifn [, ichan]"],"type":"opcode","opname":"pvsfread"},{"id":"pvsfreeze","short_desc":"Freeze the amplitude and frequency time functions of a pv stream according to a control-rate trigger.","synopsis":["fsig pvsfreeze fsigin, kfreeza, kfreezf"],"type":"opcode","opname":"pvsfreeze"},{"id":"pvsfromarray","short_desc":"Same as the tab2pvs opcode.","synopsis":["fsig pvsfromarray karr[][,ihopsize, iwinsize, iwintype]","fsig pvsfromarray kmags[], kfreqs[][,ihopsize, iwinsize, iwintype]"],"type":"opcode","opname":"pvsfromarray"},{"id":"pvsftr","short_desc":"Reads amplitude and\/or frequency data from function tables.","synopsis":["pvsftr fsrc, ifna [, ifnf]"],"type":"opcode","opname":"pvsftr"},{"id":"pvsftw","short_desc":"Writes amplitude and\/or frequency data to function tables.","synopsis":["kflag pvsftw fsrc, ifna [, ifnf]"],"type":"opcode","opname":"pvsftw"},{"id":"pvsfwrite","short_desc":"Write a fsig to a PVOCEX file.","synopsis":["pvsfwrite fsig, ifile"],"type":"opcode","opname":"pvsfwrite"},{"id":"pvsgain","short_desc":"Scale the amplitude of a pv stream.","synopsis":["fsig pvsgain fsigin, kgain "],"type":"opcode","opname":"pvsgain"},{"id":"pvshift","short_desc":"Shift the frequency components of a pv stream, stretching\/compressing its spectrum.","synopsis":["fsig pvshift fsigin, kshift, klowest[, kkeepform, igain, kcoefs]"],"type":"opcode","opname":"pvshift"},{"id":"pvsifd","short_desc":"Instantaneous Frequency Distribution, magnitude and phase analysis.","synopsis":["ffr,fphs pvsifd ain, ifftsize, ihopsize, iwintype[,iscal]"],"type":"opcode","opname":"pvsifd"},{"id":"pvsin","short_desc":"Retrieve an fsig from the input software bus; a pvs equivalent to chani.","synopsis":["fsig pvsin kchan[, isize, iolap, iwinsize, iwintype, iformat]"],"type":"opcode","opname":"pvsin"},{"id":"pvsinfo","short_desc":"Get information from a PVOC-EX formatted source.","synopsis":["ioverlap, inumbins, iwinsize, iformat pvsinfo fsrc"],"type":"opcode","opname":"pvsinfo"},{"id":"pvsinit","short_desc":"Initialise a spectral (f) variable to zero.","synopsis":["fsig pvsinit isize[, iolap, iwinsize, iwintype, iformat]"],"type":"opcode","opname":"pvsinit"},{"id":"pvslpc","short_desc":"Streaming linear prediction analysis.","synopsis":["fsig pvslpc asrc, idftsiz, ihop, iord[,iwin] "],"type":"opcode","opname":"pvslpc"},{"id":"pvsmaska","short_desc":"Modify amplitudes using a function table, with dynamic scaling.","synopsis":["fsig pvsmaska fsrc, ifn, kdepth"],"type":"opcode","opname":"pvsmaska"},{"id":"pvsmix","short_desc":"Mix \\'seamlessly\\' two pv signals.","synopsis":["fsig pvsmix fsigin1, fsigin2"],"type":"opcode","opname":"pvsmix"},{"id":"pvsmooth","short_desc":"Smooth the amplitude and frequency time functions of a pv stream using parallel 1st order lowpass IIR filters with time-varying cutoff frequency.","synopsis":["fsig pvsmooth fsigin, kacf, kfcf"],"type":"opcode","opname":"pvsmooth"},{"id":"pvsmorph","short_desc":"Performs morphing (or interpolation) between two source fsigs.","synopsis":["fsig pvsmorph fsig1, fsig2, kampint, kfrqint"],"type":"opcode","opname":"pvsmorph"},{"id":"pvsosc","short_desc":"PVS-based oscillator simulator.","synopsis":["fsig pvsosc kamp, kfreq, ktype, isize [,ioverlap] [, iwinsize] [, iwintype] [, iformat]"],"type":"opcode","opname":"pvsosc"},{"id":"pvsout","short_desc":"Write a fsig to the pvs output bus.","synopsis":["pvsout fsig, kchan"],"type":"opcode","opname":"pvsout"},{"id":"pvspitch","short_desc":"Track the pitch and amplitude of a PVS signal.","synopsis":["kfr, kamp pvspitch fsig, kthresh"],"type":"opcode","opname":"pvspitch"},{"id":"pvstanal","short_desc":"Phase vocoder analysis processing with onset detection\/processing.","synopsis":["fsig pvstanal ktimescal, kamp, kpitch, ktab, [kdetect, kwrap, ioffset,ifftsize, ihop, idbthresh] "],"type":"opcode","opname":"pvstanal"},{"id":"pvstencil","short_desc":"Transforms a pvoc stream according to a masking function table.","synopsis":["fsig pvstencil fsigin, kgain, klevel, iftable"],"type":"opcode","opname":"pvstencil"},{"id":"pvstrace","short_desc":"Retain only the N loudest bins.","synopsis":["fsig pvstrace fsigin, kn ","fsig, kBins[] pvstrace fsigin, kn[, isort, imin, imax] "],"type":"opcode","opname":"pvstrace"},{"id":"pvsvoc","short_desc":"Combine the spectral envelope of one fsig with the excitation (frequencies) of another.","synopsis":["fsig pvsvoc famp, fexc, kdepth, kgain [,kcoefs]"],"type":"opcode","opname":"pvsvoc"},{"id":"pvswarp","short_desc":"Warp the spectral envelope of a PVS signal","synopsis":["fsig pvswarp fsigin, kscal, kshift[, klowest, kmeth, kgain, kcoefs]"],"type":"opcode","opname":"pvswarp"},{"id":"pvsynth","short_desc":"Resynthesise using a FFT overlap-add.","synopsis":["ares pvsynth fsrc, [iinit]"],"type":"opcode","opname":"pvsynth"},{"id":"pwd","short_desc":"Asks the underlying operating system for the current directory name as a string.","synopsis":["Sres pwd"],"type":"opcode","opname":"pwd"},{"id":"pyassign","short_desc":"Assign the value of the given Csound variable to a Python variable possibly destroying its previous content.","synopsis":["pyassign \"variable\", kvalue","pyassigni \"variable\", ivalue","pylassign \"variable\", kvalue","pylassigni \"variable\", ivalue","pyassignt ktrigger, \"variable\", kvalue","pylassignt ktrigger, \"variable\", kvalue"],"type":"opcode","opname":"pyassign"},{"id":"pycall","short_desc":"Invoke the specified Python callable at k-time and i-time (i suffix), passing the given arguments. The call is perfomed in the global environment, and the result (the returning value) is copied into the Csound output variables specified.","synopsis":[" pycall \"callable\", karg1, ...","kresult pycall1 \"callable\", karg1, ...","kresult1, kresult2 pycall2 \"callable\", karg1, ...","kr1, kr2, kr3 pycall3 \"callable\", karg1, ...","kr1, kr2, kr3, kr4 pycall4 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5 pycall5 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6 pycall6 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7 pycall7 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8 pycall8 \"callable\", karg1, ..."," pycallt ktrigger, \"callable\", karg1, ...","kresult pycall1t ktrigger, \"callable\", karg1, ...","kresult1, kresult2 pycall2t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3 pycall3t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4 pycall4t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5 pycall5t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6 pycall6t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7 pycall7t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8 pycall8t ktrigger, \"callable\", karg1, ..."," pycalli \"callable\", karg1, ...","iresult pycall1i \"callable\", iarg1, ...","iresult1, iresult2 pycall2i \"callable\", iarg1, ...","ir1, ir2, ir3 pycall3i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4 pycall4i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5 pycall5i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6 pycall6i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6, ir7 pycall7i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8 pycall8i \"callable\", iarg1, ...","pycalln \"callable\", nresults, kresult1, ..., kresultn, karg1, ...","pycallni \"callable\", nresults, iresult1, ..., iresultn, iarg1, ..."," pylcall \"callable\", karg1, ...","kresult pylcall1 \"callable\", karg1, ...","kresult1, kresult2 pylcall2 \"callable\", karg1, ...","kr1, kr2, kr3 pylcall3 \"callable\", karg1, ...","kr1, kr2, kr3, kr4 pylcall4 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5 pylcall5 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6 pylcall6 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7 pylcall7 \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8 pylcall8 \"callable\", karg1, ..."," pylcallt ktrigger, \"callable\", karg1, ...","kresult pylcall1t ktrigger, \"callable\", karg1, ...","kresult1, kresult2 pylcall2t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3 pylcall3t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4 pylcall4t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5 pylcall5t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6 pylcall6t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7 pylcall7t ktrigger, \"callable\", karg1, ...","kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8 pylcall8t ktrigger, \"callable\", karg1, ..."," pylcalli \"callable\", karg1, ...","iresult pylcall1i \"callable\", iarg1, ...","iresult1, iresult2 pylcall2i \"callable\", iarg1, ...","ir1, ir2, ir3 pylcall3i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4 pylcall4i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5 pylcall5i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6 pylcall6i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6, ir7 pylcall7i \"callable\", iarg1, ...","ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8 pylcall8i \"callable\", iarg1, ...","pylcalln \"callable\", nresults, kresult1, ..., kresultn, karg1, ...","pylcallni \"callable\", nresults, iresult1, ..., iresultn, iarg1, ..."],"type":"opcode","opname":"pycall"},{"id":"pyeval","short_desc":"Evaluate a generic Python expression and store the result in a Csound variable at k-time or i-time (i suffix).","synopsis":["kresult pyeval \"expression\"","iresult pyevali \"expression\"","kresult pyleval \"expression\"","iresult pylevali \"expression\"","kresult pyevalt ktrigger, \"expression\"","kresult pylevalt ktrigger, \"expression\""],"type":"opcode","opname":"pyeval"},{"id":"pyexec","short_desc":"Execute a script from a file at k-time or i-time (i suffix).","synopsis":["pyexec \"filename\"","pyexeci \"filename\"","pylexec \"filename\"","pylexeci \"filename\"","pyexect ktrigger, \"filename\"","plyexect ktrigger, \"filename\""],"type":"opcode","opname":"pyexec"},{"id":"pyinit","short_desc":"Initialize the Python interpreter.","synopsis":["pyinit"],"type":"opcode","opname":"pyinit"},{"id":"pyrun","short_desc":"Run a Python statement or block of statements.","synopsis":["pyrun \"statement\"","pyruni \"statement\"","pylrun \"statement\"","pylruni \"statement\"","pyrunt ktrigger, \"statement\"","pylrunt ktrigger, \"statement\""],"type":"opcode","opname":"pyrun"},{"id":"qinf","short_desc":"Questions whether the argument is a infinite number","synopsis":["qinf(x) (no rate restriction)"],"type":"opcode","opname":"qinf"},{"id":"qnan","short_desc":"Questions whether the argument is not a number","synopsis":["qnan(x) (no rate restriction)"],"type":"opcode","opname":"qnan"},{"id":"r2c","short_desc":"Real to complex format conversion.","synopsis":["kout[] r2c kin[]"],"type":"opcode","opname":"r2c"},{"id":"raises","short_desc":"Power of operator.","synopsis":["a ^ b (b not audio-rate)"],"type":"opcode","opname":"^"},{"id":"rand","short_desc":"Generates a controlled random number series.","synopsis":["ares rand xamp [, iseed] [, isel] [, ioffset]","kres rand xamp [, iseed] [, isel] [, ioffset]"],"type":"opcode","opname":"rand"},{"id":"randh","short_desc":"Generates random numbers and holds them for a period of time.","synopsis":["ares randh xamp, xcps [, iseed] [, isize] [, ioffset]","kres randh kamp, kcps [, iseed] [, isize] [, ioffset]"],"type":"opcode","opname":"randh"},{"id":"randi","short_desc":"Generates a controlled random number series with interpolation between each new number.","synopsis":["ares randi xamp, xcps [, iseed] [, isize] [, ioffset]","kres randi kamp, kcps [, iseed] [, isize] [, ioffset]"],"type":"opcode","opname":"randi"},{"id":"random","short_desc":"Generates a controlled pseudo-random number series between min and max values.","synopsis":["ares random kmin, kmax","ires random imin, imax","kres random kmin, kmax"],"type":"opcode","opname":"random"},{"id":"randomh","short_desc":"Generates random numbers with a user-defined limit and holds them for a period of time.","synopsis":["ares randomh kmin, kmax, xcps [,imode] [,ifirstval]","kres randomh kmin, kmax, kcps [,imode] [,ifirstval]"],"type":"opcode","opname":"randomh"},{"id":"randomi","short_desc":"Generates a user-controlled random number series with interpolation between each new number.","synopsis":["ares randomi kmin, kmax, xcps [,imode] [,ifirstval]","kres randomi kmin, kmax, kcps [,imode] [,ifirstval]"],"type":"opcode","opname":"randomi"},{"id":"rbjeq","short_desc":"Parametric equalizer and filter opcode with 7 filter types, based on algorithm by Robert Bristow-Johnson.","synopsis":["ar rbjeq asig, kfco, klvl, kQ, kS[, imode]"],"type":"opcode","opname":"rbjeq"},{"id":"readclock","short_desc":"Reads the value of an internal clock.","synopsis":["ir readclock inum"],"type":"opcode","opname":"readclock"},{"id":"readf","short_desc":"Read a line of text from an external file.","synopsis":["Sres, kline readf ifilname"],"type":"opcode","opname":"readf"},{"id":"readfi","short_desc":"Read a line of text from an external file.","synopsis":["Sres, iline readfi ifilname"],"type":"opcode","opname":"readfi"},{"id":"readk","short_desc":"Periodically reads an orchestra control-signal value from an external file.","synopsis":["kres readk ifilname, iformat, iprd"],"type":"opcode","opname":"readk"},{"id":"readk2","short_desc":"Periodically reads two orchestra control-signal values from an external file.","synopsis":["kr1, kr2 readk2 ifilname, iformat, iprd"],"type":"opcode","opname":"readk2"},{"id":"readk3","short_desc":"Periodically reads three orchestra control-signal values from an external file.","synopsis":["kr1, kr2, kr3 readk3 ifilname, iformat, iprd"],"type":"opcode","opname":"readk3"},{"id":"readk4","short_desc":"Periodically reads four orchestra control-signal values from an external file.","synopsis":["kr1, kr2, kr3, kr4 readk4 ifilname, iformat, iprd"],"type":"opcode","opname":"readk4"},{"id":"readscore","short_desc":"Read, preprocess and schedule a score from an input string.","synopsis":["readscore Sin "],"type":"opcode","opname":"readscore"},{"id":"readscratch","short_desc":"returns a value stored in the instance of an instrument.","synopsis":["ival readscratch[index]"],"type":"opcode","opname":"readscratch"},{"id":"rect2pol","short_desc":"Rectangular to polar format conversion.","synopsis":["kout[] rect2pol kin[]"],"type":"opcode","opname":"rect2pol"},{"id":"reinit","short_desc":"Suspends a performance while a special initialization pass is executed.","synopsis":["reinit label"],"type":"opcode","opname":"reinit"},{"id":"release","short_desc":"Indicates whether a note is in its release stage.","synopsis":["kflag release"],"type":"opcode","opname":"release"},{"id":"remoteport","short_desc":"Defines the port for use with the remote system.","synopsis":["remoteport iportnum"],"type":"opcode","opname":"remoteport"},{"id":"remove","short_desc":"Removes the definition of an instrument.","synopsis":["remove insnum"],"type":"opcode","opname":"remove"},{"id":"repluck","short_desc":"Physical model of the plucked string.","synopsis":["ares repluck iplk, kamp, icps, kpick, krefl, axcite"],"type":"opcode","opname":"repluck"},{"id":"reshapearray","short_desc":"Reshape an array, maintaining its capacity","synopsis":["reshapearray array[], isize0 [, isize1 ]"],"type":"opcode","opname":"reshapearray"},{"id":"reson","short_desc":"A second-order resonant filter.","synopsis":["ares reson asig, xcf, xbw [, iscl] [, iskip]"],"type":"opcode","opname":"reson"},{"id":"resonbnk","short_desc":"A resonator filter bank.","synopsis":["asigresonbnk ain, kPar[],kmin,kmax,iper[,imode,iscal,iskip] "],"type":"opcode","opname":"resonbnk"},{"id":"resonk","short_desc":"A second-order resonant filter.","synopsis":["kres resonk ksig, kcf, kbw [, iscl] [, iskip]"],"type":"opcode","opname":"resonk"},{"id":"resonr","short_desc":"A bandpass filter with variable frequency response.","synopsis":["ares resonr asig, xcf, xbw [, iscl] [, iskip]"],"type":"opcode","opname":"resonr"},{"id":"resonx","short_desc":"Emulates a stack of filters using the reson opcode.","synopsis":["ares resonx asig, xcf, xbw [, inumlayer] [, iscl] [, iskip]"],"type":"opcode","opname":"resonx"},{"id":"resonxk","short_desc":"Control signal resonant filter stack.","synopsis":["kres resonxk ksig, kcf, kbw[, inumlayer, iscl, istor]"],"type":"opcode","opname":"resonxk"},{"id":"resony","short_desc":"A bank of second-order bandpass filters, connected in parallel.","synopsis":["ares resony asig, kbf, kbw, inum, ksep [, isepmode] [, iscl] [, iskip]"],"type":"opcode","opname":"resony"},{"id":"resonz","short_desc":"A bandpass filter with variable frequency response.","synopsis":["ares resonz asig, xcf, xbw [, iscl] [, iskip]"],"type":"opcode","opname":"resonz"},{"id":"resyn","short_desc":"Streaming partial track additive synthesis with cubic phase interpolation withpitch control and support for timescale-modified input","synopsis":["asig resyn fin, kscal, kpitch, kmaxtracks, ifn"],"type":"opcode","opname":"resyn"},{"id":"return","short_desc":"Returns a value from an instrument.","synopsis":["return ival "],"type":"opcode","opname":"return"},{"id":"reverb","short_desc":"Reverberates an input signal with a natural room frequency response.","synopsis":["ares reverb asig, krvt [, iskip]"],"type":"opcode","opname":"reverb"},{"id":"reverb2","short_desc":"Same as the nreverb opcode.","synopsis":["ares reverb2 asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] [, inumAlpas] [, ifnAlpas]"],"type":"opcode","opname":"reverb2"},{"id":"reverbsc","short_desc":"8 delay line stereo FDN reverb, based on work by Sean Costello","synopsis":["aoutL, aoutR reverbsc ainL, ainR, kfblvl, kfco[, israte[, ipitchm[, iskip]]] "],"type":"opcode","opname":"reverbsc"},{"id":"rewindscore","short_desc":"Rewinds the playback position of the current score performance.","synopsis":[" rewindscore"],"type":"opcode","opname":"rewindscore"},{"id":"rezzy","short_desc":"A resonant low-pass filter.","synopsis":["ares rezzy asig, xfco, xres [, imode, iskip]"],"type":"opcode","opname":"rezzy"},{"id":"rfft","short_desc":"Fast Fourier Transform of a real-value array.","synopsis":["kout[] rfft kin[]"],"type":"opcode","opname":"rfft"},{"id":"rifft","short_desc":"Complex-to-real Inverse Fast Fourier Transform.","synopsis":["kout[] rifft kin[]"],"type":"opcode","opname":"rifft"},{"id":"rigoto","short_desc":"Transfers control during a reinit pass.","synopsis":["rigoto label"],"type":"opcode","opname":"rigoto"},{"id":"rireturn","short_desc":"Terminates a reinit pass.","synopsis":["rireturn"],"type":"opcode","opname":"rireturn"},{"id":"rms","short_desc":"Determines the root-mean-square amplitude of an audio signal.","synopsis":["kres rms asig [, ihp] [, iskip]"],"type":"opcode","opname":"rms"},{"id":"rnd","short_desc":"Returns a random number in a unipolar range at the rate given by the input argument.","synopsis":["rnd(x) (init- or control-rate only)"],"type":"opcode","opname":"rnd"},{"id":"rnd31","short_desc":"31-bit bipolar random opcodes with controllable distribution.","synopsis":["ax rnd31 kscl, krpow [, iseed]","ix rnd31 iscl, irpow [, iseed]","kx rnd31 kscl, krpow [, iseed]"],"type":"opcode","opname":"rnd31"},{"id":"rndseed","short_desc":"Sets the global rndseed value.","synopsis":["rndseed ival"],"type":"opcode","opname":"rndseed"},{"id":"round","short_desc":"Returns the integer value nearest to x ; if the fractional part of x is exactly 0.5, the direction of rounding is undefined and may depend on the host operating system and Csound version.","synopsis":["round(x) (init-, control-, or audio-rate arg allowed)","round(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"round"},{"id":"rspline","short_desc":"Generate random spline curves.","synopsis":["ares rspline xrangeMin, xrangeMax, kcpsMin, kcpsMax","kres rspline krangeMin, krangeMax, kcpsMin, kcpsMax"],"type":"opcode","opname":"rspline"},{"id":"rtclock","short_desc":"Read the real time clock from the operating system.","synopsis":["ires rtclock","kres rtclock"],"type":"opcode","opname":"rtclock"},{"id":"s16b14","short_desc":"Creates a bank of 16 different 14-bit MIDI control message numbers.","synopsis":["i1,...,i16 s16b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16","k1,...,k16 s16b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16"],"type":"opcode","opname":"s16b14"},{"id":"s32b14","short_desc":"Creates a bank of 32 different 14-bit MIDI control message numbers.","synopsis":["i1,...,i32 s32b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32","k1,...,k32 s32b14 ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32"],"type":"opcode","opname":"s32b14"},{"id":"samphold","short_desc":"Performs a sample-and-hold operation on its input.","synopsis":["ares samphold asig, agate [, ival] [, ivstor]","kres samphold ksig, kgate [, ival] [, ivstor]"],"type":"opcode","opname":"samphold"},{"id":"sandpaper","short_desc":"Semi-physical model of a sandpaper sound.","synopsis":["ares sandpaper iamp, idettack [, inum] [, idamp] [, imaxshake]"],"type":"opcode","opname":"sandpaper"},{"id":"sc_lag","short_desc":"Exponential Lag (DEPRECATED)","synopsis":["aout sc_lag ain, klagtime [, initialvalue]","kout sc_lag kin, klagtime [, initialvalue]"],"type":"opcode","opname":"sc_lag"},{"id":"sc_lagud","short_desc":"Exponential Lag (Deprecated)","synopsis":["aout sc_lagud ain, klagup, klagdown [, initialvalue]","kout sc_lagud kin, klagup, klagdown [, initialvalue]"],"type":"opcode","opname":"sc_lagud"},{"id":"sc_phasor","short_desc":"A resettable linear ramp between two levels (renamed as trigphasor)","synopsis":["aindex sc_phasor xtrig, xrate, kstart, kend [, kresetPos] ","kindex sc_phasor xtrig, xrate, kstart, kend [, kresetPos] "],"type":"opcode","opname":"sc_phasor"},{"id":"sc_trig","short_desc":"Timed trigger (Replaced by trighold)","synopsis":["aout sc_trig ain, kdur","kout sc_trig kin, kdur"],"type":"opcode","opname":"sc_trig"},{"id":"scale","short_desc":"Arbitrary signal scaling.","synopsis":["kscl scale kinput, kmax, kmin[, kimax, kimin]"],"type":"opcode","opname":"scale"},{"id":"scale2","short_desc":"Arbitrary signal scaling with optional smoothing.","synopsis":["kscl scale2 kinput, kmin, kmax[, kimin, kimax][ihtime]"],"type":"opcode","opname":"scale2"},{"id":"scalearray","short_desc":"Scales the values in a range of a vector (one dimensional array).","synopsis":["scalearray tarray, kmin, kmax[, kleft, kright]"],"type":"opcode","opname":"scalearray"},{"id":"scanhammer","short_desc":"Copies from one table to another with a gain control.","synopsis":["scanhammer isrc, idst, ipos, imult"],"type":"opcode","opname":"scanhammer"},{"id":"scanmap","short_desc":"Allows the position and velocity of a node in a scanned process to be read.","synopsis":["kpos, kvel scanmap iscan, kamp, kvamp [, iwhich]"],"type":"opcode","opname":"scanmap"},{"id":"scans","short_desc":"Generate audio output using scanned synthesis.","synopsis":["ares scans kamp, kfreq, ifn, id [, iorder]"],"type":"opcode","opname":"scans"},{"id":"scansmap","short_desc":"Allows the position and velocity of a node in a scanned process to be written.","synopsis":["scansmap kpos, kvel, iscan, kamp, kvamp [, iwhich]"],"type":"opcode","opname":"scansmap"},{"id":"scantable","short_desc":"A simpler scanned synthesis implementation.","synopsis":["aout scantable kamp, kpch, ipos, imass, istiff, idamp, ivel"],"type":"opcode","opname":"scantable"},{"id":"scanu","short_desc":"Compute the waveform and the wavetable for use in scanned synthesis.","synopsis":["scanu init, irate, ifndisplace, ifnmass, ifnmatrix, ifncentr, ifndamp, kmass, kmtrxstiff, kcentr, kdamp, ileft, iright, kpos, kdisplace, ain, idisp, id"],"type":"opcode","opname":"scanu"},{"id":"scanu2","short_desc":"Compute the waveform and the wavetable for use in scanned synthesis.","synopsis":["scanu2 init, irate, ifndisplace, ifnmass, ifnmatrix, ifncentr, ifndamp, kmass, kmtrxstiff, kcentr, kdamp, ileft, iright, kpos, kdisplace, ain, idisp, id"],"type":"opcode","opname":"scanu2"},{"id":"schedkwhen","short_desc":"Adds a new score event generated by a k-rate trigger.","synopsis":["schedkwhen ktrigger, kmintim, kmaxnum, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]","schedkwhen ktrigger, kmintim, kmaxnum, \"insname\", kwhen, kdur [, ip4] [, ip5] [...]"],"type":"opcode","opname":"schedkwhen"},{"id":"schedkwhennamed","short_desc":"Similar to schedkwhen but uses a named instrument at init-time.","synopsis":["schedkwhennamed ktrigger, kmintim, kmaxnum, \"name\", kwhen, kdur [, ip4] [, ip5] [...]"],"type":"opcode","opname":"schedkwhennamed"},{"id":"schedule","short_desc":"Adds a new score event.","synopsis":["schedule insnum, iwhen, idur [, ip4] [, ip5] [...]","schedule \"insname\", iwhen, idur [, ip4] [, ip5] [...]","schedule iPar[]"],"type":"opcode","opname":"schedule"},{"id":"schedulek","short_desc":"Adds a new score event.","synopsis":["schedulek knsnum, kwhen, kdur [, kp4] [, kp5] [...]","schedulek \"insname\", kwhen, kdur [, kp4] [, kp5] [...]","schedule kPar[]"],"type":"opcode","opname":"schedulek"},{"id":"schedwhen","short_desc":"Adds a new score event.","synopsis":["schedwhen ktrigger, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]","schedwhen ktrigger, \"insname\", kwhen, kdur [, ip4] [, ip5] [...]"],"type":"opcode","opname":"schedwhen"},{"id":"scoreline","short_desc":"Issues one or more score line events from an instrument.","synopsis":["scoreline Sin, ktrig"],"type":"opcode","opname":"scoreline"},{"id":"scoreline_i","short_desc":"Issues one or more score line events from an instrument at i-time.","synopsis":["scoreline_i Sin"],"type":"opcode","opname":"scoreline_i"},{"id":"seed","short_desc":"Sets the global seed value.","synopsis":["seed ival"],"type":"opcode","opname":"seed"},{"id":"sekere","short_desc":"Semi-physical model of a sekere sound.","synopsis":["ares sekere iamp, idettack [, inum] [, idamp] [, imaxshake]"],"type":"opcode","opname":"sekere"},{"id":"select","short_desc":"Select sample value based on audio-rate comparisons.","synopsis":["aout select a1, a2, aless, aequal, amore"],"type":"opcode","opname":"select"},{"id":"semitone","short_desc":"Calculates a factor to raise\/lower a frequency by a given amount of semitones.","synopsis":["semitone(x)"],"type":"opcode","opname":"semitone"},{"id":"sense","short_desc":"Same as the sensekey opcode.","synopsis":[],"type":"opcode","opname":"sense"},{"id":"sensekey","short_desc":"Returns the ASCII code of a key that has been pressed.","synopsis":["kres[, kkeydown] sensekey"],"type":"opcode","opname":"sensekey"},{"id":"seqtime","short_desc":"Generates a trigger signal according to the values stored in a table.","synopsis":["ktrig_out seqtime ktime_unit, kstart, kloop, kinitndx, kfn_times"],"type":"opcode","opname":"seqtime"},{"id":"seqtime2","short_desc":"Generates a trigger signal according to the values stored in a table.","synopsis":["ktrig_out seqtime2 ktrig_in, ktime_unit, kstart, kloop, kinitndx, kfn_times"],"type":"opcode","opname":"seqtime2"},{"id":"sequ","short_desc":"Emulate a hardware sequencer","synopsis":["kres sequ irhythm[], iinstr[], idata[], kbpm, klen [, kmode] [, kstep] [, kreset] [, kverbose] ","kres sequ irhythm[], iinstr[], idata[][], kbpm, klen [, kmode] [, kstep] [, kreset] [, kverbose] "],"type":"opcode","opname":"sequ"},{"id":"serialBegin","short_desc":"Open a serial port.","synopsis":["iPort serialBegin SPortName [, ibaudRate]"],"type":"opcode","opname":"serialBegin"},{"id":"serialEnd","short_desc":"Close a serial port.","synopsis":[" serialEnd iPort"],"type":"opcode","opname":"serialEnd"},{"id":"serialFlush","short_desc":"Flush data from a serial port.","synopsis":[" serialFlush iPort"],"type":"opcode","opname":"serialFlush"},{"id":"serialPrint","short_desc":"Print data from a serial port.","synopsis":[" serialPrint iPort"],"type":"opcode","opname":"serialPrint"},{"id":"serialRead","short_desc":"Read data from a serial port.","synopsis":["kByte serialRead iPort"],"type":"opcode","opname":"serialRead"},{"id":"serialWrite","short_desc":"Write data to a serial port.","synopsis":[" serialWrite iPort, iByte"," serialWrite iPort, kByte"," serialWrite iPort, SBytes"],"type":"opcode","opname":"serialrite"},{"id":"serialWrite_i","short_desc":"Write data to a serial port.","synopsis":[" serialWrite_i iPort, iByte"," serialWrite_i iPort, SBytes"],"type":"opcode","opname":"serialrite_i"},{"id":"setcol","short_desc":"Sets a given column of a 2-dimensional array from a vector.","synopsis":["i\/kout[] setcoli\/kin[],i\/kcol"],"type":"opcode","opname":"setcol"},{"id":"setctrl","short_desc":"Configurable slider controls for realtime user input.","synopsis":["setctrl inum, ival, itype"],"type":"opcode","opname":"setctrl"},{"id":"setksmps","short_desc":"Sets the local ksmps value in an instrument or user-defined opcode block","synopsis":["setksmps iksmps"],"type":"opcode","opname":"setksmps"},{"id":"setrow","short_desc":"Sets a given row of a 2-dimensional array from a vector.","synopsis":["i\/kout[] setrow i\/kin[],i\/krow"],"type":"opcode","opname":"setrow"},{"id":"setscorepos","short_desc":"Sets the playback position of the current score performance to a given position.","synopsis":[" setscorepos ipos"],"type":"opcode","opname":"setscorepos"},{"id":"sfilist","short_desc":"Prints a list of all instruments of a previously loaded SoundFont2 (SF2) file.","synopsis":["sfilist ifilhandle [, Sprintprefix] "],"type":"opcode","opname":"sfilist"},{"id":"sfinstr","short_desc":"Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound.","synopsis":["ar1, ar2 sfinstr ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]"],"type":"opcode","opname":"sfinstr"},{"id":"sfinstr3","short_desc":"Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation.","synopsis":["ar1, ar2 sfinstr3 ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]"],"type":"opcode","opname":"sfinstr3"},{"id":"sfinstr3m","short_desc":"Plays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation.","synopsis":["ares sfinstr3m ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]"],"type":"opcode","opname":"sfinstr3m"},{"id":"sfinstrm","short_desc":"Plays a SoundFont2 (SF2) sample instrument, generating a mono sound.","synopsis":["ares sfinstrm ivel, inotenum, xamp, xfreq, instrnum, ifilhandle [, iflag] [, ioffset]"],"type":"opcode","opname":"sfinstrm"},{"id":"sfload","short_desc":"Loads an entire SoundFont2 (SF2) sample file into memory.","synopsis":["ir sfload \"filename\""],"type":"opcode","opname":"sfload"},{"id":"sflooper","short_desc":"Plays a SoundFont2 (SF2) sample preset, generating a stereo sound, with user-defined time-varying crossfade looping.","synopsis":["ar1, ar2 sflooper ivel, inotenum, kamp, kpitch, ipreindex, kloopstart, kloopend, kcrossfade [, istart, imode, ifenv, iskip, iflag] "],"type":"opcode","opname":"sflooper"},{"id":"sfpassign","short_desc":"Assigns all presets of a SoundFont2 (SF2) sample file to a sequence of progressive index numbers.","synopsis":["sfpassign istartindex, ifilhandle[, imsgs]"],"type":"opcode","opname":"sfpassign"},{"id":"sfplay","short_desc":"Plays a SoundFont2 (SF2) sample preset, generating a stereo sound.","synopsis":["ar1, ar2 sfplay ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]"],"type":"opcode","opname":"sfplay"},{"id":"sfplay3","short_desc":"Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation.","synopsis":["ar1, ar2 sfplay3 ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]"],"type":"opcode","opname":"sfplay3"},{"id":"sfplay3m","short_desc":"Plays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation.","synopsis":["ares sfplay3m ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]"],"type":"opcode","opname":"sfplay3m"},{"id":"sfplaym","short_desc":"Plays a SoundFont2 (SF2) sample preset, generating a mono sound.","synopsis":["ares sfplaym ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]"],"type":"opcode","opname":"sfplaym"},{"id":"sfplist","short_desc":"Prints a list of all presets of a SoundFont2 (SF2) sample file.","synopsis":["sfplist ifilhandle"],"type":"opcode","opname":"sfplist"},{"id":"sfpreset","short_desc":"Assigns an existing preset of a SoundFont2 (SF2) sample file to an index number.","synopsis":["ir sfpreset iprog, ibank, ifilhandle, ipreindex"],"type":"opcode","opname":"sfpreset"},{"id":"shaker","short_desc":"Sounds like the shaking of a maraca or similar gourd instrument.","synopsis":["ares shaker kamp, kfreq, kbeans, kdamp, ktimes [, idecay]"],"type":"opcode","opname":"shaker"},{"id":"shiftin","short_desc":"Shifts the contents of an audio variable into a 1-dimensional array.","synopsis":["kout[] shiftin asig"],"type":"opcode","opname":"shiftin"},{"id":"shiftout","short_desc":"Shifts the contents of a 1-dimensional array into an audio variable.","synopsis":["asig shiftout kIn[][, ioff]"],"type":"opcode","opname":"shiftout"},{"id":"signum","short_desc":"Performs a signum function.","synopsis":["signum(x) (no rate restriction)"],"type":"opcode","opname":"signum"},{"id":"sin","short_desc":"Performs a sine function.","synopsis":["sin(x) (no rate restriction)","sin(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"sin"},{"id":"sinh","short_desc":"Performs a hyperbolic sine function.","synopsis":["sinh(x) (no rate restriction)","sinh(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"sinh"},{"id":"sininv","short_desc":"Performs an arcsine function.","synopsis":["sininv(x) (no rate restriction)","sininv(k\/i[]) (k- or i-arrays)"],"type":"opcode","opname":"sininv"},{"id":"sinsyn","short_desc":"Streaming partial track additive synthesis with cubic phase interpolation","synopsis":["asig sinsyn fin, kscal, kmaxtracks, ifn"],"type":"opcode","opname":"sinsyn"},{"id":"skf","short_desc":"Sallen-Key filter.","synopsis":["asig skf asig, xcf, xK[, ihp, istor]"],"type":"opcode","opname":"skf"},{"id":"sleighbells","short_desc":"Semi-physical model of a sleighbell sound.","synopsis":["ares sleighbells kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]"],"type":"opcode","opname":"sleighbells"},{"id":"slicearray","short_desc":"Take a slice of a vector.","synopsis":["karray slicearray kinarray, istart, iend [,istride]"],"type":"opcode","opname":"slicearray"},{"id":"slider16","short_desc":"Creates a bank of 16 different MIDI control message numbers.","synopsis":["i1,...,i16 slider16 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum16, imin16, imax16, init16, ifn16","k1,...,k16 slider16 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum16, imin16, imax16, init16, ifn16"],"type":"opcode","opname":"slider16"},{"id":"slider16f","short_desc":"Creates a bank of 16 different MIDI control message numbers, filtered before output.","synopsis":["k1,...,k16 slider16f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1,..., ictlnum16, imin16, imax16, init16, ifn16, icutoff16"],"type":"opcode","opname":"slider16f"},{"id":"slider16table","short_desc":"Stores a bank of 16 different MIDI control messages to a table.","synopsis":["kflag slider16table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum16, imin16, imax16, init16, ifn16"],"type":"opcode","opname":"slider16table"},{"id":"slider16tablef","short_desc":"Stores a bank of 16 different MIDI control messages to a table, filtered before output.","synopsis":["kflag slider16tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum16, imin16, imax16, init16, ifn16, icutoff16"],"type":"opcode","opname":"slider16tablef"},{"id":"slider32","short_desc":"Creates a bank of 32 different MIDI control message numbers.","synopsis":["i1,...,i32 slider32 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum32, imin32, imax32, init32, ifn32","k1,...,k32 slider32 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum32, imin32, imax32, init32, ifn32"],"type":"opcode","opname":"slider32"},{"id":"slider32f","short_desc":"Creates a bank of 32 different MIDI control message numbers, filtered before output.","synopsis":["k1,...,k32 slider32f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, ..., ictlnum32, imin32, imax32, init32, ifn32, icutoff32"],"type":"opcode","opname":"slider32f"},{"id":"slider32table","short_desc":"Stores a bank of 32 different MIDI control messages to a table.","synopsis":["kflag slider32table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum32, imin32, imax32, init32, ifn32"],"type":"opcode","opname":"slider32table"},{"id":"slider32tablef","short_desc":"Stores a bank of 32 different MIDI control messages to a table, filtered before output.","synopsis":["kflag slider32tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum32, imin32, imax32, init32, ifn32, icutoff32"],"type":"opcode","opname":"slider32tablef"},{"id":"slider64","short_desc":"Creates a bank of 64 different MIDI control message numbers.","synopsis":["i1,...,i64 slider64 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum64, imin64, imax64, init64, ifn64","k1,...,k64 slider64 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum64, imin64, imax64, init64, ifn64"],"type":"opcode","opname":"slider64"},{"id":"slider64f","short_desc":"Creates a bank of 64 different MIDI control message numbers, filtered before output.","synopsis":["k1,...,k64 slider64f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1,..., ictlnum64, imin64, imax64, init64, ifn64, icutoff64"],"type":"opcode","opname":"slider64f"},{"id":"slider64table","short_desc":"Stores a bank of 64 different MIDI control messages to a table.","synopsis":["kflag slider64table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, .... , ictlnum64, imin64, imax64, init64, ifn64"],"type":"opcode","opname":"slider64table"},{"id":"slider64tablef","short_desc":"Stores a bank of 64 different MIDI control messages to a table, filtered before output.","synopsis":["kflag slider64tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum64, imin64, imax64, init64, ifn64, icutoff64"],"type":"opcode","opname":"slider64tablef"},{"id":"slider8","short_desc":"Creates a bank of 8 different MIDI control message numbers.","synopsis":["i1,...,i8 slider8 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8","k1,...,k8 slider8 ichan, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8"],"type":"opcode","opname":"slider8"},{"id":"slider8f","short_desc":"Creates a bank of 8 different MIDI control message numbers, filtered before output.","synopsis":["k1,...,k8 slider8f ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, ..., ictlnum8, imin8, imax8, init8, ifn8, icutoff8"],"type":"opcode","opname":"slider8f"},{"id":"slider8table","short_desc":"Stores a bank of 8 different MIDI control messages to a table.","synopsis":["kflag slider8table ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8"],"type":"opcode","opname":"slider8table"},{"id":"slider8tablef","short_desc":"Stores a bank of 8 different MIDI control messages to a table, filtered before output.","synopsis":["kflag slider8tablef ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, .... , ictlnum8, imin8, imax8, init8, ifn8, icutoff8"],"type":"opcode","opname":"slider8tablef"},{"id":"sliderKawai","short_desc":"Creates a bank of 16 different MIDI control message numbers from a KAWAI MM-16 midi mixer.","synopsis":["k1, k2, ...., k16 sliderKawai imin1, imax1, init1, ifn1, imin2, imax2, init2, ifn2, ..., imin16, imax16, init16, ifn16"],"type":"opcode","opname":"sliderKawai"},{"id":"sndload","short_desc":"Loads a sound file into memory for use by loscilx","synopsis":["sndload Sfname[, ifmt[, ichns[, isr[, ibas[, iamp[, istrt [, ilpmod[, ilps[, ilpe]]]]]]]]]"],"type":"opcode","opname":"sndload"},{"id":"sndloop","short_desc":"A sound looper with pitch control.","synopsis":["asig, krec sndloop ain, kpitch, ktrig, idur, ifad"],"type":"opcode","opname":"sndloop"},{"id":"sndwarp","short_desc":"Reads a mono sound sample from a table and applies time-stretching and\/or pitch modification.","synopsis":["ares [, ac] sndwarp xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, irandw, ioverlap, ifn2, itimemode"],"type":"opcode","opname":"sndwarp"},{"id":"sndwarpst","short_desc":"Reads a stereo sound sample from a table and applies time-stretching and\/or pitch modification.","synopsis":["ar1, ar2 [,ac1] [, ac2] sndwarpst xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, irandw, ioverlap, ifn2, itimemode"],"type":"opcode","opname":"sndwarpst"},{"id":"sockrecv","short_desc":"Receives data from other processes using the low-level UDP or TCP protocols","synopsis":["asig sockrecv iport, ilength","ksig sockrecv iport, ilength","asigl, asigr sockrecvs iport, ilength","String sockrecv iport, ilength","asig[,kstate] strecv Sipaddr, iport"],"type":"opcode","opname":"sockrecv"},{"id":"socksend","short_desc":"Sends data to other processes using the low-level UDP or TCP protocols","synopsis":["socksend asig, Sipaddr, iport, ilength","socksend ksig, Sipaddr, iport, ilength","socksends asigl, asigr, Sipaddr, iport, ilength","stsend asig, Sipaddr, iport"],"type":"opcode","opname":"socksend"},{"id":"sorta","short_desc":"Sorts an array in ascending order.","synopsis":["k\/i[]sorta k\/i[] (k- or i-arrays )"],"type":"opcode","opname":"sorta"},{"id":"sortd","short_desc":"Sorts an array in descending order.","synopsis":["k\/i[]sortd k\/i[] (k- or i-arrays )"],"type":"opcode","opname":"sortd"},{"id":"soundin","short_desc":"Reads audio data from an external device or stream.","synopsis":["ar1[, ar2[, ar3[, ... a24]]] soundin ifilcod [, iskptim] [, iformat] [, iskipinit] [, ibufsize]"],"type":"opcode","opname":"soundin"},{"id":"soundout","short_desc":"Deprecated. Writes audio output to a disk file.","synopsis":["soundout asig1, ifilcod [, iformat]"],"type":"opcode","opname":"soundout"},{"id":"soundouts","short_desc":"Deprecated. Writes audio output to a disk file.","synopsis":["soundouts asigl, asigr, ifilcod [, iformat]"],"type":"opcode","opname":"soundouts"},{"id":"space","short_desc":"Distributes an input signal among 4 channels using cartesian coordinates.","synopsis":["a1, a2, a3, a4 space asig, ifn, ktime, kreverbsend, kx, ky"],"type":"opcode","opname":"space"},{"id":"spat3d","short_desc":"Positions the input sound in a 3D space and allows moving the sound at k-rate.","synopsis":["aW, aX, aY, aZ spat3d ain, kX, kY, kZ, idist, ift, imode, imdel, iovr [, istor]"],"type":"opcode","opname":"spat3d"},{"id":"spat3di","short_desc":"Positions the input sound in a 3D space with the sound source position set at i-time.","synopsis":["aW, aX, aY, aZ spat3di ain, iX, iY, iZ, idist, ift, imode [, istor]"],"type":"opcode","opname":"spat3di"},{"id":"spat3dt","short_desc":"Can be used to render an impulse response for a 3D space at i-time.","synopsis":["spat3dt ioutft, iX, iY, iZ, idist, ift, imode, irlen [, iftnocl]"],"type":"opcode","opname":"spat3dt"},{"id":"spdist","short_desc":"Calculates distance values from xy coordinates.","synopsis":["k1 spdist ifn, ktime, kx, ky"],"type":"opcode","opname":"spdist"},{"id":"specaddm","short_desc":"Perform a weighted add of two input spectra.","synopsis":["wsig specaddm wsig1, wsig2 [, imul2]"],"type":"opcode","opname":"specaddm"},{"id":"specdiff","short_desc":"Finds the positive difference values between consecutive spectral frames.","synopsis":["wsig specdiff wsigin"],"type":"opcode","opname":"specdiff"},{"id":"specdisp","short_desc":"Displays the magnitude values of the spectrum.","synopsis":["specdisp wsig, iprd [, iwtflg]"],"type":"opcode","opname":"specdisp"},{"id":"specfilt","short_desc":"Filters each channel of an input spectrum.","synopsis":["wsig specfilt wsigin, ifhtim"],"type":"opcode","opname":"specfilt"},{"id":"spechist","short_desc":"Accumulates the values of successive spectral frames.","synopsis":["wsig spechist wsigin"],"type":"opcode","opname":"spechist"},{"id":"specptrk","short_desc":"Estimates the pitch of the most prominent complex tone in the spectrum.","synopsis":["koct, kamp specptrk wsig, kvar, ilo, ihi, istr, idbthresh, inptls, irolloff [, iodd] [, iconfs] [, interp] [, ifprd] [, iwtflg]"],"type":"opcode","opname":"specptrk"},{"id":"specscal","short_desc":"Scales an input spectral datablock with spectral envelopes.","synopsis":["wsig specscal wsigin, ifscale, ifthresh"],"type":"opcode","opname":"specscal"},{"id":"specsum","short_desc":"Sums the magnitudes across all channels of the spectrum.","synopsis":["ksum specsum wsig [, interp]"],"type":"opcode","opname":"specsum"},{"id":"spectrum","short_desc":"Generate a constant-Q, exponentially-spaced DFT.","synopsis":["wsig spectrum xsig, iprd, iocts, ifrqa [, iq] [, ihann] [, idbout] [, idsprd] [, idsinrs]"],"type":"opcode","opname":"spectrum"},{"id":"spf","short_desc":"Steiner-Parker filter.","synopsis":["asig spf alp,ahp,abp, xcf, xR[, istor]"],"type":"opcode","opname":"spf"},{"id":"splitrig","short_desc":"Split a trigger signal","synopsis":["splitrig ktrig, kndx, imaxtics, ifn, kout1 [,kout2,...,koutN]"],"type":"opcode","opname":"splitrig"},{"id":"sprintf","short_desc":"printf-style formatted output to a string variable.","synopsis":["Sdst sprintf Sfmt, xarg1[, xarg2[, ... ]]"],"type":"opcode","opname":"sprintf"},{"id":"sprintfk","short_desc":"printf-style formatted output to a string variable at k-rate.","synopsis":["Sdst sprintfk Sfmt, xarg1[, xarg2[, ... ]]"],"type":"opcode","opname":"sprintfk"},{"id":"spsend","short_desc":"Generates output signals based on a previously defined space opcode.","synopsis":["a1, a2, a3, a4 spsend"],"type":"opcode","opname":"spsend"},{"id":"sqrt","short_desc":"Returns a square root value.","synopsis":["sqrt(x) (no rate restriction)","sqrt(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"sqrt"},{"id":"squinewave","short_desc":"A mostly bandlimited shape-shifting square-pulse-saw-sinewave oscillator with hardsync.","synopsis":["aout [, asyncout] squinewave acps, aClip, aSkew, asyncin [, iMinSweep] [, iphase]","aout [, asyncout] squinewave acps, aClip, aSkew [, ksyncin] [, iMinSweep] [, iphase]"],"type":"opcode","opname":"squinewave"},{"id":"sr","short_desc":"Sets the audio sampling rate.","synopsis":["sr = iarg"],"type":"opcode","opname":"sr"},{"id":"st2ms","short_desc":"Stereo to Mid-Side Conversion.","synopsis":["am,as st2ms aleft,aright"],"type":"opcode","opname":"st2ms"},{"id":"stack","short_desc":"Initializes the stack. Deprecated.","synopsis":["stack iStackSize"],"type":"opcode","opname":"stack"},{"id":"statevar","short_desc":"State-variable filter.","synopsis":["ahp,alp,abp,abr statevar ain, xcf, xq [, iosamps, istor]"],"type":"opcode","opname":"statevar"},{"id":"sterrain","short_desc":"A wave-terrain synthesis opcode using curves computed with the superformula","synopsis":["aout sterrain kamp, kcps, kx, ky, krx, kry, krot, ktab0, ktab1, km1, km2, kn1, kn2, kn3, ka, kb, kperiod "],"type":"opcode","opname":"sterrain"},{"id":"stix","short_desc":"Semi-physical model of a stick sound.","synopsis":["ares stix iamp, idettack [, inum] [, idamp] [, imaxshake]"],"type":"opcode","opname":"stix"},{"id":"strcat","short_desc":"Concatenate strings","synopsis":["Sdst strcat Ssrc1, Ssrc2"],"type":"opcode","opname":"strcat"},{"id":"strcatk","short_desc":"Concatenate strings (k-rate)","synopsis":["Sdst strcatk Ssrc1, Ssrc2"],"type":"opcode","opname":"strcatk"},{"id":"strchar","short_desc":"Return the ASCII code of a character in a string","synopsis":["ichr strchar Sstr[, ipos]"],"type":"opcode","opname":"strchar"},{"id":"strchark","short_desc":"Return the ASCII code of a character in a string","synopsis":["kchr strchark Sstr[, kpos]"],"type":"opcode","opname":"strchark"},{"id":"strcmp","short_desc":"Compare strings","synopsis":["ires strcmp S1, S2"],"type":"opcode","opname":"strcmp"},{"id":"strcmpk","short_desc":"Compare strings","synopsis":["kres strcmpk S1, S2"],"type":"opcode","opname":"strcmpk"},{"id":"strcpy","short_desc":"Assign value to a string variable","synopsis":["Sdst strcpy Ssrc","Sdst = Ssrc"],"type":"opcode","opname":"strcpy"},{"id":"strcpyk","short_desc":"Assign value to a string variable (k-rate)","synopsis":["Sdst strcpyk Ssrc"],"type":"opcode","opname":"strcpyk"},{"id":"streson","short_desc":"A string resonator with variable fundamental frequency.","synopsis":["ares streson asig, kfr, kfdbgain"],"type":"opcode","opname":"streson"},{"id":"strfromurl","short_desc":"Set string variable to value read from an URL","synopsis":["Sdst strfromurl StringURL"],"type":"opcode","opname":"strfromurl"},{"id":"strget","short_desc":"Set string variable to value from strset table or string p-field","synopsis":["Sdst strget indx"],"type":"opcode","opname":"strget"},{"id":"strindex","short_desc":"Return the position of the first occurence of a string in another string","synopsis":["ipos strindex S1, S2"],"type":"opcode","opname":"strindex"},{"id":"strindexk","short_desc":"Return the position of the first occurence of a string in another string","synopsis":["kpos strindexk S1, S2"],"type":"opcode","opname":"strindexk"},{"id":"strlen","short_desc":"Return the length of a string","synopsis":["ilen strlen Sstr"],"type":"opcode","opname":"strlen"},{"id":"strlenk","short_desc":"Return the length of a string","synopsis":["klen strlenk Sstr"],"type":"opcode","opname":"strlenk"},{"id":"strlower","short_desc":"Convert a string to lower case","synopsis":["Sdst strlower Ssrc"],"type":"opcode","opname":"strlower"},{"id":"strlowerk","short_desc":"Convert a string to lower case","synopsis":["Sdst strlowerk Ssrc"],"type":"opcode","opname":"strlowerk"},{"id":"strrindex","short_desc":"Return the position of the last occurence of a string in another string","synopsis":["ipos strrindex S1, S2"],"type":"opcode","opname":"strrindex"},{"id":"strrindexk","short_desc":"Return the position of the last occurence of a string in another string","synopsis":["kpos strrindexk S1, S2"],"type":"opcode","opname":"strrindexk"},{"id":"strset","short_desc":"Allows a string to be linked with a numeric value.","synopsis":["strset iarg, istring"],"type":"opcode","opname":"strset"},{"id":"strstrip","short_desc":"Strip whitespace from string","synopsis":["Sout strstrip Sin [, Smode]"],"type":"opcode","opname":"strstrip"},{"id":"strsub","short_desc":"Extract a substring","synopsis":["Sdst strsub Ssrc[, istart[, iend]]"],"type":"opcode","opname":"strsub"},{"id":"strsubk","short_desc":"Extract a substring","synopsis":["Sdst strsubk Ssrc, kstart, kend"],"type":"opcode","opname":"strsubk"},{"id":"strtod","short_desc":"Converts a string to a float (i-rate).","synopsis":["ir strtod Sstr","ir strtod indx"],"type":"opcode","opname":"strtod"},{"id":"strtodk","short_desc":"Converts a string to a float (k-rate).","synopsis":["kr strtodk Sstr","kr strtodk kndx"],"type":"opcode","opname":"strtodk"},{"id":"strtol","short_desc":"Converts a string to a signed integer (i-rate).","synopsis":["ir strtol Sstr","ir strtol indx"],"type":"opcode","opname":"strtol"},{"id":"strtolk","short_desc":"Converts a string to a signed integer (k-rate).","synopsis":["kr strtolk Sstr","kr strtolk kndx"],"type":"opcode","opname":"strtolk"},{"id":"strupper","short_desc":"Convert a string to upper case","synopsis":["Sdst strupper Ssrc"],"type":"opcode","opname":"strupper"},{"id":"strupperk","short_desc":"Convert a string to upper case","synopsis":["Sdst strupperk Ssrc"],"type":"opcode","opname":"strupperk"},{"id":"subinstr","short_desc":"Creates and runs a numbered instrument instance.","synopsis":["a1, [...] [, a8] subinstr instrnum [, p4] [, p5] [...]","a1, [...] [, a8] subinstr \"insname\" [, p4] [, p5] [...]"],"type":"opcode","opname":"subinstr"},{"id":"subinstrinit","short_desc":"Creates and runs a numbered instrument instance at init-time.","synopsis":["subinstrinit instrnum [, p4] [, p5] [...]","subinstrinit \"insname\" [, p4] [, p5] [...]"],"type":"opcode","opname":"subinstrinit"},{"id":"subtracts","short_desc":"Subtraction operator.","synopsis":["-a (no rate restriction)","a - b (no rate restriction)"],"type":"opcode","opname":"-"},{"id":"sum","short_desc":"Sums any number of a-rate signals, or array elements.","synopsis":["ares sum asig1 [, asig2] [, asig3] [...]","kres sum karr","ires sum iarr"],"type":"opcode","opname":"sum"},{"id":"sumarray","short_desc":"returns the sum of the elements in an array.","synopsis":["ksum sumarray karray"],"type":"opcode","opname":"sumarray"},{"id":"svfilter","short_desc":"A resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.","synopsis":["alow, ahigh, aband svfilter asig, kcf, kq [, iscl] [, iskip]"],"type":"opcode","opname":"svfilter"},{"id":"svn","short_desc":"Non-linear state variable filter","synopsis":["ahp,alp,abp,abr svn asig, xcf, xQ, kdrive[, ifn,inm,imx, istor]"],"type":"opcode","opname":"svn"},{"id":"syncgrain","short_desc":"Synchronous granular synthesis.","synopsis":["asig syncgrain kamp, kfreq, kpitch, kgrsize, kprate, ifun1, ifun2, iolaps"],"type":"opcode","opname":"syncgrain"},{"id":"syncloop","short_desc":"Synchronous granular synthesis.","synopsis":["asig syncloop kamp, kfreq, kpitch, kgrsize, kprate, klstart, klend, ifun1, ifun2, iolaps[,istart, iskip]"],"type":"opcode","opname":"syncloop"},{"id":"syncphasor","short_desc":"Produces a normalized moving phase value with sync input and output.","synopsis":["aphase, asyncout syncphasor xcps, asyncin, [, iphs]"],"type":"opcode","opname":"syncphasor"},{"id":"system","short_desc":"Call an external program via the system call","synopsis":["ires system_i itrig, Scmd, [inowait]","kres system ktrig, Scmd, [knowait]"],"type":"opcode","opname":"system"},{"id":"tab","short_desc":"Fast table opcode.","synopsis":["kr tab kndx, ifn[, ixmode]","ar tab xndx, ifn[, ixmode]"],"type":"opcode","opname":"tab"},{"id":"tab2array","short_desc":"Copy a slice from an f-table to an array","synopsis":["kout[] tab2array ifn [, kstart, kend, kstep ]","iout[] tab2array ifn [, istart, iend, istep ]"],"type":"opcode","opname":"tab2array"},{"id":"tab2pvs","short_desc":"Copies spectral data from k-rate arrays (or t-variables.). Also known as pvsfromarray.","synopsis":["fsig tab2pvs tvar|karr[][,ihopsize, iwinsize, iwintype]","fsig tab2pvs kmags[], kfreqs[][,ihopsize, iwinsize, iwintype]"],"type":"opcode","opname":"tab2pvs"},{"id":"tab_i","short_desc":"Fast table opcodes.","synopsis":["ir tab_i indx, ifn[, ixmode]"],"type":"opcode","opname":"tab_i"},{"id":"tabifd","short_desc":"Instantaneous Frequency Distribution, magnitude and phase analysis.","synopsis":["ffr,fphs tabifd ktimpt, kamp, kpitch, ifftsize, ihopsize, iwintype,ifn"],"type":"opcode","opname":"tabifd"},{"id":"table","short_desc":"Accesses table values by direct indexing.","synopsis":["ares table andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires table indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres table kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"table"},{"id":"table3","short_desc":"Accesses table values by direct indexing with cubic interpolation.","synopsis":["ares table3 andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires table3 indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres table3 kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"table3"},{"id":"tablecopy","short_desc":"Simple, fast table copy opcode.","synopsis":["tablecopy kdft, ksft"],"type":"opcode","opname":"tablecopy"},{"id":"tablefilter","short_desc":"Filters a source table and writes result into a destination table.","synopsis":["knumpassed tablefilter kouttable, kintatble, kmode, kparam"],"type":"opcode","opname":"tablefilter"},{"id":"tablefilteri","short_desc":"Filters a source table and writes result into a destination table.","synopsis":["inumpassed tablefilteri iouttable, iintatble, imode, iparam"],"type":"opcode","opname":"tablefilteri"},{"id":"tablegpw","short_desc":"Writes a table\\'s guard point.","synopsis":["tablegpw kfn"],"type":"opcode","opname":"tablegpw"},{"id":"tablei","short_desc":"Accesses table values by direct indexing with linear interpolation.","synopsis":["ares tablei andx, ifn [, ixmode] [, ixoff] [, iwrap]","ires tablei indx, ifn [, ixmode] [, ixoff] [, iwrap]","kres tablei kndx, ifn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"tablei"},{"id":"tableicopy","short_desc":"Simple, fast table copy opcode.","synopsis":["tableicopy idft, isft"],"type":"opcode","opname":"tableicopy"},{"id":"tableigpw","short_desc":"Writes a table\\'s guard point.","synopsis":["tableigpw ifn"],"type":"opcode","opname":"tableigpw"},{"id":"tableikt","short_desc":"Provides k-rate control over table numbers.","synopsis":["ares tableikt xndx, kfn [, ixmode] [, ixoff] [, iwrap]","kres tableikt kndx, kfn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"tableikt"},{"id":"tableimix","short_desc":"Mixes two tables.","synopsis":["tableimix idft, idoff, ilen, is1ft, is1off, is1g, is2ft, is2off, is2g"],"type":"opcode","opname":"tableimix"},{"id":"tableiw","short_desc":"Deprecated.","synopsis":["tableiw isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]"],"type":"opcode","opname":"tableiw"},{"id":"tablekt","short_desc":"Provides k-rate control over table numbers.","synopsis":["ares tablekt xndx, kfn [, ixmode] [, ixoff] [, iwrap]","kres tablekt kndx, kfn [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"tablekt"},{"id":"tablemix","short_desc":"Mixes two tables.","synopsis":["tablemix kdft, kdoff, klen, ks1ft, ks1off, ks1g, ks2ft, ks2off, ks2g"],"type":"opcode","opname":"tablemix"},{"id":"tableng","short_desc":"Interrogates a function table for length.","synopsis":["ires tableng ifn","kres tableng kfn"],"type":"opcode","opname":"tableng"},{"id":"tablera","short_desc":"Reads tables in sequential locations.","synopsis":["ares tablera kfn, kstart, koff"],"type":"opcode","opname":"tablera"},{"id":"tableseg","short_desc":"Creates a new function table by making linear segments between values in stored function tables.","synopsis":["tableseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]"],"type":"opcode","opname":"tableseg"},{"id":"tableshuffle","short_desc":"shuffles the content of a function table so that each element of the source table is put into a different random position.","synopsis":["tableshuffle ktablenum","tableshufflei itablenum"],"type":"opcode","opname":"tableshuffle"},{"id":"tablew","short_desc":"Change the contents of existing function tables.","synopsis":["tablew asig, andx, ifn [, ixmode] [, ixoff] [, iwgmode]","tablew isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]","tablew ksig, kndx, ifn [, ixmode] [, ixoff] [, iwgmode]"],"type":"opcode","opname":"tablew"},{"id":"tablewa","short_desc":"Writes tables in sequential locations.","synopsis":["kstart tablewa kfn, asig, koff"],"type":"opcode","opname":"tablewa"},{"id":"tablewkt","short_desc":"Change the contents of existing function tables.","synopsis":["tablewkt asig, andx, kfn [, ixmode] [, ixoff] [, iwgmode]","tablewkt ksig, kndx, kfn [, ixmode] [, ixoff] [, iwgmode]"],"type":"opcode","opname":"tablewkt"},{"id":"tablexkt","short_desc":"Reads function tables with linear, cubic, or sinc interpolation.","synopsis":["ares tablexkt xndx, kfn, kwarp, iwsize [, ixmode] [, ixoff] [, iwrap]"],"type":"opcode","opname":"tablexkt"},{"id":"tablexseg","short_desc":"Creates a new function table by making exponential segments between values in stored function tables.","synopsis":["tablexseg ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]"],"type":"opcode","opname":"tablexseg"},{"id":"tabmorph","short_desc":"Allow morphing between a set of tables.","synopsis":["kout tabmorph kindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ...,ifnN]"],"type":"opcode","opname":"tabmorph"},{"id":"tabmorpha","short_desc":"Allow morphing between a set of tables at audio rate with interpolation.","synopsis":["aout tabmorpha aindex, aweightpoint, atabnum1, atabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]"],"type":"opcode","opname":"tabmorpha"},{"id":"tabmorphak","short_desc":"Allow morphing between a set of tables at audio rate with interpolation.","synopsis":["aout tabmorphak aindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ... ifnN]"],"type":"opcode","opname":"tabmorphak"},{"id":"tabmorphi","short_desc":"Allow morphing between a set of tables with interpolation.","synopsis":["kout tabmorphi kindex, kweightpoint, ktabnum1, ktabnum2, ifn1, ifn2 [, ifn3, ifn4, ..., ifnN]"],"type":"opcode","opname":"tabmorphi"},{"id":"tabplay","short_desc":"Playing-back control signals.","synopsis":["tabplay ktrig, knumtics, kfn, kout1 [,kout2,..., koutN]"],"type":"opcode","opname":"tabplay"},{"id":"tabrec","short_desc":"Recording of control signals.","synopsis":["tabrec ktrig_start, ktrig_stop, knumtics, kfn, kin1 [,kin2,...,kinN]"],"type":"opcode","opname":"tabrec"},{"id":"tabsum","short_desc":"Adding values in a range of a table.","synopsis":["kr tabsum ifn[[, kmin] [, kmax]]"],"type":"opcode","opname":"tabsum"},{"id":"tabw","short_desc":"Fast table opcodes.","synopsis":[],"type":"opcode","opname":"tabw"},{"id":"tabw_i","short_desc":"Fast table opcodes.","synopsis":["tabw_i isig, indx, ifn [,ixmode]"],"type":"opcode","opname":"tabw_i"},{"id":"tambourine","short_desc":"Semi-physical model of a tambourine sound.","synopsis":["ares tambourine kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1] [, ifreq2]"],"type":"opcode","opname":"tambourine"},{"id":"tan","short_desc":"Performs a tangent function.","synopsis":["tan(x) (no rate restriction)","tan(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"tan"},{"id":"tanh","short_desc":"Performs a hyperbolic tangent function.","synopsis":["tanh(x) (no rate restriction)","tanh(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"tanh"},{"id":"taninv","short_desc":"Performs an arctangent function.","synopsis":["taninv(x) (no rate restriction)","taninv(k\/i[]) (k- or i-arrays )"],"type":"opcode","opname":"taninv"},{"id":"taninv2","short_desc":"Returns an arctangent.","synopsis":["ares taninv2 ay, ax","ires taninv2 iy, ix","kres taninv2 ky, kx","...taninv2(ky, kx)... (no rate restriction)"],"type":"opcode","opname":"taninv2"},{"id":"tb","short_desc":"Table Read Access inside expressions.","synopsis":["tb0_init ifn","tb1_init ifn","tb2_init ifn","tb3_init ifn","tb4_init ifn","tb5_init ifn","tb6_init ifn","tb7_init ifn","tb8_init ifn","tb9_init ifn","tb10_init ifn","tb11_init ifn","tb12_init ifn","tb13_init ifn","tb14_init ifn","tb15_init ifn","iout = tb0(iIndex)","kout = tb0(kIndex)","iout = tb1(iIndex)","kout = tb1(kIndex)","iout = tb2(iIndex)","kout = tb2(kIndex)","iout = tb3(iIndex)","kout = tb3(kIndex)","iout = tb4(iIndex)","kout = tb4(kIndex)","iout = tb5(iIndex)","kout = tb5(kIndex)","iout = tb6(iIndex)","kout = tb6(kIndex)","iout = tb7(iIndex)","kout = tb7(kIndex)","iout = tb8(iIndex)","kout = tb8(kIndex)","iout = tb9(iIndex)","kout = tb9(kIndex)","iout = tb10(iIndex)","kout = tb10(kIndex)","iout = tb11(iIndex)","kout = tb11(kIndex)","iout = tb12(iIndex)","kout = tb12(kIndex)","iout = tb13(iIndex)","kout = tb13(kIndex)","iout = tb14(iIndex)","kout = tb14(kIndex)","iout = tb15(iIndex)","kout = tb15(kIndex)"],"type":"opcode","opname":"tb0"},{"id":"tbvcf","short_desc":"Models some of the filter characteristics of a Roland TB303 voltage-controlled filter.","synopsis":["ares tbvcf asig, xfco, xres, kdist, kasym [, iskip]"],"type":"opcode","opname":"tbvcf"},{"id":"tempest","short_desc":"Estimate the tempo of beat patterns in a control signal.","synopsis":["ktemp tempest kin, iprd, imindur, imemdur, ihp, ithresh, ihtim, ixfdbak, istartempo, ifn [, idisprd] [, itweek]"],"type":"opcode","opname":"tempest"},{"id":"tempo","short_desc":"Apply tempo control to an uninterpreted score.","synopsis":["tempo ktempo, istartempo"],"type":"opcode","opname":"tempo"},{"id":"temposcal","short_desc":"Phase-locked vocoder processing with onset detection\/processing, \\'tempo-scaling\\'.","synopsis":["asig temposcal ktimescal, kamp, kpitch, ktab, klock [,ifftsize, idecim, ithresh] "],"type":"opcode","opname":"temposcal"},{"id":"tempoval","short_desc":"Reads the current value of the tempo.","synopsis":["kres tempoval"],"type":"opcode","opname":"tempoval"},{"id":"tigoto","short_desc":"Transfer control at i-time when a new note is being tied onto a previously held note","synopsis":["tigoto label"],"type":"opcode","opname":"tigoto"},{"id":"timedseq","short_desc":"Time Variant Sequencer","synopsis":["ktrig timedseq ktimpnt, ifn, kp1 [,kp2, kp3, ...,kpN]"],"type":"opcode","opname":"timedseq"},{"id":"timeinstk","short_desc":"Read absolute time in k-rate cycles.","synopsis":["kres timeinstk"],"type":"opcode","opname":"timeinstk"},{"id":"timeinsts","short_desc":"Read absolute time in seconds.","synopsis":["kres timeinsts"],"type":"opcode","opname":"timeinsts"},{"id":"timek","short_desc":"Read absolute time in k-rate cycles.","synopsis":["ires timek","kres timek"],"type":"opcode","opname":"timek"},{"id":"times","short_desc":"Read absolute time in seconds.","synopsis":["ires times","kres times"],"type":"opcode","opname":"times"},{"id":"timout","short_desc":"Conditional branch during p-time depending on elapsed note time.","synopsis":["timout istrt, idur, label"],"type":"opcode","opname":"timout"},{"id":"tival","short_desc":"Puts the value of the instrument\\'s internal tie-in flag into the named i-rate variable.","synopsis":["ir tival"],"type":"opcode","opname":"tival"},{"id":"tlineto","short_desc":"Generate glissandos starting from a control signal.","synopsis":["kres tlineto ksig, ktime, ktrig"],"type":"opcode","opname":"tlineto"},{"id":"tone","short_desc":"A first-order recursive low-pass filter with variable frequency response.","synopsis":["ares tone asig, khp [, iskip]"],"type":"opcode","opname":"tone"},{"id":"tonek","short_desc":"A first-order recursive low-pass filter with variable frequency response.","synopsis":["kres tonek ksig, khp [, iskip]"],"type":"opcode","opname":"tonek"},{"id":"tonex","short_desc":"Emulates a stack of filters using the tone opcode.","synopsis":["ares tonex asig, khp [, inumlayer] [, iskip]","ares tonex asig, ahp [, inumlayer] [, iskip]"],"type":"opcode","opname":"tonex"},{"id":"tradsyn","short_desc":"Streaming partial track additive synthesis","synopsis":["asig tradsyn fin, kscal, kpitch, kmaxtracks, ifn"],"type":"opcode","opname":"tradsyn"},{"id":"trandom","short_desc":"Generates a controlled pseudo-random number series between min and max values according to a trigger.","synopsis":["kout trandom ktrig, kmin, kmax"],"type":"opcode","opname":"trandom"},{"id":"transeg","short_desc":"Constructs a user-definable envelope.","synopsis":["ares transeg ia, idur, itype, ib [, idur2] [, itype] [, ic] ...","kres transeg ia, idur, itype, ib [, idur2] [, itype] [, ic] ..."],"type":"opcode","opname":"transeg"},{"id":"transegb","short_desc":"Constructs a user-definable envelope in absolute time.","synopsis":["ares transegb ia, itim, itype, ib [, itim2] [, itype] [, ic] ...","kres transegb ia, itim, itype, ib [, itim2] [, itype] [, ic] ..."],"type":"opcode","opname":"transegb"},{"id":"transegr","short_desc":"Constructs a user-definable envelope with extended release segment.","synopsis":["ares transegr ia, idur, itype, ib [, idur2] [, itype] [, ic] ...","kres transegr ia, idur, itype, ib [, idur2] [, itype] [, ic] ..."],"type":"opcode","opname":"transegr"},{"id":"trcross","short_desc":"Streaming partial track cross-synthesis.","synopsis":["fsig trcross fin1, fin2, ksearch, kdepth [, kmode] "],"type":"opcode","opname":"trcross"},{"id":"trfilter","short_desc":"Streaming partial track filtering.","synopsis":["fsig trfilter fin, kamnt, ifn"],"type":"opcode","opname":"trfilter"},{"id":"trhighest","short_desc":"Extracts the highest-frequency track from a streaming track input signal.","synopsis":["fsig, kfr, kamp trhighest fin1, kscal"],"type":"opcode","opname":"trhighest"},{"id":"trigexpseg","short_desc":"Triggers a series of exponential segments between specified points.","synopsis":["ares trigexpseg kTrig, ia, idur1, ib [, idur2] [, ic] [...]","kres trigexpseg kTrig, ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"trigexpseg"},{"id":"trigger","short_desc":"Informs when a krate signal crosses a threshold.","synopsis":["kout trigger ksig, kthreshold, kmode"],"type":"opcode","opname":"trigger"},{"id":"trighold","short_desc":"Timed trigger, holds a value for a given time","synopsis":["aout trighold ain, kdur","kout trighold kin, kdur"],"type":"opcode","opname":"trighold"},{"id":"triglinseg","short_desc":"Triggers a series of line segments between specified points.","synopsis":["ares triglinseg kTrig, ia, idur1, ib [, idur2] [, ic] [...]","kres triglinseg kTrig, ia, idur1, ib [, idur2] [, ic] [...]"],"type":"opcode","opname":"triglinseg"},{"id":"trigphasor","short_desc":"A resettable linear ramp between two levels","synopsis":["aindex trigphasor xtrig, xrate, kstart, kend [, kresetPos] ","kindex trigphasor xtrig, xrate, kstart, kend [, kresetPos] "],"type":"opcode","opname":"trigphasor"},{"id":"trigseq","short_desc":"Accepts a trigger signal as input and outputs a group of values.","synopsis":["trigseq ktrig_in, kstart, kloop, kinitndx, kfn_values, kout1 [, kout2] [...]"],"type":"opcode","opname":"trigseq"},{"id":"trim","short_desc":"Adjust size o a one-dimensional array.","synopsis":["trim_i iarray, ilen","trim xarray, klen"],"type":"opcode","opname":"trim"},{"id":"trirand","short_desc":"Triangular distribution random number generator","synopsis":["ares trirand krange","ires trirand krange","kres trirand krange"],"type":"opcode","opname":"trirand"},{"id":"trlowest","short_desc":"Extracts the lowest-frequency track from a streaming track input signal.","synopsis":["fsig, kfr, kamp trlowest fin1, kscal"],"type":"opcode","opname":"trlowest"},{"id":"trmix","short_desc":"Streaming partial track mixing.","synopsis":["fsig trmix fin1, fin2 "],"type":"opcode","opname":"trmix"},{"id":"trscale","short_desc":"Streaming partial track frequency scaling.","synopsis":["fsig trscale fin, kpitch[, kgain]"],"type":"opcode","opname":"trscale"},{"id":"trshift","short_desc":"Streaming partial track frequency scaling.","synopsis":["fsig trshift fin, kpshift[, kgain]"],"type":"opcode","opname":"trshift"},{"id":"trsplit","short_desc":"Streaming partial track frequency splitting.","synopsis":["fsiglow, fsighi trsplit fin, ksplit[, kgainlow, kgainhigh]"],"type":"opcode","opname":"trsplit"},{"id":"turnoff","short_desc":"Enables an instrument to turn itself off or to turn an instance of another instrument off.","synopsis":["turnoff","turnoff inst","turnoff knst"],"type":"opcode","opname":"turnoff"},{"id":"turnoff2","short_desc":"Turn off instance(s) of other instruments at performance time.","synopsis":["turnoff2 kinsno, kmode, krelease ","turnoff2_i insno, imode, irelease "],"type":"opcode","opname":"turnoff2"},{"id":"turnoff3","short_desc":"Turn off instance(s) of other instruments at performance time in the queue of scheduled events.","synopsis":["turnoff3 kinsno "],"type":"opcode","opname":"turnoff3"},{"id":"turnon","short_desc":"Activate an instrument for an indefinite time.","synopsis":["turnon insnum [, itime]"],"type":"opcode","opname":"turnon"},{"id":"tvconv","short_desc":"A time-varying convolution (FIR filter) opcode.","synopsis":["ares tvconv asig1, asig2, xfreez1, xfreez2, iparts, ifils"],"type":"opcode","opname":"tvconv"},{"id":"undef","short_desc":"Un-defines a macro.","synopsis":["#undef NAME"],"type":"opcode","opname":"#undef"},{"id":"unirand","short_desc":"Uniform distribution random number generator (positive values only).","synopsis":["ares unirand krange","ires unirand krange","kres unirand krange"],"type":"opcode","opname":"unirand"},{"id":"until","short_desc":"A syntactic looping construction.","synopsis":["until condition do ... od"],"type":"opcode","opname":"until"},{"id":"unwrap","short_desc":"Applies a unwrapping operation to an array of phase values.","synopsis":["kout[] unwrap kin[] "],"type":"opcode","opname":"unwrap"},{"id":"upsamp","short_desc":"Modify a signal by up-sampling.","synopsis":["ares upsamp ksig"],"type":"opcode","opname":"upsamp"},{"id":"urandom","short_desc":"truly random opcodes with controllable range.","synopsis":["ax urandom [imin, imax]","ix urandom [imin, imax]","kx urandom [imin, imax]"],"type":"opcode","opname":"urandom"},{"id":"urd","short_desc":"A discrete user-defined-distribution random generator that can be used as a function.","synopsis":["aout = urd(ktableNum)","iout = urd(itableNum)","kout = urd(ktableNum)"],"type":"opcode","opname":"urd"},{"id":"vactrol","short_desc":"Envelope follower unit generator.","synopsis":["ares vactrol asig [iup, idown]"],"type":"opcode","opname":"vactrol"},{"id":"vadd","short_desc":"Adds a scalar value to a vector in a table.","synopsis":["vadd ifn, kval, kelements [, kdstoffset] [, kverbose]"],"type":"opcode","opname":"vadd"},{"id":"vadd_i","short_desc":"Adds a scalar value to a vector in a table.","synopsis":["vadd_i ifn, ival, ielements [, idstoffset]"],"type":"opcode","opname":"vadd_i"},{"id":"vaddv","short_desc":"Performs addition between two vectorial control signals.","synopsis":["vaddv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vaddv"},{"id":"vaddv_i","short_desc":"Performs addition between two vectorial control signals at init time.","synopsis":["vaddv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vaddv_i"},{"id":"vaget","short_desc":"Access values of the current buffer of an a-rate variable by indexing.","synopsis":["kval vaget kndx, avar"],"type":"opcode","opname":"vaget"},{"id":"valpass","short_desc":"Variably reverberates an input signal with a flat frequency response.","synopsis":["ares valpass asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]"],"type":"opcode","opname":"valpass"},{"id":"vaset","short_desc":"Write value of into the current buffer of an a-rate variable by index.","synopsis":["vaset kval, kndx, avar"],"type":"opcode","opname":"vaset"},{"id":"vbap","short_desc":"Distributes an audio signal among many channels.","synopsis":["ar1[, ar2...] vbap asig, kazim [, kelev] [, kspread] [, ilayout]","array[] vbap asig, kazim [, kelev] [, kspread] [, ilayout]"],"type":"opcode","opname":"vbap"},{"id":"vbap16","short_desc":"Distributes an audio signal among 16 channels.","synopsis":["ar1, ..., ar16 vbap16 asig, kazim [, kelev] [, kspread]"],"type":"opcode","opname":"vbap16"},{"id":"vbap16move","short_desc":"Distribute an audio signal among 16 channels with moving virtual sources.","synopsis":["ar1, ..., ar16 vbap16move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]"],"type":"opcode","opname":"vbap16move"},{"id":"vbap4","short_desc":"Distributes an audio signal among 4 channels.","synopsis":["ar1, ar2, ar3, ar4 vbap4 asig, kazim [, kelev] [, kspread]"],"type":"opcode","opname":"vbap4"},{"id":"vbap4move","short_desc":"Distributes an audio signal among 4 channels with moving virtual sources.","synopsis":["ar1, ar2, ar3, ar4 vbap4move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]"],"type":"opcode","opname":"vbap4move"},{"id":"vbap8","short_desc":"Distributes an audio signal among 8 channels.","synopsis":["ar1, ..., ar8 vbap8 asig, kazim [, kelev] [, kspread]"],"type":"opcode","opname":"vbap8"},{"id":"vbap8move","short_desc":"Distributes an audio signal among 8 channels with moving virtual sources.","synopsis":["ar1, ..., ar8 vbap8move asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]"],"type":"opcode","opname":"vbap8move"},{"id":"vbapg","short_desc":"Calculates the gains for a sound location between multiple channels.","synopsis":["k1[, k2...] vbapg kazim [,kelev] [, kspread] [, ilayout]","karray[] vbapg kazim [,kelev] [, kspread] [, ilayout]"],"type":"opcode","opname":"vbapg"},{"id":"vbapgmove","short_desc":"Calculates the gains for a sound location between multiple channels with moving virtual sources.","synopsis":["kr1[, kr2...] vbapgmove idur, ispread, ifldnum, ifld1 [, ifld2] [...]","karray[] vbapgmove idur, ispread, ifldnum, ifld1 [, ifld2] [...]"],"type":"opcode","opname":"vbapgmove"},{"id":"vbaplsinit","short_desc":"Configures VBAP output according to loudspeaker parameters.","synopsis":["vbaplsinit idim, ilsnum [, idir1] [, idir2] [...] [, idir32]","vbaplsinit idim, ilsnum, ilsarray"],"type":"opcode","opname":"vbaplsinit"},{"id":"vbapmove","short_desc":"Distributes an audio signal among many channels with moving virtual sources.","synopsis":["ar1[, ar2...] vbapmove asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]","aarray[] vbapmove asig, idur, ispread, ifldnum, ifld1 [, ifld2] [...]"],"type":"opcode","opname":"vbapmove"},{"id":"vbapz","short_desc":"Writes a multi-channel audio signal to a ZAK array.","synopsis":["vbapz inumchnls, istartndx, asig, kazim [, kelev] [, kspread]"],"type":"opcode","opname":"vbapz"},{"id":"vbapzmove","short_desc":"Writes a multi-channel audio signal to a ZAK array with moving virtual sources.","synopsis":["vbapzmove inumchnls, istartndx, asig, idur, ispread, ifldnum, ifld1, ifld2, [...]"],"type":"opcode","opname":"vbapzmove"},{"id":"vcella","short_desc":"Cellular Automata","synopsis":["vcella ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements, irulelen [, iradius]"],"type":"opcode","opname":"vcella"},{"id":"vclpf","short_desc":"Resonant 4pole linear lowpass filter","synopsis":["asig vclpf ain, xcf, xres[, istor]"],"type":"opcode","opname":"vclpf"},{"id":"vco","short_desc":"Implementation of a band limited, analog modeled oscillator.","synopsis":["ares vco xamp, xcps, iwave, kpw [, ifn] [, imaxd] [, ileak] [, inyx] [, iphs] [, iskip]"],"type":"opcode","opname":"vco"},{"id":"vco2","short_desc":"Implementation of a band-limited oscillator using pre-calculated tables.","synopsis":["ares vco2 kamp, kcps [, imode] [, kpw] [, kphs] [, inyx]"],"type":"opcode","opname":"vco2"},{"id":"vco2ft","short_desc":"Returns a table number at k-time for a given oscillator frequency and wavform.","synopsis":["kfn vco2ft kcps, iwave [, inyx]"],"type":"opcode","opname":"vco2ft"},{"id":"vco2ift","short_desc":"Returns a table number at i-time for a given oscillator frequency and wavform.","synopsis":["ifn vco2ift icps, iwave [, inyx]"],"type":"opcode","opname":"vco2ift"},{"id":"vco2init","short_desc":"Calculates tables for use by vco2 opcode.","synopsis":["ifn vco2init iwave [, ibasfn] [, ipmul] [, iminsiz] [, imaxsiz] [, isrcft]"],"type":"opcode","opname":"vco2init"},{"id":"vcomb","short_desc":"Variably reverberates an input signal with a colored frequency response.","synopsis":["ares vcomb asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]"],"type":"opcode","opname":"vcomb"},{"id":"vcopy","short_desc":"Copies between two vectorial control signals","synopsis":["vcopy ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [, kverbose]"],"type":"opcode","opname":"vcopy"},{"id":"vcopy_i","short_desc":"Copies a vector from one table to another.","synopsis":["vcopy_i ifn1, ifn2, ielements [,idstoffset, isrcoffset]"],"type":"opcode","opname":"vcopy"},{"id":"vdelay","short_desc":"An interpolating variable time delay.","synopsis":["ares vdelay asig, adel, imaxdel [, iskip]"],"type":"opcode","opname":"vdelay"},{"id":"vdelay3","short_desc":"A variable time delay with cubic interpolation.","synopsis":["ares vdelay3 asig, adel, imaxdel [, iskip]"],"type":"opcode","opname":"vdelay3"},{"id":"vdelayk","short_desc":"k-rate variable time delay.","synopsis":["kout vdelayk ksig, kdel, imaxdel [, iskip, imode]"],"type":"opcode","opname":"vdelayk"},{"id":"vdelayx","short_desc":"A variable delay opcode with high quality interpolation.","synopsis":["aout vdelayx ain, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayx"},{"id":"vdelayxq","short_desc":"A 4-channel variable delay opcode with high quality interpolation.","synopsis":["aout1, aout2, aout3, aout4 vdelayxq ain1, ain2, ain3, ain4, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayxq"},{"id":"vdelayxs","short_desc":"A stereo variable delay opcode with high quality interpolation.","synopsis":["aout1, aout2 vdelayxs ain1, ain2, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayxs"},{"id":"vdelayxw","short_desc":"Variable delay opcodes with high quality interpolation.","synopsis":["aout vdelayxw ain, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayxw"},{"id":"vdelayxwq","short_desc":"Variable delay opcodes with high quality interpolation.","synopsis":["aout1, aout2, aout3, aout4 vdelayxwq ain1, ain2, ain3, ain4, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayxwq"},{"id":"vdelayxws","short_desc":"Variable delay opcodes with high quality interpolation.","synopsis":["aout1, aout2 vdelayxws ain1, ain2, adl, imd, iws [, ist]"],"type":"opcode","opname":"vdelayxws"},{"id":"vdivv","short_desc":"Performs division between two vectorial control signals","synopsis":["vdivv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vdivv"},{"id":"vdivv_i","short_desc":"Performs division between two vectorial control signals at init time.","synopsis":["vdivv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vdivv_i"},{"id":"vecdelay","short_desc":"Vectorial Control-rate Delay Paths","synopsis":["vecdelay ifn, ifnIn, ifnDel, ielements, imaxdel [, iskip]"],"type":"opcode","opname":"vecdelay"},{"id":"veloc","short_desc":"Get the velocity from a MIDI event.","synopsis":["ival veloc [ilow] [, ihigh]"],"type":"opcode","opname":"veloc"},{"id":"vexp","short_desc":"Performs power-of operations between a vector and a scalar","synopsis":["vexp ifn, kval, kelements [, kdstoffset] [, kverbose]"],"type":"opcode","opname":"vexp"},{"id":"vexp_i","short_desc":"Performs power-of operations between a vector and a scalar","synopsis":["vexp_i ifn, ival, ielements[, idstoffset]"],"type":"opcode","opname":"vexp_i"},{"id":"vexpseg","short_desc":"Vectorial envelope generator","synopsis":["vexpseg ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]"],"type":"opcode","opname":"vexpseg"},{"id":"vexpv","short_desc":"Performs exponential operations between two vectorial control signals","synopsis":["vexpv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vexpv"},{"id":"vexpv_i","short_desc":"Performs exponential operations between two vectorial control signals at init time.","synopsis":["vexpv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vexpv_i"},{"id":"vibes","short_desc":"Physical model related to the striking of a metal block.","synopsis":["ares vibes kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec"],"type":"opcode","opname":"vibes"},{"id":"vibr","short_desc":"Easier-to-use user-controllable vibrato.","synopsis":["kout vibr kAverageAmp, kAverageFreq, ifn"],"type":"opcode","opname":"vibr"},{"id":"vibrato","short_desc":"Generates a natural-sounding user-controllable vibrato.","synopsis":["kout vibrato kAverageAmp, kAverageFreq, kRandAmountAmp, kRandAmountFreq, kAmpMinRate, kAmpMaxRate, kcpsMinRate, kcpsMaxRate, ifn [, iphs"],"type":"opcode","opname":"vibrato"},{"id":"vincr","short_desc":"Accumulates audio signals.","synopsis":["vincr accum, aincr"],"type":"opcode","opname":"vincr"},{"id":"vlimit","short_desc":"Limiting and Wrapping Vectorial Signals","synopsis":["vlimit ifn, kmin, kmax, ielements"],"type":"opcode","opname":"vlimit"},{"id":"vlinseg","short_desc":"Vectorial envelope generator","synopsis":["vlinseg ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]"],"type":"opcode","opname":"vlinseg"},{"id":"vlowres","short_desc":"A bank of filters in which the cutoff frequency can be separated under user control.","synopsis":["ares vlowres asig, kfco, kres, iord, ksep"],"type":"opcode","opname":"vlowres"},{"id":"vmap","short_desc":"Maps elements from a vector according to indexes contained in another vector.","synopsis":["vmap ifn1, ifn2, ielements [,idstoffset, isrcoffset]"],"type":"opcode","opname":"vmap"},{"id":"vmirror","short_desc":"Limiting and Wrapping Vectorial Signals","synopsis":["vmirror ifn, kmin, kmax, ielements"],"type":"opcode","opname":"vmirror"},{"id":"vmult","short_desc":"Multiplies a vector in a table by a scalar value.","synopsis":["vmult ifn, kval, kelements [, kdstoffset] [, kverbose]"],"type":"opcode","opname":"vmult"},{"id":"vmult_i","short_desc":"Multiplies a vector in a table by a scalar value.","synopsis":["vmult_i ifn, ival, ielements [, idstoffset]"],"type":"opcode","opname":"vmult_i"},{"id":"vmultv","short_desc":"Performs mutiplication between two vectorial control signals","synopsis":["vmultv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vmultv"},{"id":"vmultv_i","short_desc":"Performs mutiplication between two vectorial control signals at init time.","synopsis":["vmultv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vmultv_i"},{"id":"voice","short_desc":"An emulation of a human voice.","synopsis":["ares voice kamp, kfreq, kphoneme, kform, kvibf, kvamp, ifn, ivfn"],"type":"opcode","opname":"voice"},{"id":"vosim","short_desc":"Simple vocal simulation based on glottal pulses with formant characteristics.","synopsis":["ar vosim kamp, kFund, kForm, kDecay, kPulseCount, kPulseFactor, ifn [, iskip]"],"type":"opcode","opname":"vosim"},{"id":"vphaseseg","short_desc":"Allows one-dimensional HVS (Hyper-Vectorial Synthesis).","synopsis":["vphaseseg kphase, ioutab, ielems, itab1,idist1,itab2 [,idist2,itab3, ... ,idistN-1,itabN]"],"type":"opcode","opname":"vphaseseg"},{"id":"vport","short_desc":"Vectorial Control-rate Delay Paths","synopsis":["vport ifn, khtime, ielements [, ifnInit]"],"type":"opcode","opname":"vport"},{"id":"vpow","short_desc":"Raises each element of a vector to a scalar power.","synopsis":["vpow ifn, kval, kelements [, kdstoffset] [, kverbose]"],"type":"opcode","opname":"vpow"},{"id":"vpow_i","short_desc":"Raises each element of a vector to a scalar power","synopsis":["vpow_i ifn, ival, ielements [, idstoffset]"],"type":"opcode","opname":"vpow_i"},{"id":"vpowv","short_desc":"Performs power-of operations between two vectorial control signals","synopsis":["vpowv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vpowv"},{"id":"vpowv_i","short_desc":"Performs power-of operations between two vectorial control signals at init time.","synopsis":["vpowv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vpowv_i"},{"id":"vps","short_desc":"Shapes a phase signal according to a two-dimensional vector.","synopsis":["avp vps aph,kd,kv"],"type":"opcode","opname":"vps"},{"id":"vpvoc","short_desc":"Implements signal reconstruction using an fft-based phase vocoder and an extra envelope.","synopsis":["ares vpvoc ktimpnt, kfmod, ifile [, ispecwp] [, ifn]"],"type":"opcode","opname":"vpvoc"},{"id":"vrandh","short_desc":"Generates a vector of random numbers stored into a table, holding the values for a period of time.","synopsis":["vrandh ifn, krange, kcps, ielements [, idstoffset] [, iseed] [, isize] [, ioffset]"],"type":"opcode","opname":"vrandh"},{"id":"vrandi","short_desc":"Generate a sort of \\'vectorial band-limited noise\\'","synopsis":["vrandi ifn, krange, kcps, ielements [, idstoffset] [, iseed] [, isize] [, ioffset]"],"type":"opcode","opname":"vrandi"},{"id":"vsubv","short_desc":"Performs subtraction between two vectorial control signals","synopsis":["vsubv ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]"],"type":"opcode","opname":"vsubv"},{"id":"vsubv_i","short_desc":"Performs subtraction between two vectorial control signals at init time.","synopsis":["vsubv_i ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]"],"type":"opcode","opname":"vsubv_i"},{"id":"vtaba","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtaba andx, ifn, aout1 [, aout2, aout3, .... , aoutN ]"],"type":"opcode","opname":"vtaba"},{"id":"vtabi","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtabi indx, ifn, iout1 [, iout2, iout3, .... , ioutN ]"],"type":"opcode","opname":"vtabi"},{"id":"vtabk","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtabk kndx, ifn, kout1 [, kout2, kout3, .... , koutN ]"],"type":"opcode","opname":"vtabk"},{"id":"vtable1k","short_desc":"Read a vector (several scalars simultaneously) from a table.","synopsis":["vtable1k kfn,kout1 [, kout2, kout3, .... , koutN ]"],"type":"opcode","opname":"vtable1k"},{"id":"vtablea","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtablea andx, kfn, kinterp, ixmode, aout1 [, aout2, aout3, .... , aoutN ]"],"type":"opcode","opname":"vtablea"},{"id":"vtablei","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtablei indx, ifn, interp, ixmode, iout1 [, iout2, iout3, .... , ioutN ]"],"type":"opcode","opname":"vtablei"},{"id":"vtablek","short_desc":"Read vectors (from tables -or arrays of vectors).","synopsis":["vtablek kndx, kfn, kinterp, ixmode, kout1 [, kout2, kout3, .... , koutN ]"],"type":"opcode","opname":"vtablek"},{"id":"vtablewa","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtablewa andx, kfn, ixmode, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]"],"type":"opcode","opname":"vtablewa"},{"id":"vtablewi","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtablewi indx, ifn, ixmode, inarg1 [, inarg2, inarg3 , .... , inargN ]"],"type":"opcode","opname":"vtablewi"},{"id":"vtablewk","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtablewk kndx, kfn, ixmode, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]"],"type":"opcode","opname":"vtablewk"},{"id":"vtabwa","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtabwa andx, ifn, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]"],"type":"opcode","opname":"vtabwa"},{"id":"vtabwi","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtabwi indx, ifn, inarg1 [, inarg2, inarg3 , .... , inargN ]"],"type":"opcode","opname":"vtabwi"},{"id":"vtabwk","short_desc":"Write vectors (to tables -or arrays of vectors).","synopsis":["vtabwk kndx, ifn, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]"],"type":"opcode","opname":"vtabwk"},{"id":"vwrap","short_desc":"Limiting and Wrapping Vectorial Signals","synopsis":["vwrap ifn, kmin, kmax, ielements"],"type":"opcode","opname":"vwrap"},{"id":"waveset","short_desc":"A simple time stretch by repeating cycles.","synopsis":["ares waveset ain, krep [, ilen]"],"type":"opcode","opname":"waveset"},{"id":"websocket","short_desc":"Read and write signals and arrays using a websocket connection.","synopsis":["xout1[, xout2, xout3, ..., xoutN] websocket iport, xin"],"type":"opcode","opname":"websocket"},{"id":"weibull","short_desc":"Weibull distribution random number generator (positive values only).","synopsis":["ares weibull ksigma, ktau","ires weibull ksigma, ktau","kres weibull ksigma, ktau"],"type":"opcode","opname":"weibull"},{"id":"wgbow","short_desc":"Creates a tone similar to a bowed string.","synopsis":["ares wgbow kamp, kfreq, kpres, krat, kvibf, kvamp [, ifn] [, iminfreq]"],"type":"opcode","opname":"wgbow"},{"id":"wgbowedbar","short_desc":"A physical model of a bowed bar.","synopsis":["ares wgbowedbar kamp, kfreq, kpos, kbowpres, kgain [, iconst] [, itvel] [, ibowpos] [, ilow]"],"type":"opcode","opname":"wgbowedbar"},{"id":"wgbrass","short_desc":"Creates a tone related to a brass instrument.","synopsis":["ares wgbrass kamp, kfreq, ktens, iatt, kvibf, kvamp [, ifn] [, iminfreq]"],"type":"opcode","opname":"wgbrass"},{"id":"wgclar","short_desc":"Creates a tone similar to a clarinet.","synopsis":["ares wgclar kamp, kfreq, kstiff, iatt, idetk, kngain, kvibf, kvamp [, ifn] [, iminfreq]"],"type":"opcode","opname":"wgclar"},{"id":"wgflute","short_desc":"Creates a tone similar to a flute.","synopsis":["ares wgflute kamp, kfreq, kjet, iatt, idetk, kngain, kvibf, kvamp [, ifn] [, iminfreq] [, ijetrf] [, iendrf]"],"type":"opcode","opname":"wgflute"},{"id":"wgpluck","short_desc":"A high fidelity simulation of a plucked string.","synopsis":["ares wgpluck icps, iamp, kpick, iplk, idamp, ifilt, axcite"],"type":"opcode","opname":"wgpluck"},{"id":"wgpluck2","short_desc":"Physical model of the plucked string.","synopsis":["ares wgpluck2 iplk, kamp, icps, kpick, krefl"],"type":"opcode","opname":"wgpluck2"},{"id":"wguide1","short_desc":"A simple waveguide model consisting of one delay-line and one first-order lowpass filter.","synopsis":["ares wguide1 asig, xfreq, kcutoff, kfeedback"],"type":"opcode","opname":"wguide1"},{"id":"wguide2","short_desc":"A model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters.","synopsis":["ares wguide2 asig, xfreq1, xfreq2, kcutoff1, kcutoff2, kfeedback1, kfeedback2"],"type":"opcode","opname":"wguide2"},{"id":"while","short_desc":"A syntactic looping construction.","synopsis":["while condition do ... od"],"type":"opcode","opname":"while"},{"id":"wiiconnect","short_desc":"Reads data from a number of external Nintendo Wiimote controllers.","synopsis":["ires wiiconnect [itimeout, imaxnum]"],"type":"opcode","opname":"wiiconnect"},{"id":"wiidata","short_desc":"Reads data fields from a number of external Nintendo Wiimote controllers.","synopsis":["kres wiidata kcontrol[, knum]"],"type":"opcode","opname":"wiidata"},{"id":"wiirange","short_desc":"Sets scaling and range limits for certain Wiimote fields.","synopsis":[" wiirange icontrol, iminimum, imaximum[, inum]"],"type":"opcode","opname":"wiirange"},{"id":"wiisend","short_desc":"Sends data to one of a number of external Nintendo Wiimote controllers.","synopsis":["kres wiisend kcontrol, kvalue[, knum]"],"type":"opcode","opname":"wiisend"},{"id":"window","short_desc":"Applies a window to an array.","synopsis":["kout[] window kin[][, koff, itype]"],"type":"opcode","opname":"window"},{"id":"wrap","short_desc":"Wraps-around the signal that exceeds the low and high thresholds.","synopsis":["ares wrap asig, klow, khigh","ires wrap isig, ilow, ihigh","kres wrap ksig, klow, khigh"],"type":"opcode","opname":"wrap"},{"id":"writescratch","short_desc":"writes a value into the scratchpad of the instance of an instrument.","synopsis":["writescratchival[, index]"],"type":"opcode","opname":"writescratch"},{"id":"wterrain","short_desc":"A simple wave-terrain synthesis opcode.","synopsis":["aout wterrain kamp, kpch, k_xcenter, k_ycenter, k_xradius, k_yradius, itabx, itaby"],"type":"opcode","opname":"wterrain"},{"id":"wterrain2","short_desc":"A wave-terrain synthesis opcode using different curves","synopsis":["aout wterrain2 kamp, kcps, kx, ky, krx, kry, krot, ktab0, ktab1, kcurve, kcurveparam "],"type":"opcode","opname":"wterrain2"},{"id":"xadsr","short_desc":"Calculates the classical ADSR envelope.","synopsis":["ares xadsr iatt, idec, islev, irel [, idel]","kres xadsr iatt, idec, islev, irel [, idel]"],"type":"opcode","opname":"xadsr"},{"id":"xin","short_desc":"Passes variables to a user-defined opcode block,","synopsis":["xinarg1 [, xinarg2] ... [xinargN] xin"],"type":"opcode","opname":"xin"},{"id":"xout","short_desc":"Retrieves variables from a user-defined opcode block,","synopsis":["xout xoutarg1 [, xoutarg2] ... [, xoutargN]"],"type":"opcode","opname":"xout"},{"id":"xscanmap","short_desc":"Allows the position and velocity of a node in a scanned process to be read.","synopsis":["kpos, kvel xscanmap iscan, kamp, kvamp [, iwhich]"],"type":"opcode","opname":"xscanmap"},{"id":"xscans","short_desc":"Fast scanned synthesis waveform and the wavetable generator.","synopsis":["ares xscans kamp, kfreq, ifntraj, id [, iorder]"],"type":"opcode","opname":"xscans"},{"id":"xscansmap","short_desc":"Allows the position and velocity of a node in a scanned process to be read.","synopsis":["xscansmap kpos, kvel, iscan, kamp, kvamp [, iwhich]"],"type":"opcode","opname":"xscansmap"},{"id":"xscanu","short_desc":"Compute the waveform and the wavetable for use in scanned synthesis.","synopsis":["xscanu init, irate, ifndisplace, ifnmass, ifnmatrix, ifncentr, ifndamp, kmass, kmtrxstiff, kcentr, kdamp, ileft, iright, kpos, kdisplace, ain, idisp, id"],"type":"opcode","opname":"xscanu"},{"id":"xtratim","short_desc":"Extend the duration of real-time generated events.","synopsis":["xtratim iextradur"],"type":"opcode","opname":"xtratim"},{"id":"xyin","short_desc":"Sense the cursor position in an output window","synopsis":["kx, ky xyin iprd, ixmin, ixmax, iymin, iymax [, ixinit] [, iyinit]"],"type":"opcode","opname":"xyin"},{"id":"xyscale","short_desc":"2D linear interpolation","synopsis":["kout xyscale kx, ky, k00, k10, k01, k11"],"type":"opcode","opname":"xyscale"},{"id":"zacl","short_desc":"Clears one or more variables in the za space.","synopsis":["zacl kfirst [, klast]"],"type":"opcode","opname":"zacl"},{"id":"zakinit","short_desc":"Establishes zak space.","synopsis":["zakinit isizea, isizek"],"type":"opcode","opname":"zakinit"},{"id":"zamod","short_desc":"Modulates one a-rate signal by a second one.","synopsis":["ares zamod asig, kzamod"],"type":"opcode","opname":"zamod"},{"id":"zar","short_desc":"Reads from a location in za space at a-rate.","synopsis":["ares zar kndx"],"type":"opcode","opname":"zar"},{"id":"zarg","short_desc":"Reads from a location in za space at a-rate, adds some gain.","synopsis":["ares zarg kndx, kgain"],"type":"opcode","opname":"zarg"},{"id":"zaw","short_desc":"Writes to a za variable at a-rate without mixing.","synopsis":["zaw asig, kndx"],"type":"opcode","opname":"zaw"},{"id":"zawm","short_desc":"Writes to a za variable at a-rate with mixing.","synopsis":["zawm asig, kndx [, imix]"],"type":"opcode","opname":"zawm"},{"id":"zdf_1pole","short_desc":"Zero-delay feedback implementation of 1 pole filter.","synopsis":["asig zdf_1pole ain, xcf [, kmode, istor]"],"type":"opcode","opname":"zdf_1pole"},{"id":"zdf_1pole_mode","short_desc":"Zero-delay feedback implementation of 1 pole filter with multimode output.","synopsis":["alp, ahp zdf_1pole_mode ain, xcf [, istor]"],"type":"opcode","opname":"zdf_1pole_mode"},{"id":"zdf_2pole","short_desc":"Zero-delay feedback implementation of 2 pole filter.","synopsis":["asig zdf_2pole ain, xcf, xQ [, kmode, istor]"],"type":"opcode","opname":"zdf_2pole"},{"id":"zdf_2pole_mode","short_desc":"Zero-delay feedback implementation of 2 pole filter with multimode output.","synopsis":["alp, abp, ahp zdf_2pole_mode ain, xcf, Q [, istor]"],"type":"opcode","opname":"zdf_2pole_mode"},{"id":"zdf_ladder","short_desc":"Zero-delay feedback implementation of 4 pole ladder filter.","synopsis":["asig zdf_ladder ain, xcf, xQ [, istor]"],"type":"opcode","opname":"zdf_ladder"},{"id":"zfilter2","short_desc":"Performs filtering using a transposed form-II digital filter lattice with radial pole-shearing and angular pole-warping.","synopsis":["ares zfilter2 asig, kdamp, kfreq, iM, iN, ib0, ib1, ..., ibM, ia1,ia2, ..., iaN"],"type":"opcode","opname":"zfilter2"},{"id":"zir","short_desc":"Reads from a location in zk space at i-rate.","synopsis":["ir zir indx"],"type":"opcode","opname":"zir"},{"id":"ziw","short_desc":"Writes to a zk variable at i-rate without mixing.","synopsis":["ziw isig, indx"],"type":"opcode","opname":"ziw"},{"id":"ziwm","short_desc":"Writes to a zk variable to an i-rate variable with mixing.","synopsis":["ziwm isig, indx [, imix]"],"type":"opcode","opname":"ziwm"},{"id":"zkcl","short_desc":"Clears one or more variables in the zk space.","synopsis":["zkcl kfirst, klast"],"type":"opcode","opname":"zkcl"},{"id":"zkmod","short_desc":"Facilitates the modulation of one signal by another.","synopsis":["kres zkmod ksig, kzkmod"],"type":"opcode","opname":"zkmod"},{"id":"zkr","short_desc":"Reads from a location in zk space at k-rate.","synopsis":["kres zkr kndx"],"type":"opcode","opname":"zkr"},{"id":"zkw","short_desc":"Writes to a zk variable at k-rate without mixing.","synopsis":["zkw kval, kndx"],"type":"opcode","opname":"zkw"}]